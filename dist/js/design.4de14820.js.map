{"version":3,"file":"js/design.4de14820.js","mappings":"8JAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,iBAAiBC,MAAM,CAAC,GAAK,cAAcC,GAAG,CAAC,MAAQR,EAAIS,eAAe,CAA2B,WAAzBT,EAAIU,iBAA+B,CAACN,EAAG,gBAAgB,CAACO,IAAI,UAAUJ,MAAM,CAAC,IAAMP,EAAIY,KAAKJ,GAAG,CAAC,eAAiBR,EAAIa,mBAAmBT,EAAG,eAAe,CAACO,IAAI,SAASJ,MAAM,CAAC,SAAWP,EAAIc,UAAUN,GAAG,CAAC,SAAWR,EAAIe,qBAAqBf,EAAIgB,KAA+B,YAAzBhB,EAAIU,iBAAgC,CAACN,EAAG,kBAAkB,CAACO,IAAI,UAAUH,GAAG,CAAC,eAAiBR,EAAIa,mBAAmBT,EAAG,iBAAiB,CAACO,IAAI,SAASJ,MAAM,CAAC,SAAWP,EAAIc,UAAUN,GAAG,CAAC,SAAWR,EAAIe,qBAAqBf,EAAIgB,MAAM,EAAE,EACnqBC,EAAkB,G,8ICEP,MAAMC,EAEnBC,WAAAA,CAAaC,GACXnB,KAAKmB,KAAOA,EACZnB,KAAKoB,YAAc,EACrB,CAEAC,aAAAA,CAAcC,EAAOC,EAAQC,EAAYC,GACvCC,EAAAA,EAAOC,IAAI,EAAG,gCAAiC,SAC/C,IACE,IAAIR,EAAOnB,KAAKmB,KACZS,EAAYC,EAAAA,EAASC,oBAAoBR,EAAMS,GAAIZ,EAAKa,MAAOb,GAC/DS,GACFA,EAAUK,WAAUC,GAAOlC,KAAKmC,yBAAyBZ,EAAQC,EAAYC,EAASN,EAAMe,KAC5FN,EAAUQ,MAAKC,IACTA,GACFrC,KAAKsC,YAEPf,EAAOgB,kBAAiBC,IACtBxC,KAAKyC,UAAUD,EAAI,IAErBhB,EAAWkB,wBAAuBC,IAChC3C,KAAK4C,WAAWD,EAAY,GAC5B,IAKJ3C,KAAK4B,UAAYA,GAEjBF,EAAAA,EAAOC,IAAI,EAAG,gCAAiC,4BAEnD,CAAE,MAAOkB,GACPnB,EAAAA,EAAOoB,MAAM,gCAAiC,wBAAyBD,EACzE,CACF,CAEAE,aAAAA,GACE,IAAIC,EAAShD,KAAKoB,YAAY6B,MAAKC,GAAKA,EAAEnB,KAAO/B,KAAKmB,KAAKY,KAC3D,YAAkBoB,IAAXH,CACT,CAGAJ,UAAAA,CAAYD,GACVjB,EAAAA,EAAOC,IAAI,EAAG,6BAA8B,QAASgB,GAKjD3C,KAAK4B,WAAa5B,KAAK+C,iBACzBrB,EAAAA,EAAOC,IAAI,EAAG,6BAA8B,OAAQgB,GACpD3C,KAAK4B,UAAUwB,KAAK,CAACC,KAAM,SAAUV,YAAaA,KAElDjB,EAAAA,EAAOC,IAAI,EAAG,6BAA8B,WAEhD,CAEAc,SAAAA,CAAWD,GAKLxC,KAAK4B,WAAa5B,KAAK+C,iBAEzB/C,KAAK4B,UAAUwB,KAAK,CAACC,KAAM,QAASb,IAAKA,GAE7C,CAEAc,OAAAA,GACE5B,EAAAA,EAAOC,KAAK,EAAG,0BAA2B,SACtC3B,KAAK4B,WACP5B,KAAK4B,UAAUwB,KAAK,CAACC,KAAM,OAE/B,CAEAf,SAAAA,GACEZ,EAAAA,EAAOC,IAAI,EAAG,4BAA6B,SACvC3B,KAAK4B,WACP5B,KAAK4B,UAAUwB,KAAK,CAACC,KAAM,SAE/B,CAEAE,UAAAA,GACE7B,EAAAA,EAAOC,IAAI,EAAG,6BAA8B,SACxC3B,KAAK4B,WACP5B,KAAK4B,UAAUwB,KAAK,CAACC,KAAM,UAE/B,CAEAlB,wBAAAA,CAA0BZ,EAAQC,EAAYC,EAASN,EAAMe,GAE1C,UAAbA,EAAImB,OACJ3B,EAAAA,EAAOC,IAAI,EAAG,2CAA4C,SAC1DF,EAAQ+B,cAActB,EAAIf,MAC1BI,EAAOiC,cAActB,EAAIf,MACzBnB,KAAKwD,cAActB,EAAIf,MACvBnB,KAAKuD,cAEQ,WAAbrB,EAAImB,OACN3B,EAAAA,EAAOC,IAAI,EAAG,2CAA4C,UAC1DF,EAAQ+B,cAActB,EAAIf,MAC1BI,EAAOiC,cAActB,EAAIf,MACzBnB,KAAKwD,cAActB,EAAIf,OAER,QAAbe,EAAImB,OACN3B,EAAAA,EAAOC,IAAI,EAAG,2CAA4C,OAC1DF,EAAQgC,iBAAiBvB,EAAIf,MAC7BI,EAAOkC,iBAAiBvB,EAAIf,MAC5BnB,KAAKyD,iBAAiBvB,EAAIf,OAEX,UAAbe,EAAImB,MAEN9B,EAAOmC,eAAexB,EAAIf,KAAMe,EAAIM,KAGrB,WAAbN,EAAImB,OACN3B,EAAAA,EAAOC,IAAI,EAAG,2CAA4C,UAC1DH,EAAWmC,qBAAqBzB,EAAIf,KAAMe,EAAIS,aAElD,CAGAa,aAAAA,CAAerC,GACbO,EAAAA,EAAOC,IAAI,EAAG,gCAAiCR,GAC/C,MAAMyC,EAAQ5D,KAAKoB,YAAY6B,MAAKC,GAAKA,EAAEnB,KAAOZ,EAAKY,KAClD6B,GACH5D,KAAKoB,YAAYyC,KAAK1C,EAE1B,CAEAsC,gBAAAA,CAAkBtC,GAChBO,EAAAA,EAAOC,IAAI,EAAG,mCAAoCR,GAClDnB,KAAKoB,YAAcpB,KAAKoB,YAAY0C,QAAOZ,GAAKA,EAAEnB,KAAOZ,EAAKY,IAChE,CAEAgC,KAAAA,GACErC,EAAAA,EAAOC,IAAI,EAAG,2CAA4C,SACtD3B,KAAK4B,WACP5B,KAAK4B,UAAUmC,OAEnB,EC/IF,IAAI,EAAS,WAAa,IAAIhE,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,yDAAyD,CAACF,EAAG,MAAM,CAACE,YAAY,2EAA2E2D,MAAO,SAAUjE,EAAIkE,eAAgB,MAAO,CAAC9D,EAAG,MAAM,CAACE,YAAY,2BAA2BC,MAAM,CAAC,yBAAyB,kBAAkBH,EAAG,MAAM,CAACO,IAAI,YAAYL,YAAY,0BAA0BE,GAAG,CAAC,UAAY,SAAS2D,GAAiC,OAAzBA,EAAOC,kBAAyBpE,EAAIqE,cAAcC,MAAM,KAAMC,UAAU,OAAOnE,EAAG,MAAM,CAACE,YAAY,mBAAmB,CAACF,EAAG,MAAM,CAACE,YAAY,qBAAqB2D,MAAO,SAAUjE,EAAIkE,eAAgB,MAAO,CAAC9D,EAAG,WAAW,CAACG,MAAM,CAAC,KAAOP,EAAIwE,WAAWhE,GAAG,CAAC,OAASR,EAAIyE,eAAe,GAAGrE,EAAG,MAAM,CAACE,YAAY,qBAAqB2D,MAAO,qBAAsBjE,EAAIkE,eAAgB,OAAQ,CAAC9D,EAAG,MAAM,CAACE,YAAY,yCAAyC,CAACF,EAAG,MAAM,CAACsE,MAAM,CAAC,yCAA0C,CAAC,wBAAwC,eAAb1E,EAAI2E,OAAyBpE,MAAM,CAAC,yBAAyB,cAAcC,GAAG,CAAC,MAAQR,EAAI4E,eAAe,CAACxE,EAAG,QAAQ,CAACG,MAAM,CAAC,KAAO,cAAc,KAAKH,EAAG,MAAM,CAACE,YAAY,4BAA4B,CAACF,EAAG,MAAM,CAACE,YAAY,qBAAqBC,MAAM,CAAC,yBAAyB,kBAAkB,CAAEP,EAAU,OAAEI,EAAG,yBAAyB,CAACI,GAAG,CAAC,OAASR,EAAI6E,oBAAoB7E,EAAIgB,MAAM,KAAKZ,EAAG,MAAM,CAACE,YAAY,wEAAwEC,MAAM,CAAC,yBAAyB,wBAAwB,CAACH,EAAG,aAAa,CAACG,MAAM,CAAC,MAAQP,EAAI8E,iBAAiB,UAAW,GAAMtE,GAAG,CAAC,OAASR,EAAI+E,4BAA4B3E,EAAG,sBAAsB,CAACG,MAAM,CAAC,MAAQ,WAAWC,GAAG,CAAC,OAAS,SAAS2D,GAAQ,OAAOnE,EAAIgF,MAAM,iBAAkBb,EAAO,KAAK/D,EAAG,MAAM,CAACE,YAAY,kBAAkBE,GAAG,CAAC,MAAQR,EAAIiF,cAAc,CAAC7E,EAAG,MAAM,CAACE,YAAY,2BAA2B,CAACN,EAAIkF,GAAG,gBAAgB,OAAO9E,EAAG,MAAM,CAACE,YAAY,uDAAuDC,MAAM,CAAC,yBAAyB,qBAAqB,EACrkE,EAAkB,G,6GCDlB,EAAS,WAAa,IAAIP,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,qBAAqB,EACvI,EAAkB,G,WCctB,GACA6E,KAAAA,YACAC,OAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACAC,KAAAA,WACA,OACAC,SAAAA,GAEA,EACAC,WAAAA,CAAAA,EACAC,QAAAA,CACAC,UAAAA,GAEA,GADA,8BACA,aACA,6BACA,aACA,yBACA,yBACA,CACA,EAEAC,aAAAA,CAAAA,GACA,sBACA,EAEAC,QAAAA,CAAAA,GACA,sBACA,EAEAC,SAAAA,CAAAA,GACA,gBACA,EAEAC,SAAAA,CAAAA,GACA,gBACA,EAEAC,OAAAA,CAAAA,GACA,eACA,EAEAC,QAAAA,CAAAA,EAAAA,GAEA,eACA,iBACA,iBACA,gBACA,cACA,cACA,cAGA,UACA,yCAEA,OAiCA,GAhCAC,EAAAA,SAAAA,SAAAA,EAAAA,GACA,cACA,yCAKA,GAJAC,EAAAA,MAAAA,OAAAA,KAAAA,IAAAA,EAAAA,IAAAA,EAAAA,GAAAA,IACAA,EAAAA,MAAAA,MAAAA,EAAAA,IACAA,EAAAA,MAAAA,KAAAA,GAAAA,EAAAA,GAAAA,IAEA,YACA,oBACAC,EAAAA,EAAAA,IAAAA,EAAAA,6BACAC,EAAAA,WAAAA,EAAAA,EACA,CACA,IAEA,iBACAC,EAAAA,KAAAA,UAAAA,GACAC,EAAAA,KAAAA,UAAAA,IAGAC,EAAAA,KAAAA,mDAAAA,GAAAA,MAAAA,GACAA,EAAAA,KAAAA,mDAAAA,GAAAA,MAAAA,GACAA,EAAAA,KAAAA,oDAAAA,EAAAA,KAAAA,UAAAA,MAAAA,GACAA,EAAAA,KAAAA,kDAAAA,EAAAA,KAAAA,UAAAA,MAAAA,GAEA,uBACA,4BAOA,oBACA,mDACAC,EAAAA,MAAAA,KAAAA,IAAAA,EAAAA,IACA,iBACAC,EAAAA,KAAAA,UAAAA,IAEAF,EAAAA,KAAAA,8CAAAA,EAAAA,KAAAA,UAAAA,MAAAA,GACA,iDACAL,EAAAA,MAAAA,KAAAA,IAAAA,EAAAA,GACA,CAEA,GAEAQ,OAAAA,GACA,GCpHwP,I,UCOpPC,GAAY,OACd,EACA,EACA,GACA,EACA,KACA,KACA,MAIF,EAAeA,EAAiB,Q,iCClB5B,EAAS,WAAa,IAAI1G,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,wGAAwG,CAACF,EAAG,MAAM,CAACE,YAAY,yCAAyCC,MAAM,CAAC,KAAO,SAAS,yBAAyB,WAAW,CAACH,EAAG,MAAM,CAACG,MAAM,CAAC,IAAM,EAAQ,UAAuCH,EAAG,OAAO,CAACE,YAAY,qCAAqC,CAACN,EAAIkF,GAAGlF,EAAI2G,GAAG3G,EAAImF,SAAS/E,EAAG,OAAO,CAACE,YAAY,YAAYF,EAAG,MAAM,CAACE,YAAY,kDAAkDC,MAAM,CAAC,KAAO,OAAO,yBAAyB,SAASC,GAAG,CAAC,UAAY,SAAS2D,GAAQA,EAAOC,iBAAkB,IAAI,CAAChE,EAAG,MAAM,CAACE,YAAY,2BAA2B,CAACF,EAAG,KAAK,CAACG,MAAM,CAAC,KAAO,SAASP,EAAI4G,GAAI5G,EAAS,OAAE,SAAS6G,GAAG,OAAOzG,EAAG,KAAK,CAAC0G,IAAID,EAAEE,MAAMzG,YAAY,sBAAsBoE,MAAMmC,EAAEX,IAAI1F,GAAG,CAAC,MAAQ,SAAS2D,GAAiC,OAAzBA,EAAOC,kBAAyBpE,EAAIgH,SAASH,EAAG1C,EAAO,IAAI,CAAC/D,EAAG,QAAQ,CAACE,YAAY,yBAAyB,CAACN,EAAIkF,GAAGlF,EAAI2G,GAAGE,EAAEI,WAAW,IAAG,KAAKjH,EAAIkH,GAAG,MAAM,EAC3kC,EAAkB,CAAC,WAAa,IAAIlH,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,6BAA6B,CAACF,EAAG,MAAM,CAACE,YAAY,2BAA2B,G,WCkC/M,GACA6E,KAAAA,oBACAC,OAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACA+B,MAAAA,CAAAA,QACA9B,KAAAA,WACA,OACA+B,aAAAA,KACAC,MAAAA,CACA,CAAAN,MAAAA,iBAAAO,KAAAA,GAAAL,MAAAA,KAAAA,OAAAA,0BACA,CAAAF,MAAAA,WAAAO,KAAAA,GAAAL,MAAAA,KAAAA,OAAAA,sBACA,CAAAF,MAAAA,EAAAb,IAAAA,wBACA,CAAAa,MAAAA,SAAAO,KAAAA,GAAAL,MAAAA,KAAAA,OAAAA,uBAGA,EACAM,SAAAA,CACAC,KAAAA,GACA,iBACA,GAEAjC,WAAAA,CACA,EAEAC,QAAAA,CAGAwB,QAAAA,CAAAA,EAAAA,GACA,wBACA,EAEAS,MAAAA,GACAvB,EAAAA,EAAAA,OAAAA,KAAAA,QAAAA,yBACA,sBACA,EAEA,aAEA,GAGAO,OAAAA,GACA,GC5EwQ,ICOpQ,GAAY,OACd,EACA,EACA,GACA,EACA,KACA,KACA,MAIF,EAAe,EAAiB,Q,qBClB5B,EAAS,WAAa,IAAIzG,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACsE,MAAM,CAAC,uBAAwB,CAAC,4BAA+B1E,EAAI0H,YAAY,CAACtH,EAAG,MAAM,CAACO,IAAI,OAAOL,YAAY,2BAA2B,CAACN,EAAI4G,GAAI5G,EAAS,OAAE,SAAS2H,EAAEd,GAAG,OAAOzG,EAAG,IAAI,CAAC0G,IAAIa,EAAEZ,MAAMpG,IAAI,OAAOiH,UAAS,EAAKlD,MAAM,CAAC,qCAAsC,CAAE,0BAA6BiD,EAAEZ,QAAU/G,EAAI6H,WAAYrH,GAAG,CAAC,MAAQ,SAAS2D,GAAQ,OAAOnE,EAAI8H,YAAYH,EAAGd,EAAE,IAAI,CAACzG,EAAG,OAAO,CAACO,IAAI,QAAQiH,UAAS,EAAKlD,MAAM,6BAA+BiD,EAAEL,OAAOlH,EAAG,OAAO,CAACE,YAAY,8BAA8B,CAACN,EAAIkF,GAAG,IAAIlF,EAAI2G,GAAGgB,EAAEV,OAAO,QAAQ,IAAG7G,EAAG,MAAM,CAACE,YAAY,+BAA+B2D,MAAM,CAAG,MAASjE,EAAI+H,eAAiB,KAAM,KAAQ/H,EAAIgI,WAAa,SAAW,IAAI,EACvyB,EAAkB,G,uBC4BtB,IACA7C,KAAAA,iBACAC,OAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GACA+B,MAAAA,CAAAA,SACA9B,KAAAA,WACA,OACAqC,UAAAA,EACAK,eAAAA,EACAC,WAAAA,EACAH,SAAAA,mBACAI,MAAAA,CACA,CAAAhB,MAAAA,WAAAF,MAAAA,mBAAAO,KAAAA,yBAAAY,QAAAA,6BACA,CAAAjB,MAAAA,eAAAF,MAAAA,kBAAAO,KAAAA,0BAAAY,QAAAA,yBACA,CAAAjB,MAAAA,mBAAAF,MAAAA,cAAAO,KAAAA,yCAAAY,QAAAA,yBACA,CAAAjB,MAAAA,UAAAF,MAAAA,iBAAAO,KAAAA,yCAAAY,QAAAA,4BAGA,EACAX,SAAAA,CACAY,OAAAA,GACA,mBACA,sBAGA,GAEA5C,WAAAA,CAAAA,EACAC,QAAAA,CACAsC,WAAAA,CAAAA,EAAAA,GACA,wCACA,sBACA,qBACA,4BACA,EAEAM,YAAAA,CAAAA,GACA,2BACA,mBACA,iCACA,wBACA,yBACA,EACAC,QAAAA,GACA,GAEAC,MAAAA,CACAvB,KAAAA,CAAAA,GACA,yCACA,YACA,GAEA,gBACA,2CACA,qBACAwB,YAAAA,KACA,4BACA,2BACA,4CACA,GACA,KAGAA,YAAAA,IAAAA,KAAAA,UAAAA,GAAAA,IACA,GC5F8Q,MCQ1Q,IAAY,OACd,GACA,EACA,GACA,EACA,KACA,KACA,MAIF,GAAe,GAAiB,QCnB5B,GAAS,WAAa,IAAIvI,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,yDAAyD,EAC3K,GAAkB,G,wEC2BtB,IACA6E,KAAAA,wBACAC,OAAAA,GACAC,KAAAA,WACA,OACAmD,cAAAA,EACAC,mBAAAA,EAEA,EACAlD,WAAAA,CACA,EACAC,QAAAA,CAGAkD,aAAAA,GACA,2CACA,kBAGA,mBACA,0CACA,EAEA3I,MAAAA,GACA,oCAEA,8CACAmG,EAAAA,EAAAA,IAAAA,KAAAA,WAAAA,mCAEA,iBAEA,yBAEA,8BAEA,yBAEA,8BAEA,+BAEA,4BAEA,+BAEA,+BAEA,+BAEA,iDAMA,8BACA,2CACA,uCAEA,uBAEA,6BACA,wBAEA,kCACA,EAKAyC,sBAAAA,GACA,oDAGA,cAIA,gEACA,6CAEA,kDACA,4BAEA,mCAKA,qCACA,qFACA,+BAKAC,EAAAA,EAAAA,IAAAA,oBAAAA,MAAAA,GACA,gFACA,gCAKAA,EAAAA,EAAAA,IAAAA,oBAAAA,MAAAA,GACA,6FACA,oCAMAA,EAAAA,EAAAA,IAAAA,oBAAAA,MAAAA,GACA,2FACA,gCAMAA,EAAAA,EAAAA,IAAAA,oBAAAA,MAAAA,GACA,wGACA,qCAEA,EAGAC,sBAAAA,GACA,oDAEA,cAKA,iEACA,6CACA,6CACA,4BACA,mCAKA,yCACA,oFACA,gCAMAD,EAAAA,EAAAA,IAAAA,oBAAAA,MAAAA,GACA,8FACA,qCAKAA,EAAAA,EAAAA,IAAAA,oBAAAA,MAAAA,GACA,wFACA,8BACA,gCAEA,EAGAE,uBAAAA,GACA,qDAEA,cAEA,2DAEA,0CAEA,uDAEA,iBACA5C,EAAAA,EAAAA,IAAAA,EAAAA,QAAAA,wBACA6C,EAAAA,WAAAA,CACA,UAAA9B,MAAAA,cACA,SAAAA,MAAAA,eACA,SAAAA,MAAAA,sBACA,sBAAAA,MAAAA,iBACA,eAAAA,MAAAA,WAEA8B,EAAAA,QAAAA,EAAAA,MAAAA,MAAAA,IACA,iEAGA,mGAEA,wBACA,wBACA,EAEAC,eAAAA,CAAAA,GACA,UACA,QACAC,EAAAA,KAAAA,OAAAA,qCAEA,QACAA,EAAAA,KAAAA,OAAAA,uCAEA,QACAA,EAAAA,KAAAA,OAAAA,4CAEA,qBACAA,EAAAA,KAAAA,OAAAA,wCAGA,cACAA,EAAAA,KAAAA,OAAAA,uCAEA,+BACA,EAEAC,uBAAAA,GACA,qDAEA,cAGA,iEACA,gDACA,uDAEA,wCAAAC,eAAAA,KACA,qCACA,CAAApC,OAAAA,EAAAE,MAAAA,YACA,CAAAF,OAAAA,EAAAE,MAAAA,UAEA,sCACA,oCACA,yFAGA,mEACAmC,EAAAA,KAAAA,cAAAA,KAAAA,mBACAC,EAAAA,EAAAA,IAAAA,kBAAAA,MAAAA,GAGA,mCAAAF,eAAAA,KAEA,SAEA,2DACAG,EAAAA,KAAAA,aAAAA,MAAAA,KAAAA,CAAAA,EAAAA,KACA,CAAAvC,MAAAA,EAAAE,MAAAA,EAAAA,SAGA,gCACA,0CACA,4DACA,SAGA,kCACA,gCACAf,EAAAA,EAAAA,IAAAA,KAAAA,eAAAA,QAAAA,wBACA,+BACA,oFAEA,wEACAkD,EAAAA,KAAAA,cAAAA,KAAAA,qBAEA,oCACA,uFACAlD,EAAAA,EAAAA,IAAAA,KAAAA,mBAAAA,QAAAA,oBACA,mCAGA,yCACA,+EACA,8BACA,mCAGA0C,EAAAA,EAAAA,IAAAA,oBAAAA,MAAAA,GACAW,EAAAA,KAAAA,gBAAAA,EAAAA,EAAAA,eAAAA,qCACA,8BACA,mCAGA,yEACAH,EAAAA,KAAAA,cAAAA,KAAAA,sBAEA,iEACA,EAGAI,uBAAAA,GACA,qDAEA,gBAEA,kEACA,iDAEA,uDAEA,wCACA,qCACA,CAAAzC,OAAAA,EAAAE,MAAAA,gBACA,CAAAF,OAAAA,EAAAE,MAAAA,sBAMA,sCACA,oCACA,uFAGAoC,EAAAA,EAAAA,IAAAA,iBAAAA,MAAAA,GACA,4CACAnD,EAAAA,EAAAA,IAAAA,KAAAA,uBAAAA,QAAAA,mBACA,yCACA,qDACA,uCACA,iGAGA,oEACAkD,EAAAA,KAAAA,cAAAA,KAAAA,mBACAC,EAAAA,EAAAA,IAAAA,kBAAAA,MAAAA,GAGA,sCAAAI,aAAAA,EAAAC,gBAAAA,EAAAC,WAAAA,IACA,iCACA,wCACA,2CACA,0CACAzD,EAAAA,EAAAA,IAAAA,KAAAA,iBAAAA,QAAAA,WACA,oFAEA,0CAAAuD,aAAAA,EAAAC,gBAAAA,EAAAC,WAAAA,IACA,qCACA,2CACA,+CACA,8CACAzD,EAAAA,EAAAA,IAAAA,KAAAA,qBAAAA,QAAAA,IACA,wFAGA,yCAAAuD,aAAAA,EAAAC,gBAAAA,EAAAC,WAAAA,IACA,oCACA,6CACA,8CACA,6CACAzD,EAAAA,EAAAA,IAAAA,KAAAA,oBAAAA,QAAAA,IACA,uFAGA,kEACAkD,EAAAA,KAAAA,cAAAA,KAAAA,gBACAC,EAAAA,EAAAA,IAAAA,sCAAAA,MAAAA,GACA,wCAAAF,eAAAA,KACA,qCACA,CAAApC,OAAAA,EAAAE,MAAAA,cACA,CAAAF,OAAAA,EAAAE,MAAAA,UAGA,sCACA,oCACA,uFAGA,iEACAmC,EAAAA,KAAAA,cAAAA,KAAAA,iBAEAC,EAAAA,EAAAA,IAAAA,kBAAAA,MAAAA,GAEA,QAAAtC,OAAAA,EAAAE,MAAAA,YACA,2BACA,kDACA,iCACAqC,EAAAA,KAAAA,CAAAvC,MAAAA,EAAAE,MAAAA,EAAAA,MACA,CAEA,mCAAAkC,eAAAA,KACA,kCACA,iCACAjD,EAAAA,EAAAA,IAAAA,KAAAA,eAAAA,QAAAA,wBACA,+BACA,sFAGA,EAEA0D,oBAAAA,GAGA,2EACA,0CACA1D,EAAAA,EAAAA,IAAAA,EAAAA,uBAGA,4CAEA,qCAAAiD,eAAAA,KACA,iCACA,CAAApC,MAAAA,OAAAE,MAAAA,gBACA,CAAAF,MAAAA,WAAAE,MAAAA,oBACA,CAAAF,MAAAA,SAAAE,MAAAA,kBACA,CAAAF,MAAAA,YAAAE,MAAAA,qBAEA,gFACA,oCACA,mCACA,gDACA,sCACA,gCACA,sFACA,0FA+BA,oEACA,kFACA,oEAEA,EAEA4C,qBAAAA,GACAC,QAAAA,MAAAA,oBACA,EAEAC,iBAAAA,CAAAA,GACAD,QAAAA,MAAAA,oBAAAA,EACA,EAEAE,mBAAAA,CAAAA,GACAF,QAAAA,MAAAA,sBAAAA,EACA,EAEAG,iBAAAA,CAAAA,GACA,+DAEA,EAEAC,iBAAAA,CAAAA,EAAAA,EAAAA,GAEA,gBAEAd,EAAAA,UAAAA,GAGA,oBACA,wCACA,6CACA,qCACAlD,EAAAA,EAAAA,IAAAA,KAAAA,mBAAAA,QAAAA,mBACA,iEACA,yFAIA6C,EAAAA,MAAAA,CAAAA,EAAAA,IACA,eACA,sBAEA,WACA,gBAEA,gBACA,wBAEA,gBAIA,gDACA,0BACA,4BACA,aAIA,wDAEA,kBAMA,GAJAoB,EAAAA,UAAAA,GAEAA,EAAAA,QAAAA,EAAAA,MAAAA,MAAAA,IAEA,wBAIA,mDAEA7D,EAAAA,KAAAA,GAAAA,QAAAA,EAAAA,IAAAA,MAAAA,GAEA,wDAEA,mBACAA,EAAAA,KAAAA,GAAAA,EAAAA,MAAAA,MAAAA,GAEA,yBACAA,EAAAA,KAAAA,GAAAA,EAAAA,SAAAA,KAAAA,MAAAA,EAIA,KACA,gBACA6D,EAAAA,SAAAA,QAAAA,EAAAA,GAAAA,MAAAA,EAAAA,SAAAA,KAEA,YACAA,EAAAA,SAAAA,QAAAA,EAAAA,GAAAA,MAAAA,EAAAA,MAEA,cACAA,EAAAA,SAAAA,QAAAA,EAAAA,GAAAA,MAAAA,EAAAA,MAGA,iBACAA,EAAAA,SAAAA,QAAAA,EAAAA,GAAAA,MAAAA,IAAAA,EAAAA,UAAAA,KAKA,oCACA,8DACA,oCACA,kBACAA,EAAAA,UAAAA,EAAAA,YACA,yBAEA,kEACA,oEAEA,iDACAC,EAAAA,aAAAA,EAAAA,GAAAA,GAAAA,cAEA,oCACA,kBACA,yBAEA,CAEA,qCACA,gCACA,+BACA,EAEAC,YAAAA,CAAAA,GACA,mCAGA,aACA,wCAEA,EAEAC,sBAAAA,CAAAA,GACA,MACA,qCACA,qCACA,gCACA,KACApE,EAAAA,EAAAA,OAAAA,EAAAA,QAAAA,gCAEAA,EAAAA,EAAAA,IAAAA,EAAAA,QAAAA,+BAEA,CAEA,MACA,qCACA,gCACAA,EAAAA,EAAAA,OAAAA,EAAAA,QAAAA,0BACAA,EAAAA,EAAAA,OAAAA,EAAAA,QAAAA,+BACA,CAEA,sBACA,EAKAqE,oBAAAA,CAAAA,GAEA,SAGA,iCACA,mCACA,qCACA,gCACA,iBACArE,EAAAA,EAAAA,OAAAA,EAAAA,QAAAA,gCAIAA,EAAAA,EAAAA,IAAAA,EAAAA,QAAAA,+BAEA,CACA,MAGA,qCACA,gCACAA,EAAAA,EAAAA,OAAAA,EAAAA,QAAAA,0BACAA,EAAAA,EAAAA,OAAAA,EAAAA,QAAAA,+BACA,CAEA,sBACA,EAEAsE,iBAAAA,CAAAA,GACA,2BACA,oCACA,gBACA,uCAEA,uCAGA,yBACA,qCAGA,gCACA,CACA,EAEAC,iBAAAA,CAAAA,GACA,oCACA,sCAEA,gCACA,EAEAC,aAAAA,GACA,gCACA,EAEAC,yBAAAA,GACA,wDACA,2BACA,EAEAC,mBAAAA,GACA,WACA,oCACAC,EAAAA,GAAAA,KAAAA,kBAAAA,GAAAA,WAEA,QACA,EAEAC,YAAAA,CAAAA,EAAAA,EAAAA,GAEA,WACA,UACAC,EAAAA,MAAAA,GACAjB,QAAAA,KAAAA,8CAGA,mBACAkB,EAAAA,OAAAA,QACA,6BACA,SAEA,kCACA,UACA,iBACA,0CACA,qBAEA,iCAEA,QACA,gBAEA,WACA,oCAEA,WACA,sDACA,KACA,IACAC,EAAAA,EAAAA,IAAAA,GAAAA,IAAAA,WACA,IACAC,EAAAA,wDAIA,eACA,IACAC,EAAAA,GAGA,wBAEA,qGAGA,GACAC,QAAAA,EACAC,gBAAAA,EAAAA,MAAAA,EACAC,UAAAA,EAAAA,GACAC,SAAAA,KAAAA,MAAAA,EAAAA,IAAAA,QAAAA,EAAAA,IAAAA,SAAAA,KACAC,KAAAA,EACAC,MAAAA,EAAAA,IAAAA,QACAC,KAAAA,EAAAA,OACAR,OAAAA,EACAD,QAAAA,EACAjJ,GAAAA,EACA2J,QAAAA,EAAAA,OAAAA,WAGA5C,EAAAA,KAAAA,GACA/G,GACA,CAMA,OAJA+G,EAAAA,MAAAA,CAAAA,EAAAA,IACA,YAGA,CACA,EAGA6C,uBAAAA,GAEA,cAEA,qEAEA,iDAEA,0DACAtF,EAAAA,KAAAA,uBAAAA,iBAAAA,MAAAA,GAEA,sCAAAmD,aAAAA,EAAAC,gBAAAA,EAAAC,WAAAA,IACA,iCACA,6CACA,2CACA,0CACA,kFAGA,EAQAkC,iBAAAA,GACA,+CAEA,8DAEA,+CAEA,yDAEA,iBACA3F,EAAAA,EAAAA,IAAAA,EAAAA,QAAAA,wBACA6C,EAAAA,WAAAA,CACA,CAAA9B,MAAAA,aAAAF,MAAAA,kBAAAO,KAAAA,qBACA,CAAAL,MAAAA,SAAAF,MAAAA,oBAAAO,KAAAA,yBACA,CAAAL,MAAAA,cAAAF,MAAAA,oBAAAO,KAAAA,mBAGAyB,EAAAA,SAAAA,mBAEA,2BACAA,EAAAA,QAAAA,GACA,yDACA,EAMA+C,cAAAA,GACA5F,EAAAA,EAAAA,OAAAA,KAAAA,eAAAA,4BACA,aACAA,EAAAA,EAAAA,IAAAA,KAAAA,OAAAA,YAAAA,+BAEA,EAEA6F,cAAAA,GACA,wCACA,4BACA,8BAIA,mCACA,4BACA,mCAGA,sBACA,EAGAC,eAAAA,GACA,6CACA,wCACA,uBACA9F,EAAAA,EAAAA,IAAAA,EAAAA,2BACA,CACA,EAcA+F,aAAAA,CAAAA,GACA,2CACA,iBACA,EAEAC,SAAAA,CAAAA,GACA,uCACA,aAEA,EAEAC,eAAAA,CAAAA,GACA,6CACA,cACA,EAEAC,QAAAA,CAAAA,GACA,wCACA,sBACA,qBACA,aACA,EAEAC,aAAAA,CAAAA,GACA,iDACA,iBACA,EAEAC,OAAAA,CAAAA,GACA,0CACA,mBACA,EAEAC,SAAAA,CAAAA,GACA,qDACA,aACA,EAEAC,OAAAA,CAAAA,GACA,+CACA,YACA,mBACA,EAGAC,YAAAA,GAEA,EAOAC,qBAAAA,GACA,EAEAC,UAAAA,CAAAA,EAAAA,EAAAA,GAEA,gBACA,4BACA,4BACAC,EAAAA,QAEA,qBAAAlB,KAAAA,IAAAmB,MAAAA,EAAAC,gBAAAA,EAAAC,MAAAA,UAAAC,OAAAA,UAAAC,OAAAA,YAeA,OAdAC,EAAAA,WAAAA,IAAAA,KACAA,EAAAA,SAAAA,GAEA,IACAA,EAAAA,UAAAA,qBACA,gDAGA,IACAA,EAAAA,SAAAA,GACA,+DAGAhH,EAAAA,EAAAA,IAAAA,EAAAA,QAAAA,iBACA,CACA,EAEAiH,iBAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GACA,oCAGA,GAFAjH,EAAAA,EAAAA,IAAAA,EAAAA,0CAEA,GACA,qCACAA,EAAAA,EAAAA,IAAAA,EAAAA,GACAkH,EAAAA,YAAAA,EACA,CAiBA,OATA,GACA,qDAEA,EAGAC,EAAAA,YAAAA,GAFA,+BAKA,CACA,EAGAC,WAAAA,CAAAA,EAAAA,GAEA,oCACApH,EAAAA,EAAAA,IAAAA,EAAAA,mBACAkD,EAAAA,YAAAA,GAEA,sCAQA,OAPAmE,EAAAA,UAAAA,EACArH,EAAAA,EAAAA,IAAAA,EAAAA,sEACAsH,EAAAA,YAAAA,GAEA,IACAD,EAAAA,YAAAA,GAEA,CACA,EAEAE,aAAAA,CAAAA,GACA,oCAGA,OAFAvH,EAAAA,EAAAA,IAAAA,EAAAA,6BACAmH,EAAAA,YAAAA,GACA,CACA,EAEAK,aAAAA,CAAAA,EAAAA,EAAAA,GAAAA,GAEA,sCACAxH,EAAAA,EAAAA,IAAAA,EAAAA,sBAEA,sCAcA,OATA,mCACAA,EAAAA,EAAAA,OAAAA,EAAAA,gCACA,MAGA,GACA,sBAEAyH,EAAAA,YAAAA,GACA,CACA,EAEAC,mBAAAA,CAAAA,EAAAA,EAAAA,GACA,oCAMA,GALA1H,EAAAA,EAAAA,IAAAA,EAAAA,2BACAmH,EAAAA,YAAAA,GAEAG,EAAAA,UAAAA,EAEA,GACA,qCACAtH,EAAAA,EAAAA,IAAAA,EAAAA,4BACA2H,EAAAA,UAAAA,KACAL,EAAAA,YAAAA,EACA,CAEA,qCAIA,OAHAtH,EAAAA,EAAAA,IAAAA,EAAAA,kDACAsH,EAAAA,YAAAA,GAEA,CACA,EAIAM,eAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GACA,4DACA,wCACA,4CACA,2CACA,MACA,0DACA,qEACA,CAEA,WACA,EAOAC,MAAAA,GACA,kDACA,eACAC,EAAAA,EAAAA,GAAAA,cAAAA,KAAAA,MAAAA,GAAAA,iBAEAA,EAAAA,EAAAA,GAAAA,UAAAA,KAAAA,MAAAA,GAAAA,eAEA,EAEAC,OAAAA,GACA,oCACA,EAMAC,gBAAAA,CAAAA,GACA,8CAKA,sDACA,iEACA,6BAIA,eAGA,yBACA,uBACA,6BAGA,4CACA,EAGAC,gBAAAA,CAAAA,GACA,oEAKA,oDACA,kEAIA,eACA,yBACA,uBACA,6BAGA,6CACA,EAKAC,cAAAA,CAAAA,GACA,eACA,uBACA,oBACA,EAIAC,aAAAA,CAAAA,GACA,eAEA,wBACA,qBACA,EAEAC,aAAAA,CAAAA,GACA,eACA,wBACA,sBACA,2BACA,EAIAC,gBAAAA,GACA,eACA,qBACA,EAMAC,oBAAAA,GAEA,sBACA,2CAEA,EAQAC,WAAAA,CAAAA,EAAAA,GAEA,kBACA,UAEA,UAEA,gDACA,qBAEAC,EAAAA,QAAAA,KACA,cACAC,QAAAA,IAAAA,CACA,0DACA,8DACA,UACA,8BAGAA,QAAAA,IAAAA,CACA,oDACA,wDACA,UACA,6BAEA,IAGAD,EAAAA,MAAAA,EAAAA,EAAAA,OACA,EAEAE,YAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GAEA,IACA,aAEA,uBACA5D,EAAAA,OAAAA,QACA,6BACA,WAEA,kBACA6D,EAAAA,UAAAA,GACAA,EAAAA,QAAAA,GACAA,EAAAA,SAAAA,KAAAA,OACAA,EAAAA,gBAAAA,KAAAA,cACAA,EAAAA,SAAAA,GACAA,EAAAA,SAAAA,GACAA,EAAAA,WAAAA,EAAAA,GAGAH,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,WACAG,EAAAA,SACA,IACA,UACA/E,QAAAA,MAAAA,EACA,CACA,EAEAgF,qBAAAA,CAAAA,EAAAA,GAEA,cAIA,4BACA,WACA,2DACA,CAGA,mBACA,KAGA,CACAC,MAAAA,EACAzL,KAAAA,OACA0L,UAAAA,GACAnE,SAAAA,CAAAA,EAGA,EAOAoE,cAAAA,CAAAA,GAEA,cAEA3I,EAAAA,IAAAA,EAAAA,EACA,+DAEA,qBAEA,4BAMAA,EAAAA,MAAAA,GAAAA,WAAAA,MAAAA,GACA,qBACA4I,EAAAA,WAAAA,CACA,CAAAnI,MAAAA,WAAAE,MAAAA,QACA,CAAAF,MAAAA,YAAAE,MAAAA,WAEAiI,EAAAA,SAAAA,EAAAA,aACAA,EAAAA,QAAAA,GAOA5I,EAAAA,MAAAA,gBAAAA,mCAAAA,MAAAA,GACA,qBACA6I,EAAAA,WAAAA,CACA,CAAApI,MAAAA,SAAAE,MAAAA,iBACA,CAAAF,MAAAA,OAAAE,MAAAA,iBAEAkI,EAAAA,SAAAA,EAAAA,gBACAA,EAAAA,QAAAA,GAGA,sDACA,sDACA,4CAIA,UACAT,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,MAAAA,EAAAA,EAAAA,MAAAA,EAAAA,WACAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,MAAAA,EAAAA,EAAAA,MAAAA,KAAAA,iBAAAA,EAAAA,EAAAA,KAEAA,EAAAA,MAAAA,EAAAA,EAAAA,QAEA,gCACA,iCAEA,6CACA,EAEAU,cAAAA,CAAAA,EAAAA,EAAAA,GACA,OACAC,YAAAA,EAAAA,WACAC,eAAAA,EAAAA,YAGA,2BACA,gCACAZ,EAAAA,OACA,EAQAa,gBAAAA,CAAAA,GAEA,cAEA,UAEA,+BAGA,4BAEAC,EAAAA,MAAAA,EAAAA,EAAAA,OACA,EAGAC,iBAAAA,CAAAA,EAAAA,GACA,qBAoCA,OAnCAC,EAAAA,OAAAA,CACA,CACAzI,MAAAA,QACA9B,KAAAA,QACA7B,KAAAA,OACAqM,SAAAA,OACAC,YAAAA,aACA1J,IAAAA,gCACAnD,MAAAA,uBAEA,CACAkE,MAAAA,WACA9B,KAAAA,WACA7B,KAAAA,WACAuM,IAAAA,EACAD,YAAAA,gBACA1J,IAAAA,gCACAnD,MAAAA,qDAEA,CACAkE,MAAAA,uFACA9B,KAAAA,MACA7B,KAAAA,QACAqM,SAAAA,OACAzJ,IAAAA,wCACAnD,MAAAA,0CAEA,CACA,CAAAkE,MAAAA,SAAAf,IAAAA,iBAAA4J,MAAAA,EAAAA,EAAAA,MAAAA,EAAAA,UACA,CAAA7I,MAAAA,sBAAAf,IAAAA,8BAAA4J,MAAAA,EAAAA,EAAAA,MAAAA,KAAAA,gBAAAA,EAAAA,MAGAJ,EAAAA,QAAAA,GACAA,EAAAA,UAEA,CACA,EAEAK,aAAAA,CAAAA,EAAAA,EAAAA,GAEA,8BAEA,KAIA,GAFAC,EAAAA,KAAAA,QAAAA,YAAAA,GAEA,gBACA,6CACAC,EAAAA,UAAAA,wDAAAA,SAEAA,EAAAA,UAAAA,0CAAAA,IAGAvB,EAAAA,YACA,CACAA,EAAAA,QAEA,oCACA,gBAEAwB,OAAAA,SAAAA,KAAAA,mBAGApG,QAAAA,MAAAA,4CAEA,MAEA4E,EAAAA,OAEA,GAEAjI,OAAAA,GACA,eACA,GC95C6Q,MCOzQ,IAAY,OACd,GACA,GACA,IACA,EACA,KACA,KACA,MAIF,GAAe,GAAiB,Q,wBC6EhC,IACAtB,KAAAA,kBACAC,OAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IACAC,KAAAA,WACA,OACAV,KAAAA,GACAH,UAAAA,aACA2L,OAAAA,KACA5O,MAAAA,KACAH,KAAAA,KACA2F,OAAAA,EACAqJ,aAAAA,eACAC,uBAAAA,EACAvL,iBAAAA,CAAAA,EACAZ,eAAAA,IAEA,EACAqB,WAAAA,CACA,eAEA,WACA,UACA,0BACA,0BAGAC,QAAAA,CACAC,UAAAA,GACA,uCACA,yCACA,qBACA,gBACA,EAEA6K,iBAAAA,CAAAA,GACA,+CACA,qBACA,EAEAC,MAAAA,CAAAA,GACA,kBACA,2BACA,EAEAC,MAAAA,CAAAA,GACA,kBACA,2BACA,EAGAC,cAAAA,CAAAA,GACA,oBACA,6CAEA,EAEAhM,UAAAA,CAAAA,EAAAA,GACA,0CACA,eACA,gBAEA,EAEAI,gBAAAA,CAAAA,GACA,iDACA,SACA,SAEA,EAEA6L,QAAAA,CAAAA,GACA,cACA,cACA,6DACAhC,EAAAA,MAAAA,EAAAA,EAAAA,QACA,qBACAiC,EAAAA,QAAAA,EACA,EAGA/L,YAAAA,CAAAA,GACA,0CACA,kBACA,gDACA,EAEAgM,eAAAA,CAAAA,EAAAA,EAAAA,GACA,wDACA,oBACA,4BACA,GACA9G,QAAAA,KAAAA,yCAAAA,KAAAA,MAEA,aACA,iCAEA,qBACA,EAEAyE,gBAAAA,GACA,0EAEA,qCACA,uBACA,6BAEA,EAEAsC,oBAAAA,GACA,qEACA,0BACA,4BAEA,uDAEA,EAEAC,eAAAA,CAAAA,GACA,oBACAvI,WAAAA,EAAAA,EAAAA,MAAAA,KAAAA,iBAAAA,IACA,EAEAwI,SAAAA,CAAAA,GACA,eAIA,EAEAC,mBAAAA,CAAAA,GACA,uBACA,EAEAjM,wBAAAA,CAAAA,EAAAA,GACA,aACA,oCAEA,EAEAkM,OAAAA,CAAAA,GACA,WACA,EAEA,sBAEA,GADA,2CACA,eAEA,6DACA,oBACA,MACA,uDACA,oBAEA,CACA,EAEAC,YAAAA,CAAAA,GACA,qDACA,gBACA,EAGA,qBACA,2DAEA,8DACA,KACA,eACAC,EAAAA,EAAAA,IAAAA,EAGA,gBACA,yFACA,8BACA,4BACA,8BACA7K,EAAAA,GAAAA,GAAAA,KAAAA,OAAAA,mBAAAA,MAAAA,GAEA,uBACA8K,EAAAA,QAAAA,GACAA,EAAAA,cAAAA,EAAAA,IACAA,EAAAA,UAAAA,KAAAA,UAEA/H,EAAAA,EAAAA,IAAAA,qBAAAA,MAAAA,GACAgI,EAAAA,EAAAA,IAAAA,2BAAAA,MAAAA,GAEA,+DAEA,UACA7B,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,MAAAA,EAAAA,EAAAA,MAAAA,EAAAA,WACAA,EAAAA,MAAAA,EAAAA,EAAAA,OACA,EAMAnL,aAAAA,CAAAA,GACA,6BACAiN,EAAAA,GAAAA,GAAAA,GAAAA,IACA,YAIA,kDACAC,aAAAA,QAAAA,oBAAAA,KAAAA,gBACA,8CAEA,EAEAC,SAAAA,GACA,wCACA,kDACA,gBACA,2BAEA,EAEAC,iBAAAA,CAAAA,GACA,sBACA,aACA,gCAEA,EAQAC,gBAAAA,GACA,6EACA,qCACAC,eAAAA,KAAAA,sBACA9G,SAAAA,KAAAA,wBAEA,8BAEA,4BACA,EAEA+G,qBAAAA,CAAAA,GACA,yDACA,6BACA,wBACA,YACA,wBAEA,qCACAD,eAAAA,KAAAA,sBACA9G,SAAAA,KAAAA,wBACA,mCAEA,EAEAgH,gBAAAA,GACA,+CACA,gBAQA,yCACA,qCACAhH,SAAAA,KAAAA,wBACA,gCAVA,wCACA,cACA,2FAEA,uFAQA,4BACA,EAGAiH,kBAAAA,CAAAA,GACA,2DACA,iBACA,yCACA,qCACAjH,SAAAA,KAAAA,wBACA,6BACA,EAGAkH,WAAAA,GACA,yCACA,qCACAlH,SAAAA,KAAAA,wBACA,wBACA,EAEAmH,WAAAA,GACA,0CACA,4BACA,EAEAC,eAAAA,GACA,iDACA,SACApH,SAAAA,KAAAA,sBACAqH,KAAAA,KAAAA,oBAAAA,WACAnF,MAAAA,KAAAA,iBAAAA,WACAoF,KAAAA,KAAAA,oBAAAA,WACAC,KAAAA,KAAAA,eAAAA,WACAC,UAAAA,KAAAA,qBAAAA,WACAC,QAAAA,KAAAA,uBAAAA,WACAC,aAAAA,KAAAA,oBAAAA,YAEA,mEACA,4BACA,EAIAC,cAAAA,GACA,+CACA,gCACAzF,MAAAA,KAAAA,iBAAAA,WACAlC,SAAAA,KAAAA,wBACA,4BACA,4BACA,EAGA4H,cAAAA,GACA,4CACA,wBACA5H,SAAAA,KAAAA,wBACA,4BACA3E,EAAAA,EAAAA,OAAAA,KAAAA,cAAAA,4BACA,gDACA,EAEAwM,gBAAAA,CAAAA,GACA,kDACA,EAQAC,qBAAAA,CAAAA,GAGA,GAFA,sDAEA,sBAEA,2BACA,UACA,6BACA,iCAEA,MAEA,cACA,UACA,yDAEArM,EAAAA,GAAAA,kBAAAA,gCAAAA,KAAAA,gBAAAA,KAAAA,SAAAA,MAAAA,GAEA,+CAEA,kBAEA,eACAN,EAAAA,WAAAA,SAAAA,GACA,+BACA,IACAA,EAAAA,SAAAA,SAAAA,GACA,+EACA,IACAA,EAAAA,SAAAA,EAAAA,EAAAA,QACAA,EAAAA,QAAAA,GAEA0I,EAAAA,MAAAA,EAAAA,EAAAA,OACA,CACA,CACA,EASAkE,qBAAAA,GACA,sDACA,sBACA1M,EAAAA,EAAAA,OAAAA,KAAAA,kBAAAA,2BACA,EAGA2M,oBAAAA,CAAAA,GACA,qEACA,sBAEA3M,EAAAA,EAAAA,OAAAA,KAAAA,cAAAA,4BACA,6BAEA,qCAEA,YACA,gBAEA,wCACA,2CAGA,gCACA4M,EAAAA,qBAAAA,GAEA,wDACA,qDAGA,6FACA,mFACA,CACA,EAIAC,oBAAAA,CAAAA,GAQA,MACA,EACA,EACA,EACA,EAXA,mDACA,sBAEA7M,EAAAA,EAAAA,OAAAA,KAAAA,cAAAA,4BAEA,6BAOA,iBAOA8M,EAAAA,KAAAA,OAAAA,sBACAC,EAAAA,KAAAA,OAAAA,kBACAC,EAAAA,KAAAA,OAAAA,mBACAC,EAAAA,KAAAA,OAAAA,yBACAC,EAAAA,KAAAA,OAAAA,mBAVAJ,EAAAA,KAAAA,OAAAA,qBACAC,EAAAA,KAAAA,OAAAA,iBACAC,EAAAA,KAAAA,OAAAA,kBACAC,EAAAA,KAAAA,OAAAA,wBACAC,EAAAA,KAAAA,OAAAA,kBASA,oBACA,IACAlB,EAAAA,GAIA,qBACA,iBAEA,MACA,eAEA,iBACA,IACAmB,EAAAA,GAGA,qBACA,IACAC,EAAAA,GAIA,qCACA,0CAGA,gCACA,wCAGA,gCACA,iCAGA,sCACA,uCAGA,sCACA,oDAGA,EAGAC,qBAAAA,GACA,mDACA,sBAGArN,EAAAA,EAAAA,OAAAA,KAAAA,kBAAAA,4BAGA,qCACAA,EAAAA,EAAAA,IAAAA,KAAAA,gBAAAA,4BACAA,EAAAA,EAAAA,IAAAA,KAAAA,iBAAAA,QAAAA,UACAA,EAAAA,EAAAA,IAAAA,KAAAA,eAAAA,QAAAA,UACAA,EAAAA,EAAAA,OAAAA,KAAAA,eAAAA,4BAEAA,EAAAA,EAAAA,IAAAA,KAAAA,iBAAAA,QAAAA,UACAA,EAAAA,EAAAA,IAAAA,KAAAA,kBAAAA,4BACAA,EAAAA,EAAAA,IAAAA,KAAAA,uBAAAA,QAAAA,YAGAA,EAAAA,EAAAA,OAAAA,KAAAA,gBAAAA,4BACAA,EAAAA,EAAAA,OAAAA,KAAAA,iBAAAA,QAAAA,UACAA,EAAAA,EAAAA,OAAAA,KAAAA,eAAAA,QAAAA,UACAA,EAAAA,EAAAA,IAAAA,KAAAA,eAAAA,4BAEAA,EAAAA,EAAAA,OAAAA,KAAAA,iBAAAA,QAAAA,UACAA,EAAAA,EAAAA,OAAAA,KAAAA,kBAAAA,4BACAA,EAAAA,EAAAA,OAAAA,KAAAA,uBAAAA,QAAAA,UAEA,EAMAsN,iBAAAA,GACA,4BACA,EAEAC,qBAAAA,GACA,mDAGA,qCACA,6BACA,GACA,gCACAvB,KAAAA,KAAAA,oBAAAA,WACAE,KAAAA,EACArF,MAAAA,SACA,mCACA7G,EAAAA,EAAAA,OAAAA,KAAAA,iBAAAA,4BACAA,EAAAA,EAAAA,OAAAA,KAAAA,kBAAAA,4BACAA,EAAAA,EAAAA,OAAAA,KAAAA,oBAAAA,4BAEA,yBACA,wBAEA,gCACAgM,KAAAA,KAAAA,oBAAAA,WACAE,KAAAA,KACArF,MAAAA,SACA,mCACA7G,EAAAA,EAAAA,OAAAA,KAAAA,iBAAAA,4BACAA,EAAAA,EAAAA,OAAAA,KAAAA,kBAAAA,4BACA,sBAEA,EAEAwN,gBAAAA,CAAAA,GACA,2BACA,UACA,8CAEA,gBAEA,mCACA,0DAEA,yEACA,mFAEA,kEACA,2EACA,EAEAC,iBAAAA,CAAAA,GACA,kCACA,cACA,kBACAC,EAAAA,SAAAA,CAAAA,EAAAA,KACA,YACAtN,EAAAA,KAAAA,gBAAAA,KAAAA,kBAAAA,EAAAA,MAAAA,IAAAA,MAAAA,GACA,2EACAL,EAAAA,MAAAA,WAAAA,KAAAA,WAAAA,EAAAA,GACAA,EAAAA,MAAAA,MAAAA,IAAAA,EAAAA,EAAAA,GACA,KAEA,mCACA,EAEA4N,iBAAAA,CAAAA,EAAAA,GACA,eACA,SACA,aACA,uCAGA,8DAGA,kGAFA,wGAJA,CACA,gBACAxK,EAAAA,CAAAA,KAAAA,gBAAAA,EAAAA,MAAAA,KAAAA,cAAAA,EAAAA,QACA,CAKA,6CACA,gBACAA,EAAAA,CAAAA,UAAAA,KAAAA,gBAAAA,EAAAA,MAAAA,KAAAA,cAAAA,EAAAA,QACA,MACAA,EAAAA,CAAAA,KAAAA,cAAAA,EAAAA,MAAAA,KAAAA,cAAAA,EAAAA,SAEA,sBACA,CACA,8CACA,EAGAyK,qBAAAA,GACA,sBACA5N,EAAAA,EAAAA,OAAAA,KAAAA,WAAAA,4BACA,0DACA,EAQA4F,cAAAA,GACA5F,EAAAA,EAAAA,OAAAA,KAAAA,eAAAA,4BACA,aACAA,EAAAA,EAAAA,IAAAA,KAAAA,OAAAA,YAAAA,+BAEA,EAEA6F,cAAAA,GAEA,OADAjC,QAAAA,MAAAA,4BACA,kCACA,4BACA,8BAIA,mCACA,4BACA,mCAcA,sBAEA,EAGAkC,eAAAA,GACA,6CACA,wCACA,uBACA9F,EAAAA,EAAAA,IAAAA,EAAAA,2BACA,CACA,EAcA+F,aAAAA,CAAAA,GACA,2CACA,iBACA,EAEAC,SAAAA,CAAAA,GACA,uCACA,aAEA,EAEAC,eAAAA,CAAAA,GACA,6CACA,cACA,EAEAC,QAAAA,CAAAA,GACA,wCACA,sBACA,qBACA,aACA,EAEAC,aAAAA,CAAAA,GACA,iDACA,iBACA,EAEAC,OAAAA,CAAAA,GACA,0CACA,mBACA,EAEAC,SAAAA,CAAAA,GACA,qDACA,aACA,EAEAC,OAAAA,CAAAA,GACA,+CACA,YACA,mBACA,EAGAC,YAAAA,GAEA,EAOAC,qBAAAA,GACA,EAEAC,UAAAA,CAAAA,EAAAA,EAAAA,GAEA,gBACA,4BACA,4BACAC,EAAAA,QAEA,qBAAAlB,KAAAA,IAAAmB,MAAAA,EAAAC,gBAAAA,EAAAC,MAAAA,UAAAC,OAAAA,UAAAC,OAAAA,YAeA,OAdAC,EAAAA,WAAAA,IAAAA,KACAA,EAAAA,SAAAA,GAEA,IACAA,EAAAA,UAAAA,qBACA,gDAGA,IACAA,EAAAA,SAAAA,GACA,+DAGAhH,EAAAA,EAAAA,IAAAA,EAAAA,QAAAA,iBACA,CACA,EAEAiH,iBAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GACA,oCAGA,GAFAjH,EAAAA,EAAAA,IAAAA,EAAAA,0CAEA,GACA,qCACAA,EAAAA,EAAAA,IAAAA,EAAAA,GACAkH,EAAAA,YAAAA,EACA,CAiBA,OATA,GACA,qDAEA,EAGAC,EAAAA,YAAAA,GAFA,+BAKA,CACA,EAGAC,WAAAA,CAAAA,EAAAA,GAEA,oCACApH,EAAAA,EAAAA,IAAAA,EAAAA,mBACAkD,EAAAA,YAAAA,GAEA,sCAQA,OAPAmE,EAAAA,UAAAA,EACArH,EAAAA,EAAAA,IAAAA,EAAAA,sEACAsH,EAAAA,YAAAA,GAEA,IACAD,EAAAA,YAAAA,GAEA,CACA,EAEAE,aAAAA,CAAAA,GACA,oCAGA,OAFAvH,EAAAA,EAAAA,IAAAA,EAAAA,6BACAmH,EAAAA,YAAAA,GACA,CACA,EAEAK,aAAAA,CAAAA,EAAAA,EAAAA,GAAAA,GAEA,sCACAxH,EAAAA,EAAAA,IAAAA,EAAAA,sBAEA,sCAcA,OATA,mCACAA,EAAAA,EAAAA,OAAAA,EAAAA,gCACA,MAGA,GACA,sBAEAyH,EAAAA,YAAAA,GACA,CACA,EAEAC,mBAAAA,CAAAA,EAAAA,EAAAA,GACA,oCAMA,GALA1H,EAAAA,EAAAA,IAAAA,EAAAA,2BACAmH,EAAAA,YAAAA,GAEAG,EAAAA,UAAAA,EAEA,GACA,qCACAtH,EAAAA,EAAAA,IAAAA,EAAAA,4BACA2H,EAAAA,UAAAA,KACAL,EAAAA,YAAAA,EACA,CAEA,qCAIA,OAHAtH,EAAAA,EAAAA,IAAAA,EAAAA,kDACAsH,EAAAA,YAAAA,GAEA,CACA,EAIAM,eAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GACA,4DACA,wCACA,4CACA,2CACA,MACA,0DACA,qEACA,CAEA,WACA,EAOAC,MAAAA,GACA,kDACA,eACAC,EAAAA,EAAAA,GAAAA,cAAAA,KAAAA,MAAAA,GAAAA,iBAEAA,EAAAA,EAAAA,GAAAA,UAAAA,KAAAA,MAAAA,GAAAA,eAEA,EAEAC,OAAAA,GACA,oCACA,EAMAC,gBAAAA,CAAAA,GACA,8CAKA,sDACA,iEACA,6BAIA,eAGA,yBACA,uBACA,6BAGA,4CACA,EAGAC,gBAAAA,CAAAA,GACA,oEAKA,oDACA,kEAIA,eACA,yBACA,uBACA,6BAGA,6CACA,EAKAC,cAAAA,CAAAA,GACA,eACA,uBACA,oBACA,EAIAC,aAAAA,CAAAA,GACA,eAEA,wBACA,qBACA,EAEAC,aAAAA,CAAAA,GACA,eACA,wBACA,sBACA,2BACA,EAaAE,oBAAAA,GAEA,sBACA,2CAEA,EAQAS,cAAAA,CAAAA,GAEA,cAEA3I,EAAAA,IAAAA,EAAAA,EACA,+DAEA,qBAEA,4BAMAA,EAAAA,MAAAA,GAAAA,WAAAA,MAAAA,GACA,qBACA4I,EAAAA,WAAAA,CACA,CAAAnI,MAAAA,YAAAE,MAAAA,SACA,CAAAF,MAAAA,WAAAE,MAAAA,QACA,CAAAF,MAAAA,WAAAE,MAAAA,UAEAiI,EAAAA,SAAAA,EAAAA,aACAA,EAAAA,QAAAA,GAKA5I,EAAAA,MAAAA,gBAAAA,mCAAAA,MAAAA,GACA,qBACA6I,EAAAA,WAAAA,CACA,CAAApI,MAAAA,SAAAE,MAAAA,iBACA,CAAAF,MAAAA,OAAAE,MAAAA,iBAEAkI,EAAAA,SAAAA,EAAAA,gBACAA,EAAAA,QAAAA,GAGA,sDACA,sDACA,4CAIA,UACAT,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,MAAAA,EAAAA,EAAAA,MAAAA,EAAAA,WACAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,MAAAA,EAAAA,EAAAA,MAAAA,KAAAA,iBAAAA,EAAAA,EAAAA,KAEAA,EAAAA,MAAAA,EAAAA,EAAAA,QAEA,gCACA,iCAEA,6CACA,EAEAU,cAAAA,CAAAA,EAAAA,EAAAA,GACA,OACAC,YAAAA,EAAAA,WACAC,eAAAA,EAAAA,YAGA,2BACA,gCACAZ,EAAAA,OACA,EAQAa,gBAAAA,CAAAA,GAEA,cAEA,UAEA,+BAGA,4BAEAC,EAAAA,MAAAA,EAAAA,EAAAA,OACA,EAGAC,iBAAAA,CAAAA,EAAAA,GACA,qBAoCA,OAnCAC,EAAAA,OAAAA,CACA,CACAzI,MAAAA,QACA9B,KAAAA,QACA7B,KAAAA,OACAqM,SAAAA,OACAC,YAAAA,aACA1J,IAAAA,gCACAnD,MAAAA,uBAEA,CACAkE,MAAAA,WACA9B,KAAAA,WACA7B,KAAAA,WACAuM,IAAAA,EACAD,YAAAA,gBACA1J,IAAAA,gCACAnD,MAAAA,qDAEA,CACAkE,MAAAA,uFACA9B,KAAAA,MACA7B,KAAAA,QACAqM,SAAAA,OACAzJ,IAAAA,wCACAnD,MAAAA,0CAEA,CACA,CAAAkE,MAAAA,SAAAf,IAAAA,iBAAA4J,MAAAA,EAAAA,EAAAA,MAAAA,EAAAA,UACA,CAAA7I,MAAAA,sBAAAf,IAAAA,8BAAA4J,MAAAA,EAAAA,EAAAA,MAAAA,KAAAA,gBAAAA,EAAAA,MAGAJ,EAAAA,QAAAA,GACAA,EAAAA,UAEA,CACA,EAEAK,aAAAA,CAAAA,EAAAA,EAAAA,GAEA,8BAEA,KAIA,GAFAC,EAAAA,KAAAA,QAAAA,YAAAA,GAEA,gBACA,6CACAC,EAAAA,UAAAA,wDAAAA,SAEAA,EAAAA,UAAAA,0CAAAA,IAGAvB,EAAAA,YACA,CACAA,EAAAA,QAEA,oCACA,gBAEAwB,OAAAA,SAAAA,KAAAA,mBAGApG,QAAAA,MAAAA,4CAEA,MAEA4E,EAAAA,OAEA,EAOAqF,OAAAA,GACA,uBACA,eACA,EAEAC,QAAAA,GACA,0BACA,wBACA,0BACA,yBACA,yBACA,oBACA,EAEAC,oBAAAA,GAEA,GAEAxN,OAAAA,GACA,eACA,GC/vCuQ,MCOnQ,IAAY,OACd,GACA,EACA,GACA,EACA,KACA,KACA,MAIF,GAAe,GAAiB,QClB5B,GAAS,WAAa,IAAIzG,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,iCAAiC,CAACN,EAAIkH,GAAG,GAAGlH,EAAIkH,GAAG,GAAG9G,EAAG,MAAM,CAACE,YAAY,gDAAgD2D,MAAO,gBAAkBhE,KAAKiE,eAAiB,KAAM3D,MAAM,CAAC,yBAAyB,iBAAiB,CAACP,EAAIkH,GAAG,KAAK9G,EAAG,MAAM,CAACE,YAAY,cAAcC,MAAM,CAAC,yBAAyB,cAAc,EACnb,GAAkB,CAAC,WAAa,IAAIP,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,kBAAkBC,MAAM,CAAC,yBAAyB,UAAU,CAACH,EAAG,MAAM,CAACE,YAAY,yCAAyCC,MAAM,CAAC,yBAAyB,cAAc,CAACH,EAAG,MAAM,CAACE,YAAY,sBAAsBC,MAAM,CAAC,yBAAyB,kBAAkB,CAACH,EAAG,MAAM,CAACE,YAAY,kBAAkBC,MAAM,CAAC,yBAAyB,qBAAqBH,EAAG,MAAM,CAACE,YAAY,kBAAkBC,MAAM,CAAC,yBAAyB,qBAAqBH,EAAG,MAAM,CAACE,YAAY,qCAAqCC,MAAM,CAAC,yBAAyB,oBAAoBH,EAAG,MAAM,CAACE,YAAY,eAAeC,MAAM,CAAC,yBAAyB,qBAAqB,EAAE,WAAa,IAAIP,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,+CAA+CC,MAAM,CAAC,yBAAyB,gBAAgB,CAACH,EAAG,MAAM,CAACE,YAAY,uDAAuDC,MAAM,CAAC,yBAAyB,oBAAoB,CAACH,EAAG,MAAM,CAACE,YAAY,0BAA0BC,MAAM,CAAC,yBAAyB,2BAA2B,EAAE,WAAa,IAAIP,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,wDAAwDC,MAAM,CAAC,yBAAyB,qBAAqB,CAACH,EAAG,MAAM,CAACE,YAAY,0BAA0BC,MAAM,CAAC,yBAAyB,0BAA0B,G,sQCDpgD,GAAS,WAAa,IAAIP,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,iCAAiC,EACnJ,GAAkB,GCatB,IACA6E,KAAAA,cACAC,OAAAA,GACAC,KAAAA,WACA,OACA,CACA,EACAE,WAAAA,CAAAA,EACAC,QAAAA,CAEA0O,gBAAAA,CAAAA,GAAAA,GACA,0BACA,6BAEA,EAGAC,qBAAAA,CAAAA,GAEA,GADA,wDACA,mBACA,iCACA,4BAQA,GAPA,SAIAC,EAAAA,MAAAA,UAAAA,GAFAA,EAAAA,MAAAA,UAAAA,GAKA,yBACA,8BACAC,EAAAA,SAAAA,IAIA7G,EAAAA,MAAAA,QAHA,SAGAA,EAFAA,CAGA,GAEA,CACA,CAEA,EAGA8G,0BAAAA,GACA,2DACA,eACA,wBACA,yBAGA,uBAFA,6BAIA,EAEAC,eAAAA,GACA,4BACA,UACA,2BAEA,+BACA,KACA,IACA,IAEA,eACA,cACA,WACA,GACA,6BACAC,KAEA1K,QAAAA,MAAAA,sCAAAA,EAEA,CAUA,gBACA,aACA,YACAA,QAAAA,KAAAA,8EACA0K,EAAAA,EAAAA,OAEA,2BACAC,EAAAA,KAAAA,IAAAA,EAAAA,EACA,CAEA,WACA,gBACA,aACA,KACAL,EAAAA,KAAAA,CACAM,EAAAA,EAAAA,KAAAA,EACAC,EAAAA,EAAAA,KAAAA,EACAnF,EAAAA,UAEA4E,EAAAA,KAAAA,CACAM,EAAAA,EAAAA,GAAAA,EACAC,EAAAA,EAAAA,GAAAA,EACAnF,EAAAA,UAGA,2BACA,IACAoF,KAAAA,IAAAA,EAAAA,EAAAA,GACAA,KAAAA,IAAAA,EAAAA,EAAAA,MAAAA,GAEA,8CACA,+BACA,oBACA,wBAEA,OACAP,EAAAA,GAAAA,KAAAA,iBAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAGA,OACAA,EAAAA,GAAAA,KAAAA,iBAAAA,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,IAGA,mDACA,CACA,EAIAQ,gBAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACA,UACArH,IAAAA,+BACAsH,MAAAA,KAAAA,iBAEAlM,EAAAA,MAAAA,KAAAA,KAAAA,MAAAA,GAAAA,KACAA,EAAAA,MAAAA,IAAAA,KAAAA,MAAAA,GAAAA,KAEA,UACA4E,IAAAA,mDACAsH,MAAAA,GAEA,kBACAtH,EAAAA,MAAAA,MAAAA,EAAAA,KACAA,EAAAA,MAAAA,OAAAA,EAAAA,KACAA,EAAAA,MAAAA,KAAAA,EAAAA,KAAAA,MAAAA,EAAAA,GAAAA,KACAA,EAAAA,MAAAA,MAAAA,EAAAA,KAAAA,MAAAA,EAAAA,GAAAA,KACAA,EAAAA,MAAAA,WAAAA,CACA,EAEAuH,sBAAAA,GACA,8BACA,0BAEA,4BACA,UAEA,YACA,4DACA3C,EAAAA,KAAAA,aAAAA,MAAAA,KAAAA,eAAAA,OAGA,qCACA,eACA,cACA,aACA,OACA,OACA,EACA,mCAEAtI,QAAAA,MAAAA,iDAAAA,EAEA,CAGA,6BACA,6EAEA,EAIAkL,gBAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAEA,eACA,KACA,WACA,KAEA,IACA,EAGA,EAJA,OAEA,IACA,IAEA,OACAC,EAAAA,EAAAA,EAAAA,KAIA,qBACAC,EAAAA,EAAAA,GACA,IACA3J,EAAAA,EAAAA,KAAAA,EAAAA,KACA4J,EAAAA,KAAAA,IAAAA,EAAAA,IAGA,iCACA,8BACA,wBACA,SACA,2BACA,kDACA,4CACAf,EAAAA,KAAAA,CAAAM,EAAAA,EAAAC,EAAAA,EAAAnF,EAAAA,QAAAjE,SAAAA,EAAAjI,KAAAA,EAAAA,KAAA8H,QAAAA,EAAAA,SACA,oCACA,oBACA,cACAgJ,EAAAA,KAAAA,CAAAM,EAAAA,EAAAC,EAAAA,EAAAnF,EAAAA,QAAAjE,SAAAA,EAAAjI,KAAAA,EAAAA,KAAA8H,QAAAA,EAAAA,UACAgK,EAAAA,CACA,CACA,4CACA,sBACAC,EAAAA,OAAAA,EACAC,EAAAA,KAAAA,EACA,CACA,MACAxL,QAAAA,KAAAA,qBAAAA,sBAAAA,EAAAA,OAEA,CAGA,+BACA,iCACA,8BACA,4BACA,wBAEA,GADAsK,EAAAA,KAAAA,CAAAM,EAAAA,EAAAC,EAAAA,EAAAnF,EAAAA,QAAAjE,SAAAA,EAAAjI,KAAAA,EAAAA,KAAA8H,QAAAA,EAAAA,UACA,6CACA,sBACAiK,EAAAA,OAAAA,EACAC,EAAAA,KAAAA,EACA,CACA,CAEA,2BAEA,4BACA,aACA,kCACA,gEACA,eACApP,EAAAA,EAAAA,IAAAA,EAAAA,qCACAsH,EAAAA,MAAAA,WAAAA,KAAAA,oBACA+H,EAAAA,MAAAA,WAAAA,KAAAA,oBAAAA,GACAA,EAAAA,MAAAA,YAAAA,KAAAA,qBACA,MACA,SACA/H,EAAAA,MAAAA,WAAAA,KAAAA,eAAAA,UACA+H,EAAAA,MAAAA,WAAAA,KAAAA,eAAAA,UAAAA,GACAA,EAAAA,MAAAA,YAAAA,KAAAA,eAAAA,WACA,gCAEA/H,EAAAA,MAAAA,WAAAA,KAAAA,eAAAA,aACA+H,EAAAA,MAAAA,WAAAA,KAAAA,eAAAA,aAAAA,GACAA,EAAAA,MAAAA,YAAAA,KAAAA,eAAAA,eAGA/H,EAAAA,MAAAA,WAAAA,KAAAA,eAAAA,MACA+H,EAAAA,MAAAA,WAAAA,KAAAA,eAAAA,MAAAA,GACAA,EAAAA,MAAAA,YAAAA,KAAAA,eAAAA,QAGA,+BAIA,CAKA,gCACA,uBACA,IAoBA,OAlBA,8BACA,GACAC,EAAAA,KAAAA,eAAAA,aACAC,EAAAA,KAAAA,gBACAC,EAAAA,GAEAD,EAAAA,GAAAA,KAAAA,iBAIA,GACAA,EAAAA,GAAAA,KAAAA,gBACA,yCACA,yFAEA,0CAGA,CACA,EAGAE,kBAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IACA,UACAnI,IAAAA,+BACAsH,MAAAA,KAAAA,iBACAlM,EAAAA,MAAAA,KAAAA,KAAAA,MAAAA,GAAAA,KACAA,EAAAA,MAAAA,IAAAA,KAAAA,MAAAA,GAAAA,KAGA,UACA4E,IAAAA,+BACAsH,MAAAA,GAEAS,EAAAA,MAAAA,MAAAA,EAAAA,KACAA,EAAAA,MAAAA,OAAAA,EAAAA,KACAA,EAAAA,MAAAA,KAAAA,EAAAA,KAAAA,MAAAA,EAAAA,GAAAA,KACAA,EAAAA,MAAAA,MAAAA,EAAAA,KAAAA,MAAAA,EAAAA,GAAAA,KAEA,UACA/H,IAAAA,mFAAAA,GACAsH,MAAAA,GASA,OAPAtH,EAAAA,MAAAA,MAAAA,EAAAA,KACAA,EAAAA,MAAAA,OAAAA,EAAAA,KACAA,EAAAA,MAAAA,KAAAA,EAAAA,KAAAA,MAAAA,EAAAA,GAAAA,KACAA,EAAAA,MAAAA,MAAAA,EAAAA,KAAAA,MAAAA,EAAAA,GAAAA,KAEA,wEAEA,OACA,EAEAoI,kBAAAA,CAAAA,EAAAA,GACA,kBACA,cACA,mCAEA,EAEAC,gBAAAA,CAAAA,EAAAA,GAEA,eACA,MAEA,EADA,OAEA,IACA,4BACAX,EAAAA,EAAAA,GAGA,IACA3J,EAAAA,EAAAA,KAAAA,EAAAA,MAMA,iCACA,8BACA,MACA,WACA,0BACAnF,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,IAAAA,GAAAA,KAAAA,MAAAA,KACAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,IAAAA,GAAAA,KAAAA,MAAAA,KACAC,EAAAA,KAAAA,YAAAA,EAAAA,EAAAA,EAAAA,QACA,6BACA,iDACA,2CACAD,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACAA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACAC,EAAAA,KAAAA,YAAAA,EAAAA,EAAAA,EAAAA,GACA+O,EAAAA,CACA,MACAhP,EAAAA,EAAAA,KAAAA,MAAAA,KAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GACAA,EAAAA,EAAAA,KAAAA,MAAAA,KAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GACAC,EAAAA,KAAAA,YAAAA,EAAAA,EAAAA,EAAAA,GACA+O,EAAAA,CAGA,MACAtL,QAAAA,KAAAA,qBAAAA,sBAAAA,EAAAA,OAEA,CAGA,+BACA,iCACA,8BACA,GACA4K,EAAAA,KAAAA,MAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACAC,EAAAA,KAAAA,MAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAEAtO,EAAAA,KAAAA,YAAAA,EAAAA,EAAAA,EAAAA,EACA,CAGA,EAEAyP,WAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GACA,MACA,oCAWA,OAVA,OACAC,EAAAA,GAAAA,CACA1P,KAAAA,EACAD,GAAAA,EACAiN,MAAAA,EACA9H,SAAAA,IAGAwK,EAAAA,GAAAA,QACAA,EAAAA,GAAAA,UAAAA,EAAAA,EACA,CACA,CACA,QACA,GAEAtP,OAAAA,GAAAA,GCxbmQ,MCO/P,IAAY,OACd,GACA,GACA,IACA,EACA,KACA,KACA,MAIF,GAAe,GAAiB,QClB5B,GAAS,WAAa,IAAIzG,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,iCAAiC,EACnJ,GAAkB,GCctB,IACA6E,KAAAA,UACAC,OAAAA,GACAC,KAAAA,WACA,OACA,CACA,EACAE,WAAAA,CAAAA,EACAC,QAAAA,CAOAwQ,sBAAAA,GACA,gFACA,eACA,yBACA,yBACA,yDAEA,4DAGA,kCAEA,EAEAC,yBAAAA,CAAAA,GAEA,gBAEA,uBACA,UACA,0CAIA,gBACA,4BAKA,+CAEA,mCACA,eACA,SACA,YACA,cAGA,gCACA,kBAGA,qCACA,uCACA,QAEA,uBACA,kDACA,kEAKA,mGACA,QACAlJ,EAAAA,KAAAA,SAAAA,GACAF,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,MAAAA,KAAAA,iBAAAA,IACA,kFAGA,CACA,MACA,8EAEA,EAEAqJ,4BAAAA,CAAAA,GAEA,gBAEA,uBACA,UACA,0CAEA,gBACA,2BACA,mCAEA,eACA,SACA,YACA,cAEA,qCACA,uCACA,QAEA,2BACA,oDAMA,GALA,kEAKA,MACA,gBACA,GACAxB,EAAAA,EAAAA,EAAAA,IACAC,EAAAA,EAAAA,EAAAA,KAEA,QACA9H,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,MAAAA,KAAAA,iBAAAA,IACA,0FACA,gHACA,CAKA,8FACA,QACAE,EAAAA,KAAAA,WAAAA,EAAAA,GACAF,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,MAAAA,KAAAA,iBAAAA,EAAAA,IACA,8FAGA,MAEA,8EAEA,EAEAsJ,sBAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAEA,aACA,yCACA,MACA,SAGA,OAFA1T,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACAA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACA,CACA,CACA,iEAGA,CACA,aACA,yCACA,MACA,SAGA,OAFAA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACAA,EAAAA,EAAAA,KAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,IACA,CACA,CACA,iEAEA,CACA,EAEA2T,mBAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KACA,QACA5I,IAAAA,+BACAsH,MAAAA,KAAAA,iBACAlM,EAAAA,MAAAA,KAAAA,KAAAA,MAAAA,GAAAA,KACAA,EAAAA,MAAAA,IAAAA,KAAAA,MAAAA,GAAAA,KAEA,QACA4E,IAAAA,kDAAAA,GACAsH,MAAAA,GAEA,4BAYA,OAXAtH,EAAAA,MAAAA,MAAAA,EAAAA,KACAA,EAAAA,MAAAA,OAAAA,EAAAA,KACAA,EAAAA,MAAAA,KAAAA,EAAAA,KAAAA,MAAAA,EAAAA,GAAAA,KACAA,EAAAA,MAAAA,MAAAA,EAAAA,KAAAA,MAAAA,EAAAA,GAAAA,KACAA,EAAAA,MAAAA,WAAAA,EACA,iEAEA,GACAlH,EAAAA,KAAAA,+BAAAA,EAAAA,GAAAA,MAAAA,GAGA,CACA,EAEA+P,kBAAAA,GAEA,GAEA5P,OAAAA,GAAAA,GClN+P,MCO3P,IAAY,OACd,GACA,GACA,IACA,EACA,KACA,KACA,MAIF,GAAe,GAAiB,QClB5B,GAAS,WAAa,IAAIzG,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,iCAAiC,EACnJ,GAAkB,G,UCatB,IACA6E,KAAAA,iBACAC,OAAAA,GACAC,KAAAA,WACA,OACA,CACA,EACAE,WAAAA,CAAAA,EACAC,QAAAA,CAGA8Q,gBAAAA,GACA,4BACA,6BAEA,aACA,wBACA,CACA,6BACA,EAEAC,WAAAA,GACA,4BACA,2BACA,wBACA,gBACA,kBAEA,6BACA,CAEA,6BACA,EAEAC,cAAAA,GACA,+BACA,2BACAxL,EAAAA,OAAAA,QACA,2BACA,aACA,2BACA,CACA,gCACA,EAEAyL,kBAAAA,GACA,mCACA,gBACA,uBACAzL,EAAAA,OAAAA,QAEA,6BACAA,EAAAA,KAAAA,aAAAA,OAAAA,GAAAA,GAEA,KACA,iCACA,kBACA,eACAH,EAAAA,EAAAA,SAAAA,CAAAA,GAEA,qBAGAf,QAAAA,KAAAA,qCAAAA,GAFAe,EAAAA,EAAAA,SAAAA,EAAAA,MAAAA,CAIA,CACA,+BACA,CACA,oCACA,EAEA6L,eAAAA,GACA,gCAQA,IAPA,kDAEA,qBACA,WAEA,KACA,oCACA,oBACA,WACAzD,EAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EAAAA,GAAAA,KAAAA,EACA,CAEA,4BACA0D,MAAAA,EACAC,OAAAA,EAEA,CACA,iCACA,EAEAC,cAAAA,GACA,gCAMA,IALA,iCACA,kBAEA,KACA,oCACA,oBACA,WACAvD,EAAAA,EAAAA,IAAAA,CACA,CAEAzI,EAAAA,SAAAA,SAAAA,GACA,yBACAiM,EAAAA,SAAAA,SAAAA,EAAAA,GACAxD,EAAAA,IAAAA,CACA,GACA,IAEA,4BACAzI,SAAAA,EACA+L,OAAAA,EAEA,CACA,iCACA,EAEAG,cAAAA,GACA,+BAOA,IANA,iDACA,oBACA,WAEA,KACA,oCACA,oBACA,WACA9D,EAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EAAAA,GAAAA,KAAAA,EACA,CAEA,2BACA0D,MAAAA,EACAC,OAAAA,EAEA,CACA,gCACA,EAEAI,cAAAA,GACA,+BAMA,IALA,iCACA,kBAEA,KACA,oCACA,oBACA,WACA1D,EAAAA,EAAAA,IAAAA,CACA,CAEAzI,EAAAA,SAAAA,SAAAA,GACA,wBACAiM,EAAAA,SAAAA,SAAAA,EAAAA,GACAxD,EAAAA,IAAAA,CACA,GACA,IAEA,2BACAzI,SAAAA,EACA+L,OAAAA,EAEA,CACA,gCACA,EAEAK,kBAAAA,GACA,+BAUA,IATA,+BACA,WAEA,UACA,mCACA,gBAEA,KACA,oCACA,oBACA,WACA,cAEAjE,EAAAA,EAAAA,IADA,EACAA,EAAAA,MAEAA,CAEA,CAEA,2BACA2D,MAAAA,EACA3D,MAAAA,EACAnI,SAAAA,EAEA,CACA,gCACA,EAEAqM,mBAAAA,GACA,gCAgBA,IAfA,+BACA,WAEA,UAKA,mCACA,gBAEA,oCAEA,KACA,oCACA,oBACA,WACA,cAEAlE,EAAAA,EAAAA,IADA,EACAA,EAAAA,MAEAA,CAEA,CAEA,4BACA2D,MAAAA,EACA3D,MAAAA,EACAnI,SAAAA,EAEA,CACA,iCACA,EAEAsM,qBAAAA,GACA,sCAMA,gDACA,oBACA,UAKAC,EAAAA,EAAAA,OAAAA,UAAAA,KAAAA,MACAC,EAAAA,EAAAA,MAAAA,UAIA,IAFA,SACA,oCACA,oBACA,WACAnE,EAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EAAAA,GAAAA,KAAAA,EACA,CAEA,kCACAA,OAAAA,EACAyD,MAAAA,EAEA,CAEA,uCACA,EAGAW,2BAAAA,CAAAA,GAEA,4CACA,QAEA,EAEAC,eAAAA,CAAAA,GAKA,8CACA,SACA5L,EAAAA,SAAAA,IACA,2BACA,eACA6L,EAAAA,EAAAA,KAAAA,EACA,IAQA,SACA,0CACAC,EAAAA,SAAAA,IACA,0DACA,2BACA,eACAC,EAAAA,EAAAA,KAAAA,EAEA,KAMA,QACAC,OAAAA,OAAAA,KAAAA,CAAAA,cAAAA,gBACAC,WAGA,eACA,0CAGA,2CAOA,QAIA,EAGAC,eAAAA,GACA,gCAkBA,IAZA,kCACA,cACA,gBAEA,oBACA,UAEA,4CACA,oBAEA,KACA,oCACA,oBACA,WACA3E,EAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EAAAA,GAAAA,KAAAA,EACA,CAEA,4BACAA,OAAAA,EACAyD,MAAAA,EAEA,CAEA,iCACA,EAEAmB,gBAAAA,GACA,gCAYA,IANA,gDACA,qBACA,UAEA,KACA,oCACA,oBACA,WACA5E,EAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EAAAA,GAAAA,KAAAA,EACA,CAEA,4BACAA,OAAAA,EACAyD,MAAAA,EAEA,CAEA,iCACA,EAEAoB,sBAAAA,GACA,sCAYA,IANA,gDACA,qBACA,UAEA,KACA,oCACA,oBACA,WACA7E,EAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EAAAA,GAAAA,KAAAA,EACA,CAEA,kCACAA,OAAAA,EACAyD,MAAAA,EAEA,CAEA,uCACA,EAEAqB,iBAAAA,GACA,kCACA,SACA,uBACA,IAEA,+BACA,+BACA,SACA,uBACAhI,EAAAA,GAAAA,CACAiI,UAAAA,GAEAC,EAAAA,KAAAA,IAAAA,EAAAA,EACA,CACAC,OAAAA,OAAAA,GAAAA,SAAAA,IACAC,EAAAA,UAAAA,EAAAA,UAAAA,CAAAA,GAEA,CACA,8BACA,CACA,mCACA,EAEAC,aAAAA,GACA,8BACA,cACA,KACA,kDACA,eACAZ,EAAAA,GAAAA,EAAAA,GAEA,0BACA,CACA,+BACA,EAEAa,mBAAAA,CAAAA,EAAAA,GACAxO,QAAAA,MAAAA,sBAAAA,EAAAA,QACA,gBACA,6BACA,GAIArD,OAAAA,GAAAA,GC7dsQ,MCOlQ,IAAY,OACd,GACA,GACA,IACA,EACA,KACA,KACA,MAIF,GAAe,GAAiB,QC6DhC,IACAtB,KAAAA,iBACAgC,MAAAA,CAAAA,YACA/B,OAAAA,CACAmT,EAAAA,EACAC,GAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAC,GACAC,GACAC,IAEAzU,KAAAA,WACA,OACAV,KAAAA,OACAoV,KAAAA,EACA3J,aAAAA,eACA4J,eAAAA,EACAC,WAAAA,EACAC,qBAAAA,EACAC,sBAAAA,EACAC,gBAAAA,EACAC,iBAAAA,EACAC,iBAAAA,GACAC,iBAAAA,OACAC,kBAAAA,GACAC,oBAAAA,UACAvW,eAAAA,IAEA,EACAqB,WAAAA,CAAAA,EACAC,QAAAA,CACAC,UAAAA,GACA,sCACA,yCACA,cACA,wBACA,sBACA,sBACA,wBAEA,wCACA,gBAKA,gBACAiP,EAAAA,KAAAA,aACAC,EAAAA,KAAAA,aACA+F,EAAAA,KAAAA,gBACAC,EAAAA,KAAAA,kBAEA,oBACA,yBACA,uBAKA,qBACA,kBACA,uBACA,gBACA,sBACA,mBACA,oBACA,kBACA,gBACA,wBACA,4BACA,iBAEA,gBAKA,SACAC,GAAAA,EAAAA,UACA,qBACAC,EAAAA,EAAAA,MAAAA,KAAAA,oBAGA,sEACA,iEAEA,yCACA,EAEArJ,SAAAA,GACA,wCACA,kDACA,gBACA,2BAEA,EAGAC,iBAAAA,CAAAA,GACA,qBACA,EAEAqJ,SAAAA,CAAAA,GACA,eACA5U,EAAAA,EAAAA,IAAAA,KAAAA,QAAAA,oBACAA,EAAAA,EAAAA,OAAAA,KAAAA,QAAAA,sCACA,2BACAqC,WAAAA,EAAAA,EAAAA,MAAAA,KAAAA,eAAAA,KAEA,EAEAwS,aAAAA,CAAAA,GACA,mCACA,EAEAhK,SAAAA,CAAAA,GACA,eACA,EAEAD,eAAAA,CAAAA,GACA,yBACA,EAEAR,iBAAAA,CAAAA,GACA,qBACA,EAEA0K,UAAAA,CAAAA,GACA,eACA,+BACA,EAEAxY,gBAAAA,CAAAA,GACA,4BACA,EAEAyY,cAAAA,GACA,2CACA,EAEA/J,YAAAA,CAAAA,GACA,sDAEA,iBACA,aACA,4CAEA,EAEAgK,KAAAA,CAAAA,GACA,wCACA,EACAhV,EAAAA,EAAAA,IAAAA,KAAAA,UAAAA,gBAEAA,EAAAA,EAAAA,OAAAA,KAAAA,UAAAA,eAEA,EAEAnB,wBAAAA,GACA,cACA,kCACAgV,KAAAA,KAAAA,KACAoB,YAAAA,KAAAA,YACAC,aAAAA,KAAAA,aACAf,gBAAAA,KAAAA,iBAGA,EAEArJ,mBAAAA,CAAAA,EAAAA,GACA,yDACA,YACA,sBAGA,mBACA,qBAGA,oBACA,uBAGA,wBACA,uBACA,cAEA,EAMAqK,eAAAA,GACA,6CACA,+BACA,+FACA,EAEAC,oBAAAA,GACA,kBACA,yCAEA,sBACA,uBACA,EAEAC,QAAAA,CAAAA,EAAAA,GACA,4BACA,wBACA,sDACA,0BACA,2BACA,cACA,gBACA,cAEAxO,EAAAA,KAAAA,SAAAA,EACA,CACA,CACA,kCACA,EAEAyO,gBAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACA,wCACAC,KAAAA,IAAAA,KAAAA,aAAAA,IACAA,KAAAA,SAAAA,GACAA,KAAAA,eAAAA,GACAA,KAAAA,OAAAA,QACAxX,MAAAA,UAAAA,GAEA,uBACA,EAGAyX,wBAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACA,wCACAD,KAAAA,IAAAA,KAAAA,qBAAAA,IACAA,KAAAA,SAAAA,GACAA,KAAAA,eAAAA,GACAA,KAAAA,OAAAA,QACAxX,MAAAA,UAAAA,GAEA,uBACA,EAQA0X,UAAAA,GACA,yCACA,+EACA,EAEAC,uBAAAA,CAAAA,EAAAA,GACA,wDACA,yBACA,wBACA,kCACA,EAEAC,uBAAAA,CAAAA,EAAAA,GACA,wDACA,yBACA,0BACA,EAMAC,cAAAA,CAAAA,GACA,gDACA,EAEAC,YAAAA,GACA,6CAIA,eACA1M,YAAAA,YACAmG,UAAAA,OACAE,UAAAA,EACAsG,eAAAA,EACAC,SAAAA,KACA3M,eAAAA,UAGA,sCACA,GACA,gBACA,yCAEA,cACA,qCAEA,cACA,sCAGA,6DAGA,iCACA,EAEA4M,WAAAA,GACA,oBACA,EAEAC,WAAAA,CAAAA,GAIA,gBACA,yCAEA,cACA,qCAEA,cACA,qCAEA,wBACA,6CAGA,yBACA,+CAGA,8CAEA,kCACA,eACA,EAEAC,aAAAA,CAAAA,GACA,gBACA,EACA,gBACA,4CAGA,cACA,mCAEA,cACA,mCAEA,eACA,mCAGA,mBACA,uCAGA,eACA,EAGAC,cAAAA,CAAAA,GAEA,iBACA,sFAEAhN,EADA,oBACAA,WAEAA,aAIA,uBACAnJ,EAAAA,EAAAA,OAAAA,GAAAA,EAAAA,OAAAA,KAAAA,kBAGAA,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA,OAAAA,GACA,wBAGA,+BAIA,EAEAoW,oBAAAA,GACA,0DACA,kCACA,oDACA,wCACA,8CACA,IAEA,EAGAC,YAAAA,GACA,4BACA,yDAOA,EAKAC,gBAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GACA,mDACA,kBACA,yBACA,0BACA,gBACA,EAEAC,gBAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GACA,mDACA,kBACA,6BACA,0BACA,gBACA,EAEAlO,gBAAAA,GACA,iDACA,6BACA,eACA,wBACA,gCAEA,EAEAmO,iBAAAA,CAAAA,GAKA,GAJA,gCACAxW,EAAAA,EAAAA,OAAAA,KAAAA,yBAAAA,oCACA,+BAEA,2CACA,4BACAA,EAAAA,EAAAA,IAAAA,EAAAA,6BACA,+BACA,CAEA,wCACA,yBACAA,EAAAA,EAAAA,IAAAA,EAAAA,6BACA,+BACA,CACA,EAMAyW,eAAAA,GACA,+CACA,EAEAC,WAAAA,GACA,8DACA,wBAEA,IACA,qBACA,UACA,gEACA,wBACA,CACA,EAEAC,SAAAA,GACA,6BACA,EAEAC,cAAAA,GACA,oEAEA,iCAKA,mBAMA,qCACA,iCAEA,oDACA,oDAEA,qDACA,oDAGA,6EAEA,kCAGA,aADA,oBACA,0BACA,oCAEA,WACA,SAKA,GAJA,IACAC,EAAAA,EAAAA,YAGA,oCAIA,0BACA7W,EAAAA,EAAAA,IAAAA,EAAAA,qBACA,qDAEA,mCACA,qBAEA,4CAEA,kBACA,kFAGA,oCAEA,yBACA,0BACA,CACA,CAMA,6FACA,sBAEA,sBAGA,2CACA,2CAEA,EAEA8W,oBAAAA,CAAAA,EAAAA,EAAAA,GACA,4DAKA,kDACAC,EAAAA,KAAAA,wBAAAA,GACA,wDACA,YACA,cACA,mCACA,CACA,EAEAC,oBAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GACA,qDAEA,kDAEA,aACA,SAKA,GAJA,sBACAvL,EAAAA,KAAAA,eAAAA,gBAGA,oBAEA,0CACAwL,EAAAA,EAAAA,WACA,0CAEA,6BAEA,8BACA,0CAEA,cAEA,oCACA,0CAEA,MAEA,sCACA,eACA,0CAEA,CACA,EAEAC,uBAAAA,CAAAA,GACA,sDACA,qCACA,qBACA,kBAEA,CACA,QACA,EAEAC,4BAAAA,CAAAA,EAAAA,EAAAA,GACA,kBACA,+FAGA,IACA,WACA,4BACA,aACA,2BACA,SACAlN,EAAAA,KAAAA,EAEA,CACA,iDACA,mCACA,UACA,mEACA,CAEA,EAEAmN,yBAAAA,CAAAA,EAAAA,EAAAA,GACA,0DAEA,8CACAP,EACA,8BACAQ,EAAAA,GAEA,8BACA,EAEAC,yBAAAA,CAAAA,EAAAA,EAAAA,GACA,0DAEA,4CACAT,EACA,8BACAQ,EAAAA,GAEA,8BACA,EAEAE,oBAAAA,CAAAA,EAAAA,EAAAA,GAGA,GAFA,6CAEA,iBACA,6BACA,iBACA,IACApK,EAAAA,GAGAqK,EAAAA,YAAAA,GACA,+BACAA,EAAAA,UAAAA,EACAA,EAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EACA,MACA,4BACA,iBACA,IACArK,EAAAA,GAGAqK,EAAAA,YAAAA,GACA,+BACAA,EAAAA,UAAAA,EACAA,EAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EACA,CACA,EAEAC,uBAAAA,CAAAA,EAAAA,EAAAA,GAGA,GAFA,gDAEA,iBACA,iCACA,gBACA,IACAzL,EAAAA,GAEAwL,EAAAA,YAAAA,GACA,+BACAA,EAAAA,UAAAA,EACAA,EAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EACA,MACA,gCACA,gBACA,IACAxL,EAAAA,GAEAwL,EAAAA,YAAAA,GACA,+BACAA,EAAAA,UAAAA,EACAA,EAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EACA,CACA,EAIAE,gBAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GACA,8BACA,WACA,SACA,eACA,oBACA,IAIA,+DACA,CACA,EAQAC,sBAAAA,GACA,uDAKA,IAHA,yBACA,UAEA,oBACA,WACA,YAEA,2BACA,8BACA,SACA,SAEA,kBACA,gBACA,SACA,kBACA,cACAzJ,EAAAA,KAAAA,CAAAM,EAAAA,EAAAC,EAAAA,EAAAnF,EAAAA,UAEA,0DAEAkF,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EACAP,EAAAA,KAAAA,CAAAM,EAAAA,EAAAC,EAAAA,EAAAnF,EAAAA,UAEA,0CACA,oDACA,CACA,MACA1F,QAAAA,KACA,2BACA,sBACAoL,EAAAA,OAGA,CACA,EAEA4I,mBAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GACA,QACAtQ,IAAAA,+BACAsH,MAAAA,KAAAA,iBACAlM,EAAAA,MAAAA,KAAAA,KAAAA,MAAAA,GAAAA,KACAA,EAAAA,MAAAA,IAAAA,KAAAA,MAAAA,GAAAA,KAEA,QACA4E,IAAAA,mDACAsH,MAAAA,GACA,uCAMA,OALAtH,EAAAA,MAAAA,MAAAA,EAAAA,KACAA,EAAAA,MAAAA,OAAAA,EAAAA,KACAA,EAAAA,MAAAA,KAAAA,EAAAA,KAAAA,MAAAA,EAAAA,GAAAA,KACAA,EAAAA,MAAAA,MAAAA,EAAAA,KAAAA,MAAAA,EAAAA,GAAAA,KACAA,EAAAA,MAAAA,gBAAAA,EACA,CACA,EAGAuQ,gBAAAA,GACA,4BAEA,uCACA,qBACA,EAQA9R,aAAAA,CAAAA,GACA,2CACA,kBACA+R,EAAAA,UAAAA,KACA,EAEAC,aAAAA,GAIA,OAHA,0BACA,iCAEA,eACA,EAEAC,qBAAAA,CAAAA,GACA,0BACA,EAEA/R,eAAAA,CAAAA,GACA,6CACA,cACA,EAEAgS,gBAAAA,CAAAA,GACA,8CACA,oBACA,EAEA/R,QAAAA,CAAAA,GACA,mBACA,aACA,gCACA,sCACA,EAEAG,SAAAA,CAAAA,GACA,qDACA,cACA,+CACA,mBACA,uBACA,mBACA,EAEAF,aAAAA,CAAAA,GACA,gDACA,iBACA,EAEAC,OAAAA,CAAAA,GACA,0CACA,mBACA,EAEAsE,eAAAA,CAAAA,EAAAA,GACA,wDACA,oBACA,sBACA,gBAEA,kBACA1K,EAAAA,EAAAA,OAAAA,KAAAA,QAAAA,KAAAA,aAGA,mBACAA,EAAAA,EAAAA,IAAAA,KAAAA,QAAAA,KAAAA,YACA,EAEA+K,OAAAA,CAAAA,GACA,WACA,EAEAzE,OAAAA,CAAAA,EAAAA,GACA,mEACA,cACA,YACA,cACA,wBAEA,iBACA,GACA,eAEA,EAEA4R,UAAAA,GAEA,EAMAC,UAAAA,CAAAA,GAGA,GAFA,wBAEA,8CAIA,eACA,4CAOA,kCAEA,MAGA,0BACA,kBACA,yBACA,qBACA,kDACA,sIAOA,MACA,mBACA,MACA,oBACA,MACA,mBACA,MACA,iBACA,eAGA,0BACA,mBACA,mBAEA,gBAGA,0BACA,oBACA,kBA1CA,CALA,CAkDA,EAEAC,OAAAA,GACA,gBACA,EAEAC,OAAAA,CAAAA,GACA,kCACA,QACA,yCACA,6BAGA,qBACA,EAMAC,gBAAAA,GACA,wEACA,EAEAC,WAAAA,CAAAA,GACA,wCAEA,qBACA,0BACA,EAEAC,OAAAA,GACA,cACA,EAEAC,WAAAA,CAAAA,GACA,0CACA,GAEAlY,OAAAA,GAAAA,GC1kCsQ,MCSlQ,IAAY,OACd,GACA,GACA,IACA,EACA,KACA,KACA,MAIF,GAAe,GAAiB,Q,wBCdjB,MAAMmY,WAA2BC,GAAAA,EAE/C1d,WAAAA,GACC2d,QACA7e,KAAK8e,OAAS,IAAIpd,EAAAA,EAAO,sBACzB1B,KAAK8e,OAAOnd,IAAI,EAAE,cAAe,OAClC,CAEAkP,eAAAA,CAAiBkO,GAChB/e,KAAKgf,aAAeD,CACrB,CAEA9S,SAAAA,CAAU8R,GACT/d,KAAK8e,OAAOnd,IAAI,EAAE,YAAa,SAC/B3B,KAAKif,QAAUlB,CAChB,CAEAhD,UAAAA,CAAWmE,GACVlf,KAAK8e,OAAOnd,IAAI,EAAE,aAAc,SAChC3B,KAAKyB,QAAUyd,CAChB,CAEAhT,eAAAA,CAAgBuD,GACfzP,KAAK8e,OAAOnd,IAAI,EAAE,kBAAmB,SACrC3B,KAAKmf,QAAU1P,CAChB,CAEAtD,QAAAA,CAASzE,EAAG0X,GAEXpf,KAAK8e,OAAOnd,IAAI,EAAE,WAAY,WAAayd,GAC3Cpf,KAAKsB,MAAQoG,EACb1H,KAAKqf,eAAiBrf,KAAKsf,qBAAqB5X,GAChD1H,KAAKqf,eAAiBT,GAAAA,EAAKW,4BAA4Bvf,KAAKqf,gBAC5Drf,KAAKwf,SAAW5E,EAAAA,EAAK6E,MAAM/X,GAC3B1H,KAAKF,OAAOsf,GAAU,KAClBpf,KAAKyB,QACPzB,KAAKyB,QAAQ0K,SAASzE,GAEtBmC,QAAQ6V,MAAM,4BACf,IAIG1f,KAAKif,UACRjf,KAAKif,QAAQU,SAASjY,EAAEkY,OACxB5f,KAAKif,QAAQ9S,SAASnM,KAAKsB,QAG5BtB,KAAK8e,OAAOnd,IAAI,EAAE,WAAY,WAAayd,EAC5C,CAEA7S,OAAAA,CAAQ7H,GACP1E,KAAK8e,OAAOnd,IAAI,EAAE,UAAW,WAAa+C,GAC1C1E,KAAKyB,QAAQ8K,QAAQ7H,GACrB1E,KAAKif,QAAQ1S,QAAQ7H,EACtB,CAEAmb,aAAAA,CAAcC,GACb9f,KAAK8e,OAAOnd,IAAI,EAAE,gBAAiB,WAAame,EACjD,CAEAC,aAAAA,GACC,OAAG/f,KAAKif,QACAjf,KAAKif,QAAQc,gBAEd,CACR,CAMAjgB,MAAAA,CAAOsf,EAAUY,GAEhB,GADAhgB,KAAK8e,OAAOnd,IAAI,EAAE,SAAU,sBAAwByd,GACjDpf,KAAKif,QAAQ,CAIf,MAAMI,EAAiBY,GAAAA,EAASX,qBAAqBtf,KAAKsB,OAC1D4e,uBAAsB,KACrBlgB,KAAKif,QAAQnf,OAAOuf,GACjBD,GACFpf,KAAKif,QAAQkB,aAAaf,GAEvBY,GACHA,GACD,GAEF,CACD,CAEAI,iBAAAA,CAAkBhB,GACbpf,KAAKqgB,eACRrgB,KAAKif,QAAQnf,OAAOE,KAAKqgB,cACtBjB,GACFpf,KAAKif,QAAQkB,aAAaf,IAG5Bpf,KAAKqgB,aAAe,IACrB,CAEAC,aAAAA,CAAclB,GACb,GAAIA,GAAYpf,KAAKsB,MAAMoK,QAAQ0T,GAAU,CAO5C,IAAI9B,EAAStd,KAAKsB,MAAMoK,QAAQ0T,GAChC,IAAImB,EAASC,EAAAA,EAAIC,SACbhM,EAAK8L,EAAO9F,EAAI6C,EAAO7C,EACvB/F,EAAK6L,EAAO7F,EAAI4C,EAAO5C,EAC3B,IAAIZ,EAAQnF,KAAK+L,MAAuB,GAAhB/L,KAAK/E,IAAI6E,EAAEC,IAAW,GAAK,GACnD1U,KAAKif,QAAQ0B,QAAQ7G,EAEtB,CACD,CAMA7L,gBAAAA,CAAiBlM,GAChB/B,KAAK8e,OAAOnd,IAAI,EAAE,mBAAoB,WAAYI,GAClD,IAAI6e,EAAS5gB,KAAKqf,eAAe7H,QAAQzV,GACtC6e,EACC5gB,KAAKyB,SACPzB,KAAKyB,QAAQwM,iBAAiB2S,GAG/B/W,QAAQgX,KAAK,wCAAyC9e,EAExD,CAGAmM,gBAAAA,CAAiBnM,GAChB/B,KAAK8e,OAAOnd,IAAI,EAAE,mBAAoB,WAAYI,GAClD,IAAIub,EAAStd,KAAKsB,MAAMoK,QAAQ3J,GAC7B/B,KAAKyB,SACPzB,KAAKyB,QAAQyM,iBAAiBoP,EAEhC,CAEAhP,gBAAAA,GACCtO,KAAK8e,OAAOnd,IAAI,EAAE,mBAAoB,UACnC3B,KAAKyB,SACPzB,KAAKyB,QAAQ6M,kBAEf,CAEAH,cAAAA,CAAepM,GACd/B,KAAK8e,OAAOnd,IAAI,EAAE,iBAAkB,WAAaI,GACjD,IAAIoS,EAAOnU,KAAKsB,MAAMwf,MAAM/e,GACzB/B,KAAKyB,SACPzB,KAAKyB,QAAQ0M,eAAegG,EAE9B,CAEA/F,aAAAA,CAAc2S,GACb/gB,KAAK8e,OAAOnd,IAAI,EAAE,gBAAiB,YAChC3B,KAAKyB,SAIPzB,KAAKyB,QAAQ2M,cAAc2S,EAE7B,CAEAC,eAAAA,CAAgBjf,GAEf,GADA/B,KAAK8e,OAAOnd,IAAI,EAAE,kBAAmB,WAAaI,GAC/C/B,KAAKsB,MAAM2f,QAAUjhB,KAAKsB,MAAM2f,OAAOlf,IACtC/B,KAAKyB,QAAQ,CACf,IAAIyf,EAAQlhB,KAAKsB,MAAM2f,OAAOlf,GAC9B/B,KAAKyB,QAAQ4M,cAAc6S,EAC5B,CAEF,CAEAC,QAAAA,GACInhB,KAAKif,SACPjf,KAAKif,QAAQkC,WAEXnhB,KAAKyB,SACPzB,KAAKyB,QAAQqS,SAEf,CAGAsN,WAAAA,CAAYlf,GACRlC,KAAKif,SACPjf,KAAKif,QAAQmC,YAAYlf,EAE3B,CAEA2Y,SAAAA,CAAU3Y,GACNlC,KAAKif,SACPjf,KAAKif,QAAQpE,UAAU3Y,EAEzB,ECnKD,QACAgD,KAAAA,SACAC,OAAAA,CAAAA,EAAAA,GACAC,KAAAA,WACA,OACA3E,iBAAAA,GACAI,SAAAA,KAEA,EACAyE,WAAAA,CACA,kBACA,iBACA,mBACA,mBAEAgC,SAAAA,CACA3G,GAAAA,GACA,kDACA,EACA+D,IAAAA,GACA,gBACA,SAEA,SACA,GAEAa,QAAAA,CACAzE,gBAAAA,CAAAA,GACA,eACA,EACAF,eAAAA,CAAAA,GACA,gDACA,YACA,EACAJ,YAAAA,CAAAA,GAIA,2BACA,4CACAyU,EAAAA,iBAEA,EACAoM,IAAAA,CAAAA,GACA,aACA,iBAEA,uBAEA,EACAC,QAAAA,CAAAA,GACA,4BACA,wCACA5S,QAAAA,IAAAA,CACA,gBACA,qBACA,0BACA,UAEA,oBACA,yBACA,6BAEA,aACA,gCAEA,wBACA,qBACA,gCACA,GAEA,EAEA6S,eAAAA,CAAAA,GACA,4BACA,+CACA7S,QAAAA,IAAAA,CACA,gBACA,iBACA,mBACA,wBACA,0BACA,UAEA,oBACA,qBACA,uBACA,2BACA,6BAEA,aACA,gCAEA,wBACA,qBACA,kDACA,GAGA,EAEA8S,qBAAAA,CAAAA,GACA,WACA,eACAtQ,EAAAA,EAAAA,IAAAA,EAEA,aACA,QACA,EAEAuQ,OAAAA,GACA,4BACA,uCACA/S,QAAAA,IAAAA,CACA,gBACA,iBACA,mBACA,wBACA,wBACA,uBACA,UAEA,oBACA,qBACA,uBACA,2BACA,6BACA,2BAEA,EACAgT,QAAAA,CAAAA,GACA,uBACA,gBAEA,6BACA,EAEAC,UAAAA,CAAAA,GACA,yBACA,kBAEA,+BACA,EAEAC,eAAAA,CAAAA,GACA,6BACA,sBAEA,2CACA,EAEAC,OAAAA,CAAAA,GACA,sBACA,eAEA,4BACA,EACAC,YAAAA,CAAAA,GACA,2BACA,oBAEA,gCACA,EACAC,eAAAA,CAAAA,GACA,+BACA,wBAEA,mCACA,EAEAC,QAAAA,CAAAA,EAAAA,GACA,eACA,EAEAC,WAAAA,CAAAA,EAAAA,EAAAA,GACA,yCAEA,0BACA,qBACA,UACA,oBAKA,UACA9C,EAAAA,SAAAA,GAKA,gBACA+C,EAAAA,SAAAA,GACAA,EAAAA,QAAAA,GAKA1gB,EAAAA,gBAAAA,GACAA,EAAAA,WAAAA,GACAA,EAAAA,gBAAAA,GACA,WACAA,EAAAA,WAAAA,GACAD,EAAAA,WAAAA,GACAE,EAAAA,WAAAA,IAGAA,EAAAA,cAAAA,GACAA,EAAAA,kBAAAA,EAAAA,EAAAA,qBACAA,EAAAA,UAAAA,GACAA,EAAAA,QAAAA,KAAAA,MACAA,EAAAA,gBAAAA,GACAA,EAAAA,WAAAA,KAAAA,SACAA,EAAAA,gBAAAA,GACAA,EAAAA,QAAAA,GAGAF,EAAAA,cAAAA,GACAA,EAAAA,kBAAAA,EAAAA,EAAAA,qBACAA,EAAAA,WAAAA,GACAA,EAAAA,iBAAAA,GACAA,EAAAA,gBAAAA,GACAA,EAAAA,gBAAAA,GAEAA,EAAAA,QAAAA,KAAAA,MAGA,8DACA,8DAEA,0DACA,gEAEA,gFACA,gFACA,8EAEA,0EACA,wEACA,0EACA,qFACA,6FACA,sEAEA,yEACA,wEACA,4EACA,0DACA,kEAMAC,EAAAA,gBAAAA,GAKAA,EAAAA,SAAAA,EAAAA,KAAAA,OAAAA,OAAAA,KAKAD,EAAAA,YAEA,qCACA,oCACA,0CACA0O,OAAAA,eAAAA,KAAA,8BAEA,EAMAkS,mBAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACA,oDAEA,0BACA,qBAEA,SACA,wBAKA,UACAhD,EAAAA,SAAAA,GAKA,gBACA+C,EAAAA,SAAAA,GACAA,EAAAA,QAAAA,GAKA1gB,EAAAA,gBAAAA,GACAA,EAAAA,WAAAA,GACAA,EAAAA,gBAAAA,GAGAC,EAAAA,cAAAA,GACAA,EAAAA,UAAAA,GACAA,EAAAA,QAAAA,KAAAA,MACAA,EAAAA,gBAAAA,GACAA,EAAAA,gBAAAA,GACAA,EAAAA,UAAAA,GACAA,EAAAA,cAAAA,GACAA,EAAAA,QAAAA,GACAA,EAAAA,kBAAAA,EAAAA,EAAAA,qBACAA,EAAAA,UAAAA,KAAAA,UAEAF,EAAAA,cAAAA,GACAA,EAAAA,WAAAA,GACAA,EAAAA,iBAAAA,GACAA,EAAAA,gBAAAA,GACAA,EAAAA,kBAAAA,EAAAA,EAAAA,qBACAA,EAAAA,QAAAA,KAAAA,MACAA,EAAAA,UAAAA,GACAA,EAAAA,cAAAA,GACAA,EAAAA,QAAAA,GAGA,gEAEA,WACA,wBACA,qBACA,2BACA6gB,EAAAA,EACA,KACA,CACA,CAIA5gB,EAAAA,SAAAA,EAAAA,EACA,EACA6gB,gBAAAA,GACA,4CACA,UAEA,QAEA,GAGAC,aAAAA,GACA,qBACA,6BACA,2BAEA,EACA,gBACA,8BACA,cAGArc,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,OAAAA,oBACA,4CACA,mDAEA,gCACA,aAEA,0CACAqC,YAAAA,IAAAA,KAAAA,WAAAA,IACA,GC/Z8P,MCS1P,IAAY,OACd,GACAxI,EACAkB,GACA,EACA,KACA,KACA,MAIF,GAAe,GAAiB,O,sECpBhC,IAAIlB,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,2BAA2BC,MAAM,CAAC,GAAK,eAAe,CAACH,EAAG,cAAc,CAACO,IAAI,YAAY,EAAE,EAC7MM,EAAkB,G,iCCDlB,EAAS,WAAa,IAAIjB,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,iCAAiC,CAACF,EAAG,MAAM,CAACE,YAAY,kBAAkBC,MAAM,CAAC,yBAAyB,UAAU,CAACH,EAAG,MAAM,CAACE,YAAY,0CAA0CC,MAAM,CAAC,yBAAyB,cAAc,CAACP,EAAIkH,GAAG,GAAG9G,EAAG,MAAM,CAACE,YAAY,eAAeC,MAAM,CAAC,yBAAyB,gBAAgBC,GAAG,CAAC,MAAQR,EAAIwiB,uBAAuBxiB,EAAIkH,GAAG,GAAGlH,EAAIkH,GAAG,GAAG9G,EAAG,MAAM,CAACE,YAAY,cAAcC,MAAM,CAAC,yBAAyB,cAAc,EAClkB,EAAkB,CAAC,WAAa,IAAIP,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,uBAAuBC,MAAM,CAAC,yBAAyB,kBAAkB,CAACH,EAAG,MAAM,CAACE,YAAY,kBAAkBC,MAAM,CAAC,yBAAyB,qBAAqBH,EAAG,MAAM,CAACE,YAAY,kBAAkBC,MAAM,CAAC,yBAAyB,sBAAsB,EAAE,WAAa,IAAIP,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,+CAA+CC,MAAM,CAAC,yBAAyB,gBAAgB,CAACH,EAAG,MAAM,CAACE,YAAY,uDAAuDC,MAAM,CAAC,yBAAyB,oBAAoB,CAACH,EAAG,MAAM,CAACE,YAAY,0BAA0BC,MAAM,CAAC,yBAAyB,2BAA2B,EAAE,WAAa,IAAIP,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,gDAAgDC,MAAM,CAAC,yBAAyB,iBAAiB,CAACH,EAAG,MAAM,CAACE,YAAY,wDAAwDC,MAAM,CAAC,yBAAyB,qBAAqB,CAACH,EAAG,MAAM,CAACE,YAAY,0BAA0BC,MAAM,CAAC,yBAAyB,4BAA4B,G,mVC4E1vC,GACA4E,KAAAA,cACAC,OAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EACA8T,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACA7T,KAAAA,WACA,OACAV,KAAAA,OACAoV,KAAAA,GACA0I,aAAAA,EACArS,aAAAA,eACA4J,eAAAA,EACAC,WAAAA,EACAC,qBAAAA,EACAC,sBAAAA,EACAC,gBAAAA,EAEA,EACA7U,WAAAA,CAAAA,EACAC,QAAAA,CAEAC,UAAAA,GACA,mCACA,wCACA,qBAEA,gBACA,kBAEA,cACA,wBAIA,gBACAiP,EAAAA,KAAAA,aACAC,EAAAA,KAAAA,aACA+F,EAAAA,KAAAA,gBACAC,EAAAA,KAAAA,kBAEA,yBACA,uBAEA,gBAMA,qBACA,kBACA,gBACA,sBACA,mBACA,oBACA,wBACA,mBAKA,+EACA,qEACA,gEAEA,yCACA,EAEA+H,cAAAA,GAEA,EAEA5R,eAAAA,CAAAA,GACA,mBACA,EAEAR,iBAAAA,CAAAA,GACA,qBACA,EAEAS,SAAAA,CAAAA,GACA,eACA,EAGAkK,cAAAA,GACA,2CACA,EAEA0H,gBAAAA,GACA,uCACA,qBACA,EAEAC,eAAAA,GACA,uCACA,qBACA,EAEAC,aAAAA,GACA,oCACA,EAEAzE,UAAAA,GAEA,EAEA0E,iBAAAA,GAAAA,EAEA5H,KAAAA,CAAAA,GACA,yCACA,EACAhV,EAAAA,EAAAA,IAAAA,KAAAA,UAAAA,gBAEAA,EAAAA,EAAAA,OAAAA,KAAAA,UAAAA,eAEA,EAEAnB,wBAAAA,GACA,EAEAiM,mBAAAA,CAAAA,EAAAA,GACA,wDACA,EAEA+R,OAAAA,CAAAA,GACA,2CACA,WACA,EAKApG,eAAAA,GACA,+CACA,EAEA6F,eAAAA,GACA,EAOAQ,WAAAA,GAGA,wFACA,oDACA,4DAEAza,YAAAA,WACArC,EAAAA,EAAAA,OAAAA,EAAAA,cACA,QAGA,oFACA,iDACA,2DAEAqC,YAAAA,WACArC,EAAAA,EAAAA,OAAAA,EAAAA,cACA,QAIA,oGACA,kEACA,gEAEAqC,YAAAA,WACArC,EAAAA,EAAAA,OAAAA,EAAAA,cACA,QAEA,oGACA,iEACA,+DAEAqC,YAAAA,WACArC,EAAAA,EAAAA,OAAAA,EAAAA,cACA,QAGA,iGACA,wDACA,6DAEAqC,YAAAA,WACArC,EAAAA,EAAAA,OAAAA,EAAAA,cACA,OAEA,EAMAtB,YAAAA,CAAAA,GACA,6CACA,iBAAAqe,MAAAA,EAAA3f,KAAAA,WACA,EAEA,qBACA,wDACA,uBACAwG,QAAAA,MAAAA,qCAGA,oFACA,wBACA,EAGA,uBACA,0EACA,sBACA,EAEA,4BACA,SACA,4BACAoZ,EAAAA,QAAAA,EAAAA,QACAA,EAAAA,OAAAA,EAAAA,OACAA,EAAAA,UAAAA,IAAAA,MAAAA,UACAA,EAAAA,QAAAA,EACA,0EACA,0BACA,sBACA,MACA,0EACA,sBACA,CACA,GACA,0BAEA,EAOAC,WAAAA,CAAAA,GAIA,sBACA,EAGAC,cAAAA,GACA,4CAEA,+BACA,cAOAld,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,OAAAA,8BACA,oCACAzD,EAAAA,EAAAA,IAAAA,EAAAA,EACAA,EAAAA,EAAAA,IAAAA,EAAAA,EACA,4CACA,kCACA,wDACAA,EAAAA,EAAAA,IAAAA,EAAAA,EACAA,EAAAA,EAAAA,IAAAA,EAAAA,EACA,4EAEAA,EAAAA,EAAAA,IAAAA,EAAAA,EACAA,EAAAA,EAAAA,IAAAA,EAAAA,EACA,4EAGAA,EAAAA,EAAAA,IAAAA,EAAAA,EACAA,EAAAA,EAAAA,IAAAA,EAAAA,EACA,0EAEA,EAGA4gB,qBAAAA,CAAAA,EAAAA,EAAAA,GAEA,sCACAnd,EAAAA,EAAAA,IAAAA,EAAAA,wBAEA,sCAKA,GAJAA,EAAAA,EAAAA,IAAAA,EAAAA,2BACAwI,EAAAA,YAAAA,GAEAjM,EAAAA,KAAAA,cAAAA,EAAAA,QAAAA,KAAAA,OACA,OACA,YACAA,EAAAA,EAAAA,EAAAA,EAAAA,EACAA,EAAAA,EAAAA,EAAAA,EAAAA,CACA,CACA6gB,EAAAA,MAAAA,MAAAA,KAAAA,MAAAA,EAAAA,GAAAA,KACAA,EAAAA,MAAAA,OAAAA,KAAAA,MAAAA,EAAAA,GAAAA,KAEA,uBAAA3e,KAAAA,QAAA4e,SAAAA,IACAvE,EAAAA,mBAAAA,SACAA,EAAAA,eAAAA,EACAA,EAAAA,QAAAA,KAAAA,MAEA,uBAAAwE,YAAAA,IACAC,EAAAA,QAAAA,GAIA,gBACAjU,EAAAA,iBAAAA,EACAA,EAAAA,MAAAA,EAAAA,KAAAA,iBAEAA,EAAAA,IAAAA,EAAAA,GAAAA,QAAAA,EAAAA,EAAAA,MAAAA,KAAAA,gBAAAA,EAAAA,KACAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,IACA,cACAA,EAAAA,OACA,KAMAjO,EAAAA,KAAAA,aACA,mCACAyd,EAAAA,eAAAA,GACAzW,YAAAA,WACAkb,EAAAA,KAAAA,EAAAA,SACAzE,EAAAA,SAAAA,EACA,QAMA,cACA,gCACA,iCAIA,EAIA0E,eAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GACA,sCACAxd,EAAAA,EAAAA,IAAAA,EAAAA,wBAEA,sCACAA,EAAAA,EAAAA,IAAAA,EAAAA,0BACA,GACAA,EAAAA,EAAAA,IAAAA,EAAAA,GAEAwI,EAAAA,YAAAA,GAEA,sCAIA,GAHAxI,EAAAA,EAAAA,IAAAA,EAAAA,2BAEAzD,EAAAA,KAAAA,cAAAA,EAAAA,QAAAA,KAAAA,OACA,OACA,YACAA,EAAAA,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,GACAA,EAAAA,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,EACA,CAEA6gB,EAAAA,MAAAA,MAAAA,KAAAA,KAAAA,EAAAA,GAAAA,KACAA,EAAAA,MAAAA,OAAAA,KAAAA,KAAAA,EAAAA,GAAAA,KAEAK,EAAAA,MAAAA,MAAAA,KAAAA,KAAAA,EAAAA,GAAAA,KACAA,EAAAA,MAAAA,OAAAA,KAAAA,KAAAA,EAAAA,GAAAA,KACAzd,EAAAA,EAAAA,IAAAA,EAAAA,wBACAyd,EAAAA,YAAAA,GAEA,uBAAAH,YAAAA,IACAC,EAAAA,QAAAA,GAEA,uBAAA9e,KAAAA,QAAA4e,SAAAA,IACAvE,EAAAA,mBAAAA,SACAA,EAAAA,eAAAA,EAEAA,EAAAA,QAAAA,KAAAA,MAIA,2BACA,qBACA,sCACA9Y,EAAAA,EAAAA,IAAAA,EAAAA,0BACAwI,EAAAA,YAAAA,GAEA,sCACAkV,EAAAA,EAAAA,UAAAA,KAAAA,MAAAA,GAAAA,GAAAA,MAAAA,IACAC,EAAAA,IAAAA,CAAAA,IAEA3d,EAAAA,EAAAA,IAAAA,EAAAA,mBACA4d,EAAAA,YAAAA,EACA,CAaA,gBACAtU,EAAAA,iBAAAA,EACAA,EAAAA,MAAAA,EAAAA,KAAAA,iBAEAA,EAAAA,GAAAA,QAAAA,EAAAA,EAAAA,MAAAA,KAAAA,gBAAAA,EAAAA,IACAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,IACA,cACAA,EAAAA,OACA,KAMAjO,EAAAA,KAAAA,aAEA,mCACAuI,QAAAA,MAAAA,GACAkV,EAAAA,eAAAA,GACAzW,YAAAA,KACAkb,EAAAA,KAAAA,EAAAA,SACAzE,EAAAA,SAAAA,GACA9Y,EAAAA,EAAAA,OAAAA,EAAAA,uBAAAA,GACA,KAMA,cACA,gCACA,iCAGA,EAEA6d,mBAAAA,GACA,wBACA,4BAEA,wBACA,wCACA,6BAAA/hB,GAAAA,GACA,CACA,4BACA,gDADA,CAGA,EAQA2Z,UAAAA,GACA,yCACA,UACAnb,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,aAAAA,GAAAA,KAAAA,kBAAAA,KAEA,EAEAwjB,uBAAAA,CAAAA,GACA,iEACA,yGACA,EAEApI,uBAAAA,CAAAA,EAAAA,GACA,uDACA,EAEAC,uBAAAA,CAAAA,EAAAA,GACA,wDACA,yBACA,0BACA,EAEAW,gBAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GACA,kBACA,mDACA,gBAgBA,EAEAyH,sBAAAA,GACA,uDACA,SACA,iCACA,4BACA,MACA,gCACA,MACA,+BACA,IACA5P,EAAAA,KAAAA,GACAnO,EAAAA,EAAAA,IAAAA,EAAAA,iCAEA,CACA,CACA,CACAqC,YAAAA,WACA,2BACArC,EAAAA,EAAAA,OAAAA,EAAAA,GAAAA,gCAEA,OACA,EAGAuW,gBAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GACA,oDACA,kBACA,8BAEA,iBAEA,uBACA,EAEAlO,gBAAAA,GACA,iDAEA,EAMA2V,gBAAAA,GAAAA,EAGAC,eAAAA,CAAAA,EAAAA,GAEA,qBAEA5b,YAAAA,WACArC,EAAAA,EAAAA,OAAAA,EAAAA,mCACA,OACA,EAQA0W,WAAAA,GACA,+DACA,uBAGA,EAEAC,SAAAA,GACA,8BACA,EAOAkB,gBAAAA,GACA,qBACA,EAQA9R,aAAAA,CAAAA,GACA,2CACA,kBACA+R,EAAAA,UAAAA,KACA,EAEAC,aAAAA,GAIA,OAHA,0BACA,iCAEA,eACA,EAEAC,qBAAAA,CAAAA,GACA,0BACA,EAGA/R,eAAAA,CAAAA,GACA,6CACA,cACA,EAEAgS,gBAAAA,CAAAA,GACA,8CACA,oBACA,EAEA/R,QAAAA,CAAAA,GACA,uCAEA,aACA,oBACA,0BACA,wBACA,oBACA,yBAGA,EAGAE,OAAAA,CAAAA,GACA,0CACA,mBACA,EAGA2E,OAAAA,CAAAA,GACA,WACA,EAEAzE,OAAAA,CAAAA,EAAAA,GACA,oEACA,eACA,aACA,cACA,wBAEA,iBACA,GACA,eAEA,EAGA8R,OAAAA,GACA,iBACA,EASAD,UAAAA,CAAAA,GAIA,GAFA,wBAEA,8CAIA,eACA,4CAOA,kCAEA,MACA,0BACA,kBACA,yBACA,kDACA,oIACA,uBAMA,eACA,0BACA,mBACA,mBAEA,gBAEA,0BACA,oBACA,kBA5BA,CALA,CAqCA,EAEAE,OAAAA,CAAAA,GACA,kCACA,QACA,yCACA,6BAGA,qBACA,EAQAxC,YAAAA,GACA,6CAIA,eACA1M,YAAAA,YACAmG,UAAAA,OACAE,UAAAA,EACAsG,eAAAA,EACAC,SAAAA,KACA3M,eAAAA,UAIA,sCACA,GACA,cAGA,cACA,qCAEA,cACA,sCAGA,6DAIA,iCACA,EAEA4M,WAAAA,GACA,oBACA,EAEAC,WAAAA,CAAAA,GAKA,gBACA,yCAEA,YAGA,cACA,qCAEA,wBACA,6CAGA,yBACA,+CAGA,8CAEA,kCACA,eACA,EAGAC,aAAAA,CAAAA,GAEA,8EAEA,cACA,mCAEA,gBACA,uBACAlW,EAAAA,EAAAA,OAAAA,EAAAA,EAAAA,OAAAA,KAAAA,kBAEAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,OAAAA,EAAAA,aACA,qCAGA,mBACA,uCAGA,eAEA,EAiBAke,iBAAAA,CAAAA,GAKA,+CACAvD,EAAAA,KAAAA,MAAAA,QAAAA,EAAAA,YAGA,WACA,uBACA,iBACA,SAGA,6BACA,MACA,2BACA,iBACA,QAEA,CACA,EAOAwD,iBAAAA,CAAAA,EAAAA,GACA,2BACA,4CACA,WAGA,EAEA7F,gBAAAA,GACA,uEACA,EAEAC,WAAAA,CAAAA,GACA,wCACA,qBACA,0BACA,EAGAC,OAAAA,GACA,cACA,GAEAjY,OAAAA,GAEA,GC58BmQ,I,UCQ/PC,GAAY,OACd,EACA,EACA,GACA,EACA,KACA,KACA,MAIF,EAAeA,EAAiB,Q,sBCZjB,MAAM4d,UAAwBzF,EAAAA,EAE5C1d,WAAAA,GACC2d,QACA7e,KAAK8e,OAAS,IAAIpd,EAAAA,EAAO,kBACzB1B,KAAK8e,OAAOnd,IAAI,EAAE,cAAe,OAClC,CAMAsK,SAAAA,CAAW8R,GACV/d,KAAK8e,OAAOnd,IAAI,EAAE,YAAa,SAC/B3B,KAAKif,QAAUlB,CAChB,CAEAhD,UAAAA,CAAYmE,GACXlf,KAAK8e,OAAOnd,IAAI,EAAE,aAAc,SAChC3B,KAAKyB,QAAUyd,CAChB,CAEArO,eAAAA,CAAiBkO,GAChB/e,KAAKgf,aAAeD,CACrB,CAEA7S,eAAAA,CAAiBuD,GAChBzP,KAAK8e,OAAOnd,IAAI,EAAE,kBAAmB,SACrC3B,KAAKmf,QAAU1P,CAChB,CAEAtD,QAAAA,CAAUzE,EAAG0X,GACZpf,KAAK8e,OAAOnd,IAAI,EAAE,WAAY,WAAayd,GAC3Cpf,KAAKsB,MAAQoG,EAGb,IAAI0L,EAAQpT,KAAKskB,WAAW5c,EAAEgE,SAC1B0H,EAAQ,GACRpT,KAAKif,UACPjf,KAAKif,QAAQnF,KAAO,IACpB9Z,KAAKif,QAAQuD,aAAe,GAI9BxiB,KAAKqf,eAAiBrf,KAAKsf,qBAAqB5X,GAChD1H,KAAKwf,SAAW5E,EAAAA,EAAK6E,MAAM/X,GAC3B1H,KAAKF,OAAOsf,GAETpf,KAAKyB,SACPzB,KAAKyB,QAAQ0K,SAASzE,GAGnB1H,KAAKif,SACRjf,KAAKif,QAAQU,SAASjY,EAAEkY,OAGzB5f,KAAK8e,OAAOnd,IAAI,EAAE,WAAY,WAAayd,EAC5C,CAGA7S,OAAAA,CAAS7H,GACR1E,KAAK8e,OAAOnd,IAAI,EAAE,UAAW,WAAa+C,GACtC1E,KAAKyB,SACRzB,KAAKyB,QAAQ8K,QAAQ7H,GAEtB1E,KAAKif,QAAQ1S,QAAQ7H,EACtB,CAEAmb,aAAAA,CAAeC,GACd9f,KAAK8e,OAAOnd,IAAI,EAAE,gBAAiB,WAAame,EACjD,CAGAC,aAAAA,GACC,OAAG/f,KAAKif,QACAjf,KAAKif,QAAQc,gBAEd,CACR,CAMAjgB,MAAAA,CAAQsf,GAGP,GAFApf,KAAK8e,OAAOnd,IAAI,EAAE,SAAU,sBAAwByd,GAEjDpf,KAAKif,QAAQ,CACf,IAAII,EAAiBY,EAAAA,EAASX,qBAAqBtf,KAAKsB,OACxD4e,uBAAsB,KACrBlgB,KAAKif,QAAQ9S,SAASkT,GACtBrf,KAAKif,QAAQnf,OAAOuf,GACjBD,GACFpf,KAAKif,QAAQkB,aAAaf,EAC3B,GAEF,CACD,CAEAgB,iBAAAA,CAAmBhB,GACfpf,KAAKqgB,eACPrgB,KAAKif,QAAQnf,OAAOE,KAAKqgB,cACtBjB,GACFpf,KAAKif,QAAQkB,aAAaf,IAG5Bpf,KAAKqgB,aAAe,IACrB,CAEAC,aAAAA,CAAelB,GACd,GAAGA,GAAYpf,KAAKsB,MAAMoK,QAAQ0T,GAAU,CAO3C,IAAI9B,EAAStd,KAAKsB,MAAMoK,QAAQ0T,GAChC,IAAImB,EAASC,EAAAA,EAAIC,SACbhM,EAAK8L,EAAO9F,EAAI6C,EAAO7C,EACvB/F,EAAK6L,EAAO7F,EAAI4C,EAAO5C,EAC3B,IAAIZ,EAAQnF,KAAK+L,MAAuB,GAAhB/L,KAAK/E,IAAI6E,EAAEC,IAAW,GAAK,GACnD1U,KAAKif,QAAQ0B,QAAQ7G,EAEtB,CACD,CAMA7L,gBAAAA,CAAkBlM,GACjB/B,KAAK8e,OAAOnd,IAAI,EAAE,mBAAoB,WAAYI,GAClD,IAAI6e,EAAS5gB,KAAKqf,eAAe7H,QAAQzV,GACtC6e,EACC5gB,KAAKyB,SACPzB,KAAKyB,QAAQwM,iBAAiB2S,GAG/B/W,QAAQgX,KAAK,wCAAyC9e,EAExD,CAGAmM,gBAAAA,CAAkBnM,GACjB/B,KAAK8e,OAAOnd,IAAI,EAAE,mBAAoB,WAAYI,GAClD,IAAIub,EAAStd,KAAKsB,MAAMoK,QAAQ3J,GAC7B/B,KAAKyB,SACPzB,KAAKyB,QAAQyM,iBAAiBoP,EAEhC,CAEAhP,gBAAAA,GACCtO,KAAK8e,OAAOnd,IAAI,EAAE,mBAAoB,UACnC3B,KAAKyB,SACPzB,KAAKyB,QAAQ6M,kBAEf,CAEAH,cAAAA,CAAgBpM,GACf/B,KAAK8e,OAAOnd,IAAI,EAAE,iBAAkB,WAAaI,GACjD,IAAIoS,EAAOnU,KAAKsB,MAAMwf,MAAM/e,GACzB/B,KAAKyB,SACPzB,KAAKyB,QAAQ0M,eAAegG,EAE9B,CAEA/F,aAAAA,CAAe2S,GACd/gB,KAAK8e,OAAOnd,IAAI,EAAE,gBAAiB,YAChC3B,KAAKyB,SAIPzB,KAAKyB,QAAQ2M,cAAc2S,EAE7B,CAEAC,eAAAA,CAAiBjf,GAEhB,GADA/B,KAAK8e,OAAOnd,IAAI,EAAE,kBAAmB,WAAaI,GAC/C/B,KAAKsB,MAAM2f,QAAUjhB,KAAKsB,MAAM2f,OAAOlf,IACtC/B,KAAKyB,QAAQ,CACf,IAAIyf,EAAQlhB,KAAKsB,MAAM2f,OAAOlf,GAC9B/B,KAAKyB,QAAQ4M,cAAc6S,EAC5B,CAEF,CAEAC,QAAAA,GACInhB,KAAKif,SACPjf,KAAKif,QAAQkC,WAGXnhB,KAAKyB,SACPzB,KAAKyB,QAAQqS,SAEf,CAGAsN,WAAAA,CAAalf,GACTlC,KAAKif,SACPjf,KAAKif,QAAQmC,YAAYlf,EAE3B,CAEA2Y,SAAAA,CAAW3Y,GACPlC,KAAKif,SACPjf,KAAKif,QAAQpE,UAAU3Y,EAEzB,E,qCCxLD,GACAgD,KAAAA,SACAC,OAAAA,CAAAA,EAAAA,GACAC,KAAAA,WACA,OACA,CACA,EACAE,WAAAA,CACA,eAEAgC,SAAAA,CACA3G,GAAAA,GACA,kDACA,EACA+D,IAAAA,GACA,gBACA,SAEA,SACA,GAEAa,QAAAA,CACA+b,QAAAA,GACA,0BACA,wCACA5S,QAAAA,IAAAA,CACA,qCACA,UACA,yBAEA,EACAuT,WAAAA,CAAAA,GACA,yCACA,wBACA,QACA,oBAKA,cACA9C,EAAAA,SAAAA,GAKA,cACA+C,EAAAA,SAAAA,GACAA,EAAAA,QAAAA,KAAAA,OAAAA,MAAAA,GAKA1gB,EAAAA,gBAAAA,GACAA,EAAAA,gBAAAA,GACA,UACAA,EAAAA,WAAAA,GAGAD,EAAAA,cAAAA,GACAA,EAAAA,kBAAAA,EAAAA,EAAAA,qBACAA,EAAAA,iBAAAA,GACAA,EAAAA,gBAAAA,GACAA,EAAAA,gBAAAA,GACAA,EAAAA,QAAAA,KAAAA,MACAA,EAAAA,QAAAA,KAAAA,OAAAA,MAAAA,GAEA,WACA,wBACA,mBACA,2BACA6gB,EAAAA,EACA,KACA,CACA,CAIA5gB,EAAAA,SAAAA,EAAAA,EAEA,GAEA,gBACA,8BACAyE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,OAAAA,oBACA,mDACA,4CACA,gBACA,mCACA,GCxH6P,ICUzP,IAAY,OACd,EACAnG,EACAkB,GACA,EACA,KACA,KACA,MAIF,GAAe,GAAiB,O","sources":["webpack://quant-ux/./src/views/apps/Design.vue?3fc0","webpack://quant-ux/./src/canvas/controller/CollabSession.js","webpack://quant-ux/./src/canvas/analytic/AnalyticToolbar.vue?ce96","webpack://quant-ux/./src/dash/Histogram.vue?e249","webpack://quant-ux/src/dash/Histogram.vue","webpack://quant-ux/./src/dash/Histogram.vue?aad7","webpack://quant-ux/./src/dash/Histogram.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticHomeMenu.vue?6ef5","webpack://quant-ux/src/canvas/analytic/AnalyticHomeMenu.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticHomeMenu.vue?7f5d","webpack://quant-ux/./src/canvas/analytic/AnalyticHomeMenu.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticViewModeButton.vue?2d79","webpack://quant-ux/src/canvas/analytic/AnalyticViewModeButton.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticViewModeButton.vue?b366","webpack://quant-ux/./src/canvas/analytic/AnalyticViewModeButton.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticToolbarRender.vue?3a9a","webpack://quant-ux/src/canvas/analytic/AnalyticToolbarRender.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticToolbarRender.vue?9cc1","webpack://quant-ux/./src/canvas/analytic/AnalyticToolbarRender.vue","webpack://quant-ux/src/canvas/analytic/AnalyticToolbar.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticToolbar.vue?901b","webpack://quant-ux/./src/canvas/analytic/AnalyticToolbar.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticCanvas.vue?e02e","webpack://quant-ux/./src/canvas/analytic/UserJourney.vue?63d3","webpack://quant-ux/src/canvas/analytic/UserJourney.vue","webpack://quant-ux/./src/canvas/analytic/UserJourney.vue?09c9","webpack://quant-ux/./src/canvas/analytic/UserJourney.vue","webpack://quant-ux/./src/canvas/analytic/DropOff.vue?1ff3","webpack://quant-ux/src/canvas/analytic/DropOff.vue","webpack://quant-ux/./src/canvas/analytic/DropOff.vue?74fe","webpack://quant-ux/./src/canvas/analytic/DropOff.vue","webpack://quant-ux/./src/canvas/analytic/DataProcessing.vue?71f2","webpack://quant-ux/src/canvas/analytic/DataProcessing.vue","webpack://quant-ux/./src/canvas/analytic/DataProcessing.vue?10bf","webpack://quant-ux/./src/canvas/analytic/DataProcessing.vue","webpack://quant-ux/src/canvas/analytic/AnalyticCanvas.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticCanvas.vue?b470","webpack://quant-ux/./src/canvas/analytic/AnalyticCanvas.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticController.js","webpack://quant-ux/src/views/apps/Design.vue","webpack://quant-ux/./src/views/apps/Design.vue?cb86","webpack://quant-ux/./src/views/apps/Design.vue","webpack://quant-ux/./src/views/apps/Share.vue?1fb4","webpack://quant-ux/./src/canvas/share/ShareCanvas.vue?5923","webpack://quant-ux/src/canvas/share/ShareCanvas.vue","webpack://quant-ux/./src/canvas/share/ShareCanvas.vue?c467","webpack://quant-ux/./src/canvas/share/ShareCanvas.vue","webpack://quant-ux/./src/canvas/share/ShareController.js","webpack://quant-ux/src/views/apps/Share.vue","webpack://quant-ux/./src/views/apps/Share.vue?1f61","webpack://quant-ux/./src/views/apps/Share.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcCanvasPage\",attrs:{\"id\":\"CanvasNode\"},on:{\"wheel\":_vm.onMouseWheel}},[(_vm.selectedViewMode === 'Design')?[_c('DesignToolbar',{ref:\"toolbar\",attrs:{\"pub\":_vm.pub},on:{\"viewModeChange\":_vm.onVieModeChange}}),_c('DesignCanvas',{ref:\"canvas\",attrs:{\"viewport\":_vm.viewport},on:{\"viewport\":_vm.onViewPortChange}})]:_vm._e(),(_vm.selectedViewMode === 'Heatmap')?[_c('AnalyticToolbar',{ref:\"toolbar\",on:{\"viewModeChange\":_vm.onVieModeChange}}),_c('AnalyticCanvas',{ref:\"canvas\",attrs:{\"viewport\":_vm.viewport},on:{\"viewport\":_vm.onViewPortChange}})]:_vm._e()],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import Logger from '../../core/Logger'\nimport Services from '../../services/Services'\n\nexport default class CollabSession {\n\n  constructor (user) {\n    this.user = user\n    this.collabUsers = []\n  }\n\n  initWebsocket(model, canvas, controller, toolbar) {\n    Logger.log(3, \"CollabSession.initWebsocket()\", \"enter\");\n    try {\n      let user = this.user\n      let websocket = Services.getWebSocketService(model.id, user.token, user)\n      if (websocket) {\n        websocket.onMessage(msg => this.dispatchWebSocketMessage(canvas, controller, toolbar, user, msg))\n        websocket.init(success => {\n          if (success) {\n            this.sendHello()\n          }\n          canvas.setMouseListener(pos => {\n            this.sendMouse(pos)\n          })\n          controller.setModelChangeListener(changeEvent => {\n            this.sendChange(changeEvent)\n          })\n\n          // FIXME: all also the command stack??\n        })\n\n        this.websocket = websocket\n      } else {\n        Logger.log(1, \"CollabSession.initWebsocket()\", \"exit > No session created\");\n      }\n    } catch (err) {\n      Logger.error('CollabSession.initWebsocket()', \"Cannot init WebSocket\", err)\n    }\n  }\n\n  hasOtherUsers () {\n    let others = this.collabUsers.find(u => u.id !== this.user.id)\n    return others !== undefined\n  }\n\n\n  sendChange (changeEvent) {\n    Logger.log(1, \"CollabSession.sendChange()\", \"enter\", changeEvent);\n    /**\n     * We do not want to overload our websocket server,\n     * so we just send events if there is another user.\n     */\n    if (this.websocket && this.hasOtherUsers()) {\n      Logger.log(2, \"CollabSession.sendChange()\", \"send\", changeEvent);\n      this.websocket.send({type: 'change', changeEvent: changeEvent})\n    } else {\n      Logger.log(2, \"CollabSession.sendChange()\", \"NOT SEND\");\n    }\n  }\n\n  sendMouse (pos) {\n    /**\n     * We do not want to overload our websocket server,\n     * so we just send events if there is another user.\n     */\n    if (this.websocket && this.hasOtherUsers()) {\n      //Logger.log(-5, \"CollabSession.sendMouse()\", \"enter\");\n      this.websocket.send({type: 'mouse', pos: pos})\n    }\n  }\n\n  sendBye () {\n    Logger.log(-1, \"CollabSession.sendBye()\", \"enter\");\n    if (this.websocket) {\n      this.websocket.send({type: 'bye'})\n    }\n  }\n\n  sendHello () {\n    Logger.log(2, \"CollabSession.sendHello()\", \"enter\");\n    if (this.websocket) {\n      this.websocket.send({type: 'hello'})\n    }\n  }\n\n  sendImHere () {\n    Logger.log(2, \"CollabSession.sendImHere()\", \"enter\");\n    if (this.websocket) {\n      this.websocket.send({type: 'imhere'})\n    }\n  }\n\n  dispatchWebSocketMessage (canvas, controller, toolbar, user, msg) {\n\n    if (msg.type === 'hello') {\n        Logger.log(2, \"CollabSession.dispatchWebSocketMessage()\", \"hello\");\n        toolbar.addCollabUser(msg.user)\n        canvas.addCollabUser(msg.user)\n        this.addCollabUser(msg.user)\n        this.sendImHere()\n    }\n    if (msg.type === 'imhere') {\n      Logger.log(2, \"CollabSession.dispatchWebSocketMessage()\", \"imhere\");\n      toolbar.addCollabUser(msg.user)\n      canvas.addCollabUser(msg.user)\n      this.addCollabUser(msg.user)\n    }\n    if (msg.type === 'bye') {\n      Logger.log(2, \"CollabSession.dispatchWebSocketMessage()\", \"bye\");\n      toolbar.removeCollabUser(msg.user)\n      canvas.removeCollabUser(msg.user)\n      this.removeCollabUser(msg.user)\n    }\n    if (msg.type === 'mouse') {\n      //Logger.log(2, \"CollabSession.dispatchWebSocketMessage()\", \"mouse\");\n      canvas.setCollabMouse(msg.user, msg.pos)\n    }\n\n    if (msg.type === 'change') {\n      Logger.log(2, \"CollabSession.dispatchWebSocketMessage()\", \"change\");\n      controller.collabRecieveChanges(msg.user, msg.changeEvent)\n    }\n  }\n\n\n  addCollabUser (user) {\n    Logger.log(1, \"CollabSession.addCollabUser()\", user);\n    const found = this.collabUsers.find(u => u.id === user.id)\n    if (!found) {\n      this.collabUsers.push(user)\n    }\n  }\n\n  removeCollabUser (user) {\n    Logger.log(1, \"CollabSession.removeCollabUser()\", user);\n    this.collabUsers = this.collabUsers.filter(u => u.id !== user.id)\n  }\n\n  close () {\n    Logger.log(1, \"CollabSession.dispatchWebSocketMessage()\", \"close\");\n    if (this.websocket) {\n      this.websocket.close()\n    }\n  }\n}","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcToolbar MatcAnalyticsToolbar MatcLayerListVisible\"},[_c('div',{staticClass:\"MatcToolbarLayerList MatcToolbarAnalyticList MatcToobarPropertiesSection\",style:('width:'+ _vm.layerListWidth +'px')},[_c('div',{staticClass:\"MatcToolbarLayerListCntr\",attrs:{\"data-dojo-attach-point\":\"testListCntr\"}}),_c('div',{ref:\"dndHanlde\",staticClass:\"MatcToolbarLayerListDND\",on:{\"mousedown\":function($event){$event.stopPropagation();return _vm.onResizeStart.apply(null, arguments)}}})]),_c('div',{staticClass:\"MatcToolbarTop \"},[_c('div',{staticClass:\"MatcToolbarTopHome\",style:('width:'+ _vm.layerListWidth +'px')},[_c('HomeMenu',{attrs:{\"name\":_vm.modelName},on:{\"select\":_vm.onHomeMenu}})],1),_c('div',{staticClass:\"MatcToolbarTopCntr\",style:('width:calc(100% - '+ _vm.layerListWidth +'px)')},[_c('div',{staticClass:\"MatcToolbarSection MatcToolbarTopLeft\"},[_c('div',{class:['MatcToolbarItem MatcToolbarPrimaryItem', {'MatcToolbarItemSelected': _vm.mode === 'addComment'} ],attrs:{\"data-dojo-attach-point\":\"commentBtn\"},on:{\"click\":_vm.onNewComment}},[_c('QIcon',{attrs:{\"icon\":\"Comment\"}})],1)]),_c('div',{staticClass:\"MatcToolbarTopCenterCntr\"},[_c('div',{staticClass:\"MatcToolbarSection\",attrs:{\"data-dojo-attach-point\":\"screenSection\"}},[(_vm.events)?_c('AnalyticViewModeButton',{on:{\"change\":_vm.onChangeViewMode}}):_vm._e()],1)]),_c('div',{staticClass:\"MatcToolbarNotificationSection MatcToolbarTopRight MatcToolbarSection\",attrs:{\"data-dojo-attach-point\":\"notificationSection\"}},[_c('ViewConfig',{attrs:{\"value\":_vm.canvasViewConfig,\"analytic\":true},on:{\"change\":_vm.onChangeCanvasViewConfig}}),_c('HeatmapToggleButton',{attrs:{\"value\":'Heatmap'},on:{\"change\":function($event){return _vm.$emit('viewModeChange', $event)}}}),_c('div',{staticClass:\"MatcToolbarItem\",on:{\"click\":_vm.showSharing}},[_c('div',{staticClass:\"MatcToobarPrimaryButton\"},[_vm._v(\" Share \")])])],1)])]),_c('div',{staticClass:\"MatcToobarPropertiesSection MatcToolbarSectionHidden\",attrs:{\"data-dojo-attach-point\":\"propertiesCntr\"}})])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcDashHistogram\"})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n<template>\n     <div class=\"MatcDashHistogram\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n</template>\n<script>\nimport DojoWidget from 'dojo/DojoWidget'\nimport css from 'dojo/css'\nimport Logger from 'common/Logger'\nimport _Color from 'common/_Color'\nimport _Tooltip from 'common/_Tooltip'\nimport DomBuilder from 'common/DomBuilder'\nimport DataFrame from 'common/DataFrame'\n\nexport default {\n    name: 'Histogram',\n    mixins:[_Color, _Tooltip, DojoWidget],\n    data: function () {\n        return {\n            x_prefix: \"\"\n        }\n    },\n    components: {},\n    methods: {\n        postCreate(){\n\t\t\tthis.log = new Logger(\"Histogram\");\t\t\n\t\t\tif(this.counts){\n\t\t\t\tvar values = this.counts.split(\",\");\n\t\t\t\tvar df = new DataFrame(values);\n\t\t\t\tvar hist = df.hist(null, this.bins);\n\t\t\t\tthis.setValue(hist,df.mean());\n\t\t\t}\n\t\t},\t\t\t\t\n\t\t\n\t\tsetPopoverFct(f){\n\t\t\tthis.popoverLabelFct = f;\n\t\t},\n\t\t\n\t\tsetLabel(l){\n\t\t\tthis.label.innerHTML = l;\n\t\t},\n\t\t\n\t\tsetMaxMin(fct){\n\t\t\tthis.minMaxFct = fct;\n\t\t},\n\t\t\n\t\tsetFormTo(fct){\n\t\t\tthis.toFromFct = fct;\n\t\t},\n\t\t\n\t\tonHover(fct){\n\t\t\tthis.hoverFCT = fct;\n\t\t},\n\t\t\n\t\tsetValue(hist, mean){\n\t\t\t\n\t\t\tvar bins = hist.size();\n\t\t\tvar max = hist.max(\"count\");\n\t\t\tvar min = hist.min(\"count\");\n\t\t\tvar from = hist.min(\"from\");\n\t\t\tvar to = hist.max(\"to\");\n\t\t\tvar width  = 100/ (bins *2 -1);\n\t\t\tvar v_mean = (mean - from) / (to - from) ;\n\t\t\t\n\t\t\n\t\t\tvar db = new DomBuilder();\n\t\t\tvar cntr = db.div(\"MatcDashHistogramCntr\").build();\n\t\t\t\n\t\t\tvar me = this;\n\t\t\thist.foreach(function(row, i){\t\n\t\t\t\tvar v = row.count;\n\t\t\t\tvar bar = db.div(\"MatcDashHistogramBar\").build(cntr);\n\t\t\t\tbar.style.height = Math.max(1, v*100 / max) + \"%\";\n\t\t\t\tbar.style.width = width + \"%\";\n\t\t\t\tbar.style.left = width*(i*2) + \"%\";\n\t\t\t\t\n\t\t\t\tif(me.hoverFCT){\n\t\t\t\t\tvar tt = me.hoverFCT(row);\n\t\t\t\t\tcss.add(bar, \"MatcDashHistogramBarHover\");\n\t\t\t\t\tme.addTooltip(bar, tt);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tif(this.toFromFct){\n\t\t\t\tto = this.toFromFct(to);\n\t\t\t\tfrom = this.toFromFct(from);\n\t\t\t}\n\t\t\t\n\t\t\tdb.span(\"MatcDashHistogramLabelMax MatcDashHistogramLabel\", max).build(cntr);\n\t\t\tdb.span(\"MatcDashHistogramLabelMin MatcDashHistogramLabel\", min).build(cntr);\n\t\t\tdb.span(\"MatcDashHistogramLabelFrom MatcDashHistogramLabel\", from + this.x_prefix).build(cntr);\n\t\t\tdb.span(\"MatcDashHistogramLabelTo MatcDashHistogramLabel\", to + this.x_prefix).build(cntr);\n\t\t\t\n\t\t\tthis.domNode.innerHTML == \"\";\n\t\t\tthis.domNode.appendChild(cntr);\n\t\t\t\n\t\t\t\n\n\t\t\t/**\n\t\t\t * Mean of passed\n\t\t\t */\n\t\t\tif(mean != null && mean != undefined){\n\t\t\t\tlet lblCntr = db.div(\"MatcDashHistogramLabelMean\").build(cntr);\n\t\t\t\tlblCntr.style.left = v_mean*100 + \"%\";\n\t\t\t\tif(this.toFromFct){\n\t\t\t\t\tmean = this.toFromFct(mean);\n\t\t\t\t} \n\t\t\t\tdb.span(\"MatcDashHistogramLabel MatcHorizontalMiddle\", mean + this.x_prefix).build(lblCntr);\n\t\t\t\tlet bar = db.div(\"MatcDashHistogramBarMean\").build(cntr);\n\t\t\t\tbar.style.left = v_mean*100 + \"%\";\n\t\t\t}\n\t\t\n\t\t},\n    }, \n    mounted () {\n    }\n}\n</script>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Histogram.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Histogram.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Histogram.vue?vue&type=template&id=a430b102\"\nimport script from \"./Histogram.vue?vue&type=script&lang=js\"\nexport * from \"./Histogram.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\" MatcToolbarArrowDropDown MatcToolbarDropDownButton MatcToobarHomeSection MatcToobarHomeSectionBlueX\"},[_c('div',{staticClass:\"MatcToolbarItem MatcToolbarPrimaryItem\",attrs:{\"type\":\"button\",\"data-dojo-attach-point\":\"button\"}},[_c('img',{attrs:{\"src\":require(\"../../style/img/QUXLogoWhite.svg\")}}),_c('span',{staticClass:\"MatcToobarHomeSectionAppNameLabel\"},[_vm._v(_vm._s(_vm.name))]),_c('span',{staticClass:\"caret\"})]),_c('div',{staticClass:\"MatcToolbarPopUp MatcToolbarDropDownButtonPopup\",attrs:{\"role\":\"menu\",\"data-dojo-attach-point\":\"popup\"},on:{\"mousedown\":function($event){$event.stopPropagation();}}},[_c('div',{staticClass:\"MatcToolbarPopUpWrapper\"},[_c('ul',{attrs:{\"role\":\"menu\"}},_vm._l((_vm.items),function(i){return _c('li',{key:i.value,staticClass:\"MatcToolbarMenuItem\",class:i.css,on:{\"click\":function($event){$event.stopPropagation();return _vm.onSelect(i, $event)}}},[_c('label',{staticClass:\"MatcToolbarPopUpLabel\"},[_vm._v(_vm._s(i.label))])])}),0)]),_vm._m(0)])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcToolbarPopUpArrowCntr\"},[_c('div',{staticClass:\"MatcToolbarPopUpArrow\"})])}]\n\nexport { render, staticRenderFns }","\n<template>\n    <div class=\" MatcToolbarArrowDropDown MatcToolbarDropDownButton MatcToobarHomeSection MatcToobarHomeSectionBlueX\">\n\t\t<div class=\"MatcToolbarItem MatcToolbarPrimaryItem\" type=\"button\" data-dojo-attach-point=\"button\">\n\t\t\t<img src=\"../../style/img/QUXLogoWhite.svg\">\n            <span class=\"MatcToobarHomeSectionAppNameLabel\" >{{name}}</span>\n            <span class=\"caret\"></span>\n\t\t</div>\n        <div class=\"MatcToolbarPopUp MatcToolbarDropDownButtonPopup\" role=\"menu\" data-dojo-attach-point=\"popup\" @mousedown.stop>\n            <div class=\"MatcToolbarPopUpWrapper\">\n                <ul class=\"\" role=\"menu\">\n                    <li v-for=\"i in items\" :key=\"i.value\" @click.stop=\"onSelect(i, $event)\" :class=\"i.css\" class=\"MatcToolbarMenuItem\">\n                    \n                        <label class=\"MatcToolbarPopUpLabel\">{{i.label}}</label>\n\n                    </li>\n                  \n\t\t\t    </ul>\n            </div>\n            <div class=\"MatcToolbarPopUpArrowCntr\">\n                <div class=\"MatcToolbarPopUpArrow\">\n                </div>\n            </div>\n        </div>\n    </div>\n\n</template>\n<script>\nimport DojoWidget from 'dojo/DojoWidget'\nimport css from 'dojo/css'\nimport Util from 'core/Util'\n//import QIcon from 'page/QIcon'\nimport _DropDown from '../toolbar/components/_DropDown'\n\n\nexport default {\n    name: 'CreateBasicButton',\n    mixins:[Util, DojoWidget, _DropDown],\n    props:['name'],\n    data: function () {\n        return {\n            selectedTool: null,\n            tools: [               \n                {value: 'onShowSettings', icon: '', label: this.getNLS('toolbar.menu.settings')},       \n                {value: 'showHelp', icon: '', label: this.getNLS('toolbar.menu.help')},         \n                {value: 3, css:'MatcToolbarPopUpLine'},\n                {value: 'onExit', icon: '', label: this.getNLS('toolbar.menu.exit')},\n            ]\n        }\n    },\n    computed: {\n        items () {       \n            return this.tools\n        }\n    },\n    components: {\n        //'QIcon':QIcon\n    },\n    methods: {\n\n    \n        onSelect (t, e) {        \n            this.$emit('select', t, e)\n        },\n\n\t\tonHide (){   \n\t\t\tcss.remove(this.domNode,\"MatcToolbarItemActive\");\n            this.selectedTool = null\n\t\t},\n\n\t\tasync init (){\n\t\t\t\n\t\t},\n\n    },\n    mounted () {\n    }\n}\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticHomeMenu.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticHomeMenu.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./AnalyticHomeMenu.vue?vue&type=template&id=7698fd27\"\nimport script from \"./AnalyticHomeMenu.vue?vue&type=script&lang=js\"\nexport * from \"./AnalyticHomeMenu.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:['MatcToolbarNavButton', {'MatcToolbarEditModeAnimated': _vm.animated}]},[_c('div',{ref:\"cntr\",staticClass:\"MatcToolbarEditModeCntr\"},[_vm._l((_vm.modes),function(m,i){return _c('a',{key:m.value,ref:\"btns\",refInFor:true,class:['MatcToolbarItem vommondToolTipCntr', { 'MatcToolbarEditModeActive': m.value === _vm.selected }],on:{\"click\":function($event){return _vm.setSelected(m, i)}}},[_c('span',{ref:\"icons\",refInFor:true,class:'MatcToolbarResponsiveIcon ' + m.icon}),_c('span',{staticClass:\"MatcToolbarResponsiveLabel\"},[_vm._v(\" \"+_vm._s(m.label)+\" \")])])}),_c('div',{staticClass:\"MatcToolbarEditModeHighlight\",style:({ 'width': _vm.highlightWidth + 'px', 'left': _vm.highlightX + 'px' })})],2)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n<template>\n   <div :class=\"['MatcToolbarNavButton', {'MatcToolbarEditModeAnimated': animated}]\">\n\n        <div class=\"MatcToolbarEditModeCntr\" ref=\"cntr\">\n           \n            <a v-for=\"(m, i) in modes\" @click=\"setSelected(m, i)\" ref=\"btns\" :key=\"m.value\"\n                :class=\"['MatcToolbarItem vommondToolTipCntr', { 'MatcToolbarEditModeActive': m.value === selected }]\">\n                <span :class=\"'MatcToolbarResponsiveIcon ' + m.icon\" ref=\"icons\"/>\n                <span class=\"MatcToolbarResponsiveLabel\">\n                    {{m.label}}\n                </span>\n            </a>\n            <div class=\"MatcToolbarEditModeHighlight\" :style=\"{ 'width': highlightWidth + 'px', 'left': highlightX + 'px' }\">\n            </div>\n        </div>\n\n    </div>\n</template>\n<style lang=\"scss\">\n    @import '../../style/toolbar/toolbar_nav_button.scss';\n</style>\n<script>\n\nimport Logger from \"common/Logger\";\nimport _Tooltip from 'common/_Tooltip'\nimport NLS from 'common/NLS'\nimport domGeom from 'dojo/domGeom'\n\nexport default {\n    name: \"EditModeButton\",\n    mixins: [_Tooltip, NLS],\n    props: ['value'],\n    data: function () {\n        return {\n            animated:false,\n            highlightWidth: 0,\n            highlightX: 0,\n            selected: 'showClickHeatMap',\n            modes: [\n                { label: 'Heatmaps', value: \"showClickHeatMap\", icon: \"mdi mdi-cursor-default\", tooltip: 'tooltip.analyics-heatmaps'},\n                { label: 'User Journey', value: \"showUserJourney\", icon: \"mdi mdi-vector-polyline\" , tooltip: 'tooltip.analyics-user'},\n                { label: 'Tasks & Drop Off', value: \"showDropOff\", icon: \"mdi mdi-chart-timeline-variant-shimmer\", tooltip: 'tooltip.analyics-task' },\n                { label: 'Screens', value: \"showScreenMode\", icon: \"mdi mdi-chart-timeline-variant-shimmer\", tooltip: 'tooltip.analyics-screen' },\n            ]\n        };\n    },\n    computed: {\n        hasData() {\n            if (this.value) {\n                return this.value.hasDataView\n            }\n            return true\n        }\n    },\n    components: {},\n    methods: {\n        setSelected(m, i) {\n            this.log.log(1, 'setSelected', 'enter', m)\n            this.selected = m.value\n            this.setHighlight(i)\n            this.$emit(\"change\", m.value)\n        },\n    \n        setHighlight(i) {\n            const node = this.$refs.btns[i]\n            const pos = domGeom.position(node)\n            const cPos = domGeom.position(this.$refs.cntr)\n            this.highlightWidth = pos.w\n            this.highlightX = pos.x - cPos.x - 1\n        },\n        nextView() {\n        }\n    },\n    watch: {\n        value(v) {\n            this.log.log(2, 'watch(value)', 'enter', v)\n            this.value = v\n        }\n    },\n    async mounted() {\n        this.log = new Logger(\"AnalyticViewModeButton\")\n        this.setHighlight(0)\n        setTimeout(() => {\n            this.modes.forEach((mode, i) => {\n                const icon = this.$refs.btns[i]\n                this.addTooltip(icon, this.getNLS(mode.tooltip))\n            })\n        }, 100)\n\n \n        setTimeout(() => this.animated = true, 500)\n    }\n};\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticViewModeButton.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticViewModeButton.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./AnalyticViewModeButton.vue?vue&type=template&id=34f0bddb\"\nimport script from \"./AnalyticViewModeButton.vue?vue&type=script&lang=js\"\nexport * from \"./AnalyticViewModeButton.vue?vue&type=script&lang=js\"\nimport style0 from \"./AnalyticViewModeButton.vue?vue&type=style&index=0&id=34f0bddb&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcToolbar MatcAnalyticsToolbar MatcLayerListVisible\"})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n<template>\n    <div class=\"MatcToolbar MatcAnalyticsToolbar MatcLayerListVisible\">\n    </div>\n</template>\n<script>\n\nimport css from 'dojo/css'\nimport lang from 'dojo/_base/lang'\n\nimport on from 'dojo/on'\nimport touch from 'dojo/touch'\nimport hash from 'dojo/hash'\n\nimport DomBuilder from 'common/DomBuilder'\nimport ScrollContainer from 'common/ScrollContainer'\nimport Dialog from 'common/Dialog'\nimport CheckBox from 'common/CheckBox'\nimport RadioBoxList from 'common/RadioBoxList'\nimport Form from 'common/Form'\nimport ToolbarDropDownButton from 'canvas/toolbar/components/ToolbarDropDownButton'\nimport ToolbarColor from 'canvas/toolbar/components/ToolbarColor'\nimport Ring from 'common/Ring'\nimport Analytics from 'dash/Analytics'\nimport VideoPlayer from 'views/apps/test/VideoPlayer'\nimport DataFrame from 'common/DataFrame'\nimport {iconDOM} from '../../page/QIconUtil'\n\nexport default {\n    name: 'AnalyticToolbarRender',\n    mixins: [],\n    data: function () {\n        return {\n            hasSelectAll: true,\n            hasSessionDetails: true\n        }\n    },\n    components: {\n    },\n    methods: {\n\n\n        renderToolbar() {\n            this.logger.log(3, \"renderToolbar\", \"enter\");\n            if (this.isRendered) {\n                return\n            }\n            this.isRendered = true\n            this.logger.log(3, \"renderToolbar\", \"exit\");\n        },\n\n        render() {\n            this.logger.log(3, \"render\", \"entry\");\n\n            this.properties = document.createElement(\"div\");\n            css.add(this.properties, \"MatcToobarPropertiesSectionCntr\")\n\n            this.sections = [];\n\n            this.propertiesStates = {};\n\n            this.renderScreenProperties();\n\n            this.renderScreenModes();\n\n            this.renderWidgetProperties();\n\n            this.renderSessionProperties();\n\n            this.renderSessionSection();\n\n            this.renderDropOffProperties()\n\n            this.renderHeatMapProperties();\n\n            this.renderGestureProperties();\n\n            this.propertiesCntr.appendChild(this.properties);\n\n\n            /**\n             * Now assemble final ui. hook in properties panel and make toolSection Visible!\n             */\n            this.scroller = this.$new(ScrollContainer);\n            this.scroller.placeAt(this.propertiesCntr);\n            this.scroller.wrap(this.properties, 40);\n\n            this.hideAllSections();\n\n            this.showHeatMapProperties();\n            this.showClickHeatMap()\n\n            this.logger.log(3, \"render\", \"exit\");\n        },\n\n\n\n\n        renderScreenProperties() {\n            this.logger.log(3, \"renderScreenProperties\", \"entry\");\n\n\n            var db = new DomBuilder();\n            /**\n             * Name\n             */\n            this.screenNameDiv = this.createSection(\"Screen\", this.properties);\n            var content = this.createContent(this.screenNameDiv);\n\n            this.screenName = this.createInput(content, \"Screen Name\");\n            this.screenName.readOnly = true;\n\n            var ringCntr = db.div(\"MatcCenter\").build(content);\n\n            /**\n             * Views total\n             */\n            var cntr = db.div(\"MatcMarginBottom\").build(ringCntr)\n            this.screenTestRing = this.createRing(\"Test Coverage\", \"analytics.canvas.kpi.coverage\");\n            this.screenTestRing.placeAt(cntr);\n\n            /**\n             * Dwell\n             */\n            cntr = db.div(\"MatcMarginBottom\").build(ringCntr)\n            this.screenDwellRing = this.createRing(\"Dwell Time\", \"analytics.canvas.kpi.dwell\");\n            this.screenDwellRing.placeAt(cntr);\n\n            /**\n             * Views total\n             */\n            cntr = db.div(\"MatcMarginBottom\").build(ringCntr)\n            this.screenTotalViewRing = this.createRing(\"Screen Views\", \"analytics.canvas.kpi.screen-views\");\n            this.screenTotalViewRing.placeAt(cntr);\n\n\n            /**\n             * CLicks\n             */\n            cntr = db.div(\"MatcMarginBottom\").build(ringCntr)\n            this.screenClickRing = this.createRing(\"Screen Clicks\", \"analytics.canvas.kpi.screen-clicks\");\n            this.screenClickRing.placeAt(cntr);\n\n\n            /**\n             * CLicks\n             */\n            cntr = db.div(\"MatcMarginBottom\").build(ringCntr)\n            this.screenWidgetClickRing = this.createRing(\"Widget Clicks\", \"analytics.canvas.kpi.screen-widget-clicks\");\n            this.screenWidgetClickRing.placeAt(cntr);\n\n        },\n\n\n        renderWidgetProperties() {\n            this.logger.log(3, \"renderWidgetProperties\", \"entry\");\n\n            var db = new DomBuilder();\n\n            /**\n             * Name\n             */\n            this.widgetNameDiv = this.createSection(\"Widget \", this.properties);\n            var content = this.createContent(this.widgetNameDiv);\n            this.widgetName = this.createInput(content, \"Screen\");\n            this.widgetName.readOnly = true;\n            var ringCntr = db.div(\"MatcCenter\").build(content);\n\n            /**\n             * CLicks\n             */\n            let cntr = db.div(\"MatcMarginBottom\").build(ringCntr)\n            this.widgetClickRing = this.createRing(\"Widget Clicks\", \"analytics.canvas.kpi.clicks\");\n            this.widgetClickRing.placeAt(cntr);\n\n\n            /**\n             * First Clicks\n             */\n            cntr = db.div(\"MatcMarginBottom\").build(ringCntr)\n            this.widgetFirstClickRing = this.createRing(\"First Clicks\", \"analytics.canvas.kpi.first-clicks\");\n            this.widgetFirstClickRing.placeAt(cntr);\n\n            /**\n             * Discovery\n             */\n            cntr = db.div(\"MatcMarginBottom\").build(ringCntr);\n            var nodes = this.createBigNumber(db, cntr, \"Time before Click\", \"analytics.canvas.kpi.before-click\");\n            this.widgetDiscoverLabel = nodes[0];\n            this.widgetDiscoverSTDLabel = nodes[1];\n\n        },\n\n\n        renderHeatMapProperties() {\n            this.logger.log(1, \"renderHeatMapProperties\", \"entry\");\n\n            var db = new DomBuilder();\n\n            this.heatmapDiv = this.createSection(\"Show\", this.properties);\n\n            let content = this.createContent(this.heatmapDiv);\n\n            var row = db.div(\"MatcToobarRow MatcMarginBottom\").build(content);\n\n            var list = this.$new(RadioBoxList);\n            css.add(list.domNode, \"MatcToolbarRadioList\");\n            list.setOptions([\n                { \"value\": -1, label: \"All Clicks\" },\n                { \"value\": 1, label: \"First Click\" },\n                { \"value\": 3, label: \"First three Clicks\" },\n                { \"value\": \"missedClicks\", label: \"Missed Clicks\" },\n                { \"value\": \"mouse\", label: \"Mouse\" }\n            ]);\n            list.placeAt(db.div().build(row));\n            this.own(list.on(\"change\", lang.hitch(this, \"showFirstClickHeatMap\")));\n\n\n            this.heatmapLabel = db.div('MatcToobarRow').label('MatcToolbarLabel MatcToolbarHelpSection').build(content)\n\n            this.heatmapClickList = list;\n            this.setHeatMapLabel(-1)\n        },\n\n        setHeatMapLabel(i) {\n            let lbl = ''\n            if (i === -1) {\n                lbl = this.getNLS('analytics.canvas.heatamp.hintAll')\n            }\n            if (i === 1) {\n                lbl = this.getNLS('analytics.canvas.heatamp.hintFirst')\n            }\n            if (i === 3) {\n                lbl = this.getNLS('analytics.canvas.heatamp.hintFirstThree')\n            }\n            if (i === 'missedClicks') {\n                lbl = this.getNLS('analytics.canvas.heatamp.hintMissed')\n            }\n\n            if (i === 'mouse') {\n                lbl = this.getNLS('analytics.canvas.heatamp.hintMouse')\n            }\n            this.heatmapLabel.textContent = lbl\n        },\n\n        renderDropOffProperties() {\n            this.logger.log(2, \"renderSessionProperties\", \"entry\");\n\n            var db = new DomBuilder();\n\n\n            this.dropOffConfigDiv = this.createSection(\"Show\", this.properties);\n            var content = this.createContent(this.dropOffConfigDiv);\n            var row = db.div(\"MatcToobarRow MatcToolbarRadioList\").build(content);\n\n            this.dropOffTimeCheckBox = this.$new(RadioBoxList, { maxLabelLength: 20 });\n            this.dropOffTimeCheckBox.setOptions([\n                { value: false, label: 'Drop Off' },\n                { value: true, label: 'Time' }\n            ]);\n            this.dropOffTimeCheckBox.setValue(false);\n            this.dropOffTimeCheckBox.placeAt(row);\n            this.own(on(this.dropOffTimeCheckBox, \"change\", lang.hitch(this, \"selectDropOffTask\")));\n\n\n            this.dropOffOptionsDiv = this.createSection(\"Tasks\", this.properties);\n            content = this.createContent(this.dropOffOptionsDiv);\n            row = db.div(\"MatcToobarRow \").build(content);\n\n\n            this.dropOffTaskBtn = this.$new(RadioBoxList, { maxLabelLength: 20 });\n\n            let tasks = []\n\n            if (this.testSettings.tasks && this.testSettings.tasks.length >= 1) {\n                tasks = this.testSettings.tasks.map((task, i) => {\n                    return { value: i, label: task.name }\n                })\n            } else {\n                this.dropOffOptionsLabel = db.span(\n                    \"MatcToolbarLabel MatcToolbarHelpSection\",\n                    this.getNLS(\"analytics.canvas.dropoff.hintNoTasksDefined\")\n                ).build(row)\n            }\n\n            this.dropOffTaskBtn.setOptions(tasks);\n            this.dropOffTaskBtn.setValue(0);\n            css.add(this.dropOffTaskBtn.domNode, \"MatcToolbarRadioList\");\n            this.dropOffTaskBtn.placeAt(row);\n            this.own(on(this.dropOffTaskBtn, \"change\", lang.hitch(this, \"selectDropOffTask\")));\n\n            this.dropOffChartDivCntr = this.createSection(\"Insights\", this.properties);\n            content = this.createContent(this.dropOffChartDivCntr);\n\n            var ringCntr = db.div(\"MatcCenter \").build(content);\n            this.dropoffTaskSuccess = this.createRing(\"Success\", \"analytics.canvas.kpi.first-clicks\");\n            css.add(this.dropoffTaskSuccess.domNode, 'MatcMarginBottom')\n            this.dropoffTaskSuccess.placeAt(ringCntr);\n\n\n            let cntr = db.div(\"MatcMarginBottom\").build(ringCntr);\n            var nodes = this.createBigNumber(db, cntr, \"Duration\", \"analytics.canvas.kpi.before-click\");\n            this.dropOffTaskDuration = nodes[0];\n            this.dropOffTaskDurationLabel = nodes[1];\n\n\n            cntr = db.div(\"MatcMarginBottom\").build(ringCntr);\n            nodes = this.createBigNumber(db, cntr, \"Interactions\", \"analytics.canvas.kpi.before-click\");\n            this.dropOffInteractions = nodes[0];\n            this.dropOffInteractionsLabel = nodes[1];\n\n\n            this.dropOffFunnelDivCntr = this.createSection(\"Drop Off\", this.properties);\n            content = this.createContent(this.dropOffFunnelDivCntr);\n\n            this.dropOffChartDiv = db.div('MatcToolbarDropOffChart', '').build(content)\n        },\n\n\n        renderSessionProperties() {\n            this.logger.log(1, \"renderSessionProperties\", \"entry\");\n\n            const db = new DomBuilder();\n\n            this.sessionOptionsDiv = this.createSection(\"Show\", this.properties);\n            let content = this.createContent(this.sessionOptionsDiv);\n\n            let row = db.div(\"MatcToobarRow MatcToolbarRadioList\").build(content);\n\n            this.sessionTreeCheckBox = this.$new(RadioBoxList)\n            this.sessionTreeCheckBox.setOptions([\n                { value: true, label: \"Merged Graph\" },\n                { value: false, label: \"Individual Tests\" },\n            ])\n\n            // this.sessionTreeCheckBox = this.$new(CheckBox);\n            // this.sessionTreeCheckBox.setLabel(\"Merge Graph\");\n            //css.add(this.sessionTreeCheckBox.domNode, \"MatcToolbarItem\");\n            this.sessionTreeCheckBox.setValue(true);\n            this.sessionTreeCheckBox.placeAt(row);\n            this.own(on(this.sessionTreeCheckBox, \"change\", lang.hitch(this, \"showUserJourney\")));\n\n\n            row = db.div(\"MatcToobarRow\").build(content);\n            this.sessionOutlierCheckbox = this.$new(CheckBox);\n            css.add(this.sessionOutlierCheckbox.domNode, \"MatcToolbarItem\");\n            this.sessionOutlierCheckbox.setValue(false);\n            this.sessionOutlierCheckbox.setLabel(\"Show Outlier\");\n            this.sessionOutlierCheckbox.placeAt(row);\n            this.own(on(this.sessionOutlierCheckbox, \"change\", lang.hitch(this, \"showUserJourneyOutlier\")));\n\n\n            this.sessionOutlierDiv = this.createSection(\"Colors\", this.properties);\n            content = this.createContent(this.sessionOutlierDiv);\n            row = db.div(\"MatcToobarRow \").build(content);\n\n\n            this.sessionLineColor = this.$new(ToolbarColor, { updateColor: true, hasCustomColor: false, hasPicker: false });\n            this.sessionLineColor.placeAt(row);\n            this.sessionLineColor.setLabel('Graph');\n            this.sessionLineColor.setModel(this.model);\n            this.sessionLineColor.setValue(\"#33b5e5\");\n            css.add(this.sessionLineColor.domNode, \" hidden\");\n            this.own(on(this.sessionLineColor, \"change\", lang.hitch(this, \"showUserJourney\")));\n\n            this.sessionTaskLineColor = this.$new(ToolbarColor, { updateColor: true, hasCustomColor: false, hasPicker: false });\n            this.sessionTaskLineColor.placeAt(row);\n            this.sessionTaskLineColor.setLabel('Task');\n            this.sessionTaskLineColor.setModel(this.model);\n            this.sessionTaskLineColor.setValue(\"#92c500\");\n            css.add(this.sessionTaskLineColor.domNode, \"\");\n            this.own(on(this.sessionTaskLineColor, \"change\", lang.hitch(this, \"showUserJourney\")));\n\n\n            this.sessionOutlierColor = this.$new(ToolbarColor, { updateColor: true, hasCustomColor: false, hasPicker: false });\n            this.sessionOutlierColor.placeAt(row);\n            this.sessionOutlierColor.setLabel('Outlier');\n            this.sessionOutlierColor.setModel(this.model);\n            this.sessionOutlierColor.setValue(\"#ffb61c\");\n            css.add(this.sessionOutlierColor.domNode, \"\");\n            this.own(on(this.sessionOutlierColor, \"change\", lang.hitch(this, \"showUserJourney\")));\n\n\n            this.sessionShowDiv = this.createSection(\"Options\", this.properties);\n            content = this.createContent(this.sessionShowDiv);\n            row = db.div(\"MatcToobarRow MatcToolbarRadioList\").build(content);\n            this.sessionTimeCheckBox = this.$new(RadioBoxList, { maxLabelLength: 20 });\n            this.sessionTimeCheckBox.setOptions([\n                { value: false, label: 'Navigation' },\n                { value: true, label: 'Time' }\n            ]);\n\n            this.sessionTimeCheckBox.setValue(false);\n            this.sessionTimeCheckBox.placeAt(row);\n            this.own(on(this.sessionTimeCheckBox, \"change\", lang.hitch(this, \"showUserJourney\")));\n\n\n            this.sessionTaskCntr = this.createSection(\"Tasks\", this.properties);\n            content = this.createContent(this.sessionTaskCntr);\n\n            row = db.div(\"MatcToobarRow \").build(content);\n\n            var tasks = [{ value: -1, label: \"No Task\" }];\n            if (this.testSettings.tasks) {\n                for (let i = 0; i < this.testSettings.tasks.length; i++) {\n                    let task = this.testSettings.tasks[i];\n                    tasks.push({ value: i, label: task.name });\n                }\n            }\n            this.sessionTaskBtn = this.$new(RadioBoxList, { maxLabelLength: 20 });\n            this.sessionTaskBtn.setOptions(tasks);\n            this.sessionTaskBtn.setValue(-1);\n            css.add(this.sessionTaskBtn.domNode, \"MatcToolbarRadioList\");\n            this.sessionTaskBtn.placeAt(row);\n            this.own(on(this.sessionTaskBtn, \"change\", lang.hitch(this, \"selectUserJournyTask\")));\n\n\n        },\n\n        renderSessionSection() {\n\n\n            this.sessionDiv = this.db.div(\"MatcToolbarSection\").build(this.testListCntr)\n            let content = this.createContent(this.sessionDiv);\n            css.add(content, \"MatcMarginBottomXXL\");\n\n\n            let row = this.db.div(\"MatcToobarRow\").build(content);\n\n            this.sessionOrderBrn = this.$new(ToolbarDropDownButton, { maxLabelLength: 20 });\n            this.sessionOrderBrn.setOptions([\n                { value: 'date', label: \"Sort by Date\" },\n                { value: 'duration', label: \"Sort by Duration\" },\n                { value: 'events', label: \"Sort by Events\" },   \n                { value: 'weirdness', label: \"Sort by Outlier\" }\n            ]);\n            this.sessionOrderBrn.setPopupCss(\"MatcActionAnimProperties MatcPopupArrowLeft\");\n            this.sessionOrderBrn.updateLabel = true;\n            this.sessionOrderBrn.reposition = true;\n            this.sessionOrderBrn.repositionPosition = 'right';\n            this.sessionOrderBrn.setValue('date')\n            this.sessionOrderBrn.placeAt(row);\n            this.tempOwn(on(this.sessionOrderBrn, \"change\", (v) => { this.onSortSessionList(v) }));\n            this.addTooltip(this.sessionOrderBrn.domNode, \"Change the sort order of the session list\");\n\n\n\n            \n            // row = this.db.div(\"MatcToobarRow\").build(content);\n\n            // const selectOptions = [\n            //     { value: 'all', label: \"Select All\", callback: () => this.onSelectSesionAll()},\n            //     { value: 'invert', label: \"Invert Selection\", callback: () => this.onSelectSessionInvert()}\n            // ]\n            // if (this.testSettings && this.testSettings.tasks) {\n            //     this.testSettings.tasks.forEach(t => {\n            //         selectOptions.push({\n            //             value: t.id, label: \"Select \" + t.name, callback: () => this.onSelectSesionsTask(t)\n            //         })\n            //     })\n            // }\n       \n            // this.sessionSelectBtn = this.$new(ToolbarDropDownButton, { maxLabelLength: 20 });\n            // this.sessionSelectBtn.setOptions(selectOptions);\n            // this.sessionSelectBtn.setPopupCss(\"MatcActionAnimProperties MatcPopupArrowLeft\");\n            // this.sessionSelectBtn.updateLabel = true;\n            // this.sessionSelectBtn.reposition = true;\n            // this.sessionSelectBtn.repositionPosition = 'right';\n            // this.sessionSelectBtn.setValue('all')\n            // this.sessionSelectBtn.placeAt(row);\n            // this.tempOwn(on(this.sessionSelectBtn, \"change\", (v) => { this.onSelectSesionsBy(v) }));\n            // this.addTooltip(this.sessionSelectBtn.domNode, \"Select a subset of sessions\");\n\n\n            this.sessionListCntr = this.db.div(\"MatcToolbarSessionCntr\").build(content);\n            this.sessionList = this._getTestList(this.events, this.annotation, this.testSettings);\n            this.renderSessionList(this.sessionListCntr, this.sessionList, 'date')\n\n        },\n\n        onSelectSessionInvert () {\n            console.debug('onSelectSesionAll')\n        },\n\n        onSelectSesionAll(v) {\n            console.debug('onSelectSesionAll', v)\n        },\n\n        onSelectSesionsTask(v) {\n            console.debug('onSelectSesionsTask', v)\n        },\n\n        onSortSessionList(value) {\n            this.renderSessionList(this.sessionListCntr, this.sessionList, value)\n            \n        },\n\n        renderSessionList(content, list, order) {\n\n            const db = new DomBuilder();\n\n            content.innerHTML = \"\"\n\n           \n            if (this.hasSelectAll) {\n                this.sessionAllCheckBox = this.$new(CheckBox);\n                this.sessionAllCheckBox.setLabel(\"Show All\");\n                this.sessionAllCheckBox.setValue(true);\n                css.add(this.sessionAllCheckBox.domNode, \"MatcToolbarItem\");\n                this.sessionAllCheckBox.placeAt(db.div(\"MatcToobarRow\").build(content));\n                this.own(on(this.sessionAllCheckBox, \"change\", lang.hitch(this, \"selectAllSessions\")));\n            }\n\n\n            list.sort((a, b) => {\n                if (order === 'duration') {\n                    return b.duration - a.duration\n                }\n                if (order === 'date') {\n                    return a.start - b.start\n                }\n                if (order === 'weirdness') {\n                    return b.weirdness - a.weirdness\n                }\n                return b.size - a.size\n            })\n\n\n            const cntr = db.div(\"MatcToolbarSessionList\").build()\n            this.sessionCheckBoxes = {};\n            for (let i = 0; i < list.length; i++) {\n                const session = list[i];\n\n                //const sessionDIV = db.div('MatcToolbarSession MatcToolbarIconButton').build(cntr)\n\n                const row = db.div(\"MatcToobarRow MatcToolbarIconButton\").build(cntr);\n\n                const chk = this.$new(CheckBox);\n                //css.add(chk.domNode, \"MatcToolbarItem\");\n                chk.setValue(true);\n         \n                chk.placeAt(db.div().build(row));\n\n                if (this.hasSessionDetails) {\n\n                    //chk.setLabel(\"Test \" + (session.id)); // + session.taskPerformance +\" Tasks - \"\n\n                    const labelCntr = db.div('MatcToolbarSessionLabels').build(row)\n\n                    db.span('', 'Test ' + (session.id)).build(labelCntr)\n              \n                    const details = db.div(\"MatcToolbarSessionListDetails\").build(labelCntr)\n\n                    const start = db.div().build(details)\n                    db.span(\"\",session.date).build(start)\n\n                    const duration = db.div().build(details)\n                    db.span(\"\",session.duration + 's').build(duration)\n\n                    // const events = db.div().build(details)\n                    // db.span(\"\",session.size + ' Events').build(events)\n                } else {\n                    if (order === 'duration') {\n                        chk.setLabel(\"Test \" + (session.id) + \" - \" + session.duration + \"s\"); // + session.taskPerformance +\" Tasks - \"\n                    }\n                    if (order === 'date') {\n                        chk.setLabel(\"Test \" + (session.id) + \" - \" + session.date + \"\"); // + session.taskPerformance +\" Tasks - \"\n                    }\n                    if (order === 'events') {\n                        chk.setLabel(\"Test \" + (session.id) + \" - \" + session.size + \"\"); // + session.taskPerformance +\" Tasks - \"\n                    }\n\n                    if (order === 'weirdness') {\n                        chk.setLabel(\"Test \" + (session.id) + \" - \" + session.weirdness * 100 + \"%\"); // + session.taskPerformance +\" Tasks - \"\n                    }\n                }\n\n\n                this.sessionCheckBoxes[session.session] = chk;\n                this.own(on(chk, \"change\", lang.hitch(this, \"selectSession\")));\n                this.own(on(row, \"mousedown\",  (e) => {\n                    this.stopEvent(e)\n                    chk.setValue(!chk.getValue())\n                    this.selectSession()\n                }));\n                this.own(on(row, \"mouseover\", lang.hitch(this, \"hoverSession\", session)))\n                this.own(on(row, \"mouseout\", lang.hitch(this, \"hoverSession\", null)))\n\n                const play = db.div(\"MatcToobarRowRightIcon\").build(row)\n                play.appendChild(iconDOM('PlayVideo'))\n\n                this.own(on(play, \"mousedown\", e => {\n                    this.stopEvent(e)\n                    this.showSession(session,e)\n                }))\n            }\n\n            this.sessionScroller = this.$new(ScrollContainer);\n            this.sessionScroller.placeAt(content);\n            this.sessionScroller.wrap(cntr, 40);\n        },\n\n        hoverSession(session) {\n            if (this.analyticMode !== 'UserJourney') {\n                return\n            }\n            if (this.canvas) {\n                this.canvas.highlightSession(session?.session)\n            }\n        },\n\n        showUserJourneyOutlier(showOutlier) {\n            if (showOutlier) {\n                let outliers = this.canvas.getOutlierScores();\n                for (let session in this.sessionCheckBoxes) {\n                    let chkBx = this.sessionCheckBoxes[session];\n                    if (outliers[session]) {\n                        css.remove(chkBx.domNode, \"MatcToolbarItemStrikeThrough\");\n                    } else {\n                        css.add(chkBx.domNode, \"MatcToolbarItemStrikeThrough\");\n                    }\n                }\n\n            } else {\n                for (let session in this.sessionCheckBoxes) {\n                    let chkBx = this.sessionCheckBoxes[session];\n                    css.remove(chkBx.domNode, \"MatcToolbarItemPassive\");\n                    css.remove(chkBx.domNode, \"MatcToolbarItemStrikeThrough\");\n                }\n            }\n            this.showUserJourney();\n        },\n        /**\n         * Update the UI according the selected task. Show task color selector\n         * and also fade out not matching sessions\n         */\n        selectUserJournyTask(taskNumber) {\n\n            if (taskNumber >= 0) {\n                // css.remove(this.sessionTaskLineColor.domNode, \"hidden\");\n                // css.remove(this.sessionLineColor.domNode, \"hidden\")\n                let task = this.testSettings.tasks[taskNumber];\n                let taskPerformance = this.canvas.getTaskPerformance();\n                for (let session in this.sessionCheckBoxes) {\n                    let chkBx = this.sessionCheckBoxes[session];\n                    if (taskPerformance[session] && taskPerformance[session][task.id]) {\n                        css.remove(chkBx.domNode, \"MatcToolbarItemStrikeThrough\");\n                        //chkBx.setValue(true);\n                    } else {\n                        //chkBx.setValue(false);\n                        css.add(chkBx.domNode, \"MatcToolbarItemStrikeThrough\");\n                    }\n                }\n            } else {\n                // css.add(this.sessionTaskLineColor.domNode, \"hidden\");\n                // css.add(this.sessionLineColor.domNode, \"hidden\")\n                for (let session in this.sessionCheckBoxes) {\n                    let chkBx = this.sessionCheckBoxes[session];\n                    css.remove(chkBx.domNode, \"MatcToolbarItemPassive\");\n                    css.remove(chkBx.domNode, \"MatcToolbarItemStrikeThrough\");\n                }\n            }\n            this.showUserJourney();\n        },\n\n        setSelectSessions(ids) {\n            if (this.sessionCheckBoxes) {\n                for (var id in this.sessionCheckBoxes) {\n                    if (ids.indexOf(id) >= 0) {\n                        this.sessionCheckBoxes[id].setValue(true);\n                    } else {\n                        this.sessionCheckBoxes[id].setValue(false);\n                    }\n                }\n                if (this.sessionAllCheckBox) {\n                    this.sessionAllCheckBox.setValue(false);\n                }\n\n                this.onSessionSelectionChanged();\n            }\n        },\n\n        selectAllSessions(value) {\n            for (let id in this.sessionCheckBoxes) {\n                this.sessionCheckBoxes[id].setValue(value);\n            }\n            this.onSessionSelectionChanged();\n        },\n\n        selectSession() {\n            this.onSessionSelectionChanged();\n        },\n\n        onSessionSelectionChanged() {\n            this.logger.log(-1, \"onSessionSelectionChanged\", \"enter\")\n            this.reRenderAnalyticMode()\n        },\n\n        getSelectedSessions () {\n            const sessions = {};\n\t\t\tfor(var id in this.sessionCheckBoxes){\n\t\t\t\tsessions[id] = this.sessionCheckBoxes[id].getValue();\n\t\t\t}\n            return sessions\n        },\n\n        _getTestList(events, annotatation, testSettings) {\n\n            const list = [];\n            if (!testSettings.tasks) {\n                testSettings.tasks = [];\n                console.warn(\"_getTestList() > Added missing task array\")\n            }\n\n            const df = new DataFrame(events);\n            df.sortBy(\"time\");\n            const sessionGroup = df.groupBy(\"session\");\n            const sessions = sessionGroup.data;\n\n            const annoSession = new DataFrame(annotatation).groupBy(\"reference\");\n            const analytics = new Analytics();\n            const taskCount = testSettings.tasks.length;\n            const tasksPerformance = analytics.getMergedTaskPerformance(df, testSettings.tasks, annotatation);\n            const tasksBySession = tasksPerformance.count(\"session\");\n\n            const outliers = this.canvas.getOutlierScores()\n\n            let id = 1;\n            for (let sessionID in sessions) {\n\n                let session = sessions[sessionID];\n                let date = this.formatDate(session.min(\"time\"), true);\n\n                let anno = annoSession.get(sessionID);\n                let status = '<span class=\"MatchDashStatusSuccess\">Valid</span>';\n                let isValid = true;\n                if (anno) {\n                    isValid = anno.get(0).get(\"isValid\");\n                    if (!isValid) {\n                        status = '<span class=\"MatchDashStatusFailure\">Failure</span>';\n                    }\n                }\n\n                let taskSuccess = tasksBySession.get(sessionID);\n                if (!taskSuccess) {\n                    taskSuccess = 0;\n                }\n\n                const df = new DataFrame(session.data)\n                //const actionsEvents = this.getActionEvents(df);\n                const clicks = df.select(\"type\", \"in\", [\"ScreenClick\", \"WidgetClick\", \"WidgetChange\", \"ScreenGesture\", \"WidgetGesture\"])\n\n\n                const item = {\n                    session: sessionID,\n                    taskPerformance: taskSuccess + \" / \" + taskCount,\n                    weirdness: outliers[sessionID],\n                    duration: (Math.ceil((session.max(\"time\") - session.min(\"time\")) / 1000)),\n                    date: date,\n                    start: session.min(\"time\"),\n                    size: clicks.size(),\n                    status: status,\n                    isValid: isValid,\n                    id: id,\n                    screens: session.unique(\"screen\")\n                };\n\n                list.push(item);\n                id++;\n            }\n\n            list.sort((a, b) => {\n                return a.id - b.id;\n            });\n\n            return list;\n        },\n\n\n        renderGestureProperties() {\n\n            var db = new DomBuilder();\n\n            this.gestureOptionsDiv = this.createSection(\"Options\", this.properties);\n\n            let content = this.createContent(this.gestureOptionsDiv);\n\n            var row = db.div(\"MatcToobarRow MatcMarginBottomXXL\").build(content);\n            db.span(\"MatcToolbarItemLabel\", \"Gesture Color\").build(row);\n\n            this.gestureLineColor = this.$new(ToolbarColor, { updateColor: true, hasCustomColor: false, hasPicker: false });\n            this.gestureLineColor.placeAt(row);\n            this.gestureLineColor.setLabel('Line Color');\n            this.gestureLineColor.setModel(this.model);\n            this.gestureLineColor.setValue(\"#0099cc\");\n            this.own(on(this.gestureLineColor, \"change\", lang.hitch(this, \"showGestureMap\")));\n\n\n        },\n\n\n        /*****************************************************************************************************\n         * Screen Mode\n         ****************************************************************************************************/\n\n\n        renderScreenModes() {\n            this.logger.log(3, \"renderScreenModes\", \"entry\");\n\n            this.screenModeDiv = this.createSection(\"Show\", this.properties);\n\n            const content = this.createContent(this.screenModeDiv);\n\n            const row = this.db.div(\"MatcToobarRow MatcMarginBottom\").build(content);\n\n            const list = this.$new(RadioBoxList);\n            css.add(list.domNode, \"MatcToolbarRadioList\");\n            list.setOptions([\n                { label: 'Dwell Time', value: \"HeatmapDwelTime\", icon: \"mdi mdi-timelapse\" },\n                { label: 'Scroll', value: \"HeatmapScrollView\", icon: \"mdi mdi-swap-vertical\" },\n                { label: 'Scroll Time', value: \"HeatmapScrollTime\", icon: \"mdi mdi-timer\" },\n                //{ label: 'Discovery Time', value: \"HeatmapDiscoryTime\", icon: \"mdi mdi-timer\" }\n            ]);\n            list.setValue(\"HeatmapDwelTime\")\n\n            this.screenModeRadioList = list\n            list.placeAt(row);\n            this.own(list.on(\"change\", lang.hitch(this, \"showScreenMode\")));\n        },\n\n        /*****************************************************************************************************\n         * show properties section and make sure the scroll bar is moved too!\n         ****************************************************************************************************/\n\n        showProperties() {\n            css.remove(this.propertiesCntr, \"MatcToolbarSectionHidden\");\n            if (this.canvas) {\n                css.add(this.canvas.scrollRight, \"MatcCanvasScrollBarRightOpen\");\n            }\n        },\n\n        hideProperties() {\n            if (this.analyticMode == \"UserJourney\") {\n                this.hideAllSections();\n                this.showSessionProperties();\n                return\n            }\n\n            if (this.analyticMode == \"HeatmapClick\") {\n                this.hideAllSections();\n                this.showHeatMapProperties();\n                return\n            }\n            this.hideAllSections();\n        },\n\n\n        hideAllSections() {\n            this.logger.log(3, \"hideAllSections\", \"entry\");\n            for (var i = 0; i < this.sections.length; i++) {\n                var section = this.sections[i];\n                css.add(section, \"MatcToolbarSectionHidden\");\n            }\n        },\n\n\n        /**********************************************************************\n         * Canvas Delegates\n         **********************************************************************/\n\n\n\n        /**********************************************************************\n         * DI stuff\n         **********************************************************************/\n\n\n        setController(c) {\n            this.logger.log(3, \"setController\", \"entry\");\n            this.controller = c;\n        },\n\n        setCanvas(c) {\n            this.logger.log(3, \"setCanvas\", \"entry\");\n            this.canvas = c;\n\n        },\n\n        setModelFactory(f) {\n            this.logger.log(3, \"setModelFactory\", \"entry\");\n            this.factory = f;\n        },\n\n        setModel(m) {\n            this.model = this.createInheritedModel(m);\n            this.modelName = m.name\n            this.renderToolbar();\n            this.render();\n        },\n\n        setAnnotation(a) {\n            this.logger.log(-1, \"setAnnotation\", \"enter > # \");\n            this.annotation = a;\n        },\n\n        setTest(t) {\n            this.logger.log(2, \"setTest\", \"enter > # \");\n            this.testSettings = t;\n        },\n\n        setEvents(events) {\n            this.logger.log(2, \"setEvents\", \"enter > # \" + events.length);\n            this.events = events;\n        },\n\n        setMode(mode) {\n            this.logger.log(2, \"setMode\", \"entry > '\" + mode + \"'\");\n            this.mode = mode;\n            this.onModeChange();\n        },\n\n\n        onModeChange() {\n\n        },\n\n\n        /********************************************************\n         * Helper\n         ********************************************************/\n\n        setSelectedViewButton() {\n        },\n\n        createRing(lbl, help, distCallBack) {\n\n            var bgColor = \"#cecece\";\n            var settings = this.canvas.getSettings();\n            if (settings.canvasTheme == \"MatcDark\") {\n                bgColor = \"#777\";\n            }\n            var ring = this.$new(Ring, { size: 100, width: 5, backgroundColor: bgColor, color: \"#365fff\", color2: \"#83b600\", color3: \"#ffa713\" });\n            ring.setDomSize(120, 120);\n            ring.setLabel(lbl);\n\n            if (distCallBack) {\n                ring.setAction(\"mdi mdi-chart-bar\");\n                this.tempOwn(ring.on(\"action\", lang.hitch(this, distCallBack)));\n            }\n\n            if (help) {\n                ring.setHelp(true);\n                this.tempOwn(ring.on(\"help\", lang.hitch(this, \"showHelpDialog\", help)));\n            }\n\n            css.add(ring.domNode, \"MatcMarginTop\");\n            return ring;\n        },\n\n        createToolBarItem(label, callback, icon, parent) {\n            var a = document.createElement(\"div\");\n            css.add(a, \"MatcToolbarItem MatcToolbarPrimaryItem\");\n\n            if (icon) {\n                var i = document.createElement(\"span\");\n                css.add(i, icon);\n                a.appendChild(i);\n            }\n\n            // var lbl = document.createElement(\"label\");\n            // css.add(lbl, \"MatcToolbarLabel\");\n            // lbl.innerHTML =label;\n            // a.appendChild(lbl);\n\n\n            if (callback) {\n                this.tempOwn(on(a, touch.press, lang.hitch(this, callback)));\n            }\n            if (!parent) {\n                this.properties.appendChild(a);\n            } else {\n                parent.appendChild(a);\n            }\n\n            return a;\n        },\n\n\n        createInput(content, placeholder) {\n\n            var div = document.createElement(\"div\");\n            css.add(div, \"MatcToolbarItem\");\n            content.appendChild(div);\n\n            let input = document.createElement(\"input\");\n            input.disabled = true;\n            css.add(input, \"MatcIgnoreOnKeyPress MatcToobarInput  MatcToobarInlineEditDisabled\");\n            div.appendChild(input);\n\n            if (placeholder) {\n                input.placeholder = placeholder;\n            }\n            return input;\n        },\n\n        createContent(parent) {\n            var content = document.createElement(\"div\");\n            css.add(content, \"MatcToolbarSectionContent\");\n            parent.appendChild(content);\n            return content;\n        },\n\n        createSection(lbl, parentNode, canBeHidden = true) {\n\n            const parent = document.createElement(\"div\");\n            css.add(parent, \"MatcToolbarSection\");\n\n            const header = this.createSectionHeader(parent, lbl);\n\n            /**\n             * store the value somehow in a cookie? and use it during restore??\n             */\n            this.own(on(header, touch.press, () => {\n                css.toggle(parent, \"MatcToolbarSectionCollabsed\");\n                return false;\n            }));\n\n            if (canBeHidden) {\n                this.sections.push(parent);\n            }\n            parentNode.appendChild(parent);\n            return parent;\n        },\n\n        createSectionHeader(parent, lbl, hasTemplateMarker) {\n            var div = document.createElement(\"div\");\n            css.add(div, \"MatcToolbarSectionLabel\");\n            parent.appendChild(div);\n\n            div.innerHTML = lbl;\n\n            if (hasTemplateMarker) {\n                var span = document.createElement(\"span\");\n                css.add(span, \"MatcToolbarSectionMarker\");\n                span.innerHTML = \" *\";\n                div.appendChild(span);\n            }\n\n            var chev = document.createElement(\"span\");\n            css.add(chev, \"MatcToolbarSectionChevron mdi mdi-chevron-down\");\n            div.appendChild(chev);\n\n            return div;\n        },\n\n\n\n        createBigNumber(db, cntr, label, help) {\n            var numberCntr = db.div(\"MatcToolBarNumberCntr MatcMarginTop\").build(cntr);\n            let l = db.div(\"MatcDashLabel\", label).build(numberCntr);\n            var main = db.div(\"MatcToolbarBigLabel\").build(numberCntr);\n            var little = db.div(\"MatcToolbarDetailLabel\").build(numberCntr);\n            if (help) {\n                var node = db.span(\"mdi mdi-help-circle MatcHelpIcon\").build(l);\n                this.tempOwn(on(node, touch.press, lang.hitch(this, \"showHelpDialog\", help)));\n            }\n\n            return [main, little];\n        },\n\n\n        /********************************************************\n         * Main menu handlers\n         ********************************************************/\n\n        onExit() {\n            this.logger.log(0, \"onExit\", \"entry\", this.isPublic);\n            if (this.isPublic) {\n                hash(\"#/examples/\" + this.model.id + \"/design.html\");\n            } else {\n                hash(\"#/apps/\" + this.model.id + \"/design.html\");\n            }\n        },\n\n        onShare() {\n            this.logger.log(0, \"onShare\", \"entry\");\n        },\n\n        /********************************************************\n         * Selection handlers!\n         ********************************************************/\n\n        onWidgetSelected(widget) {\n            this.logger.log(2, \"onWidgetSelected\", \"entry\");\n\n            /**\n             * We might want to blur some stuff\n             */\n            if (this._selectedWidget && this._selectedWidget.id != widget.id) {\n                this.logger.log(3, \"onWidgetSelected\", \"exit > no new selection!\");\n                this.blurWidgetProperties();\n            }\n\n\n            this.cleanUp();\n\n\n            this._selection = \"widget\";\n            this._selectedWidget = widget;\n            this.showWidgetProperties(widget);\n\n\n            this.logger.log(3, \"onWidgetSelected\", \"exit\");\n        },\n\n\n        onScreenSelected(screen) {\n            this.logger.log(-1, \"onScreenSelected\", \"entry\", this._selectedScreen);\n\n            /**\n             * We don not want to rerender on scroll\n             */\n            if (this._selectedScreen && this._selectedScreen.id == screen.id) {\n                this.logger.log(3, \"onScreenSelected\", \"exit > no new selection!\");\n                return;\n            }\n\n            this.cleanUp();\n            this._selection = \"screen\";\n            this._selectedScreen = screen;\n            this.showScreenProperties(screen);\n\n\n            this.logger.log(4, \"onScreenSelected\", \"exit\");\n        },\n\n\n\n\n        onLineSelected(line) {\n            this.cleanUp();\n            this._selection = \"line\";\n            this._selectedLine = line;\n        },\n\n\n\n        onMultiSelect(selection) {\n            this.cleanUp();\n\n            this._selection = \"multi\";\n            this._selectedMulti = selection;\n        },\n\n        onGroupSelect(group) {\n            this.cleanUp();\n            this._selection = \"group\";\n            this._selectedGroup = group;\n            this.showGroupProperties(group);\n        },\n\n\n\n        onCanvasSelected() {\n            this.cleanUp();\n            this.hideProperties();\n        },\n\n\n        /**\n         * method which will update all properties. method is called from controller!\n         */\n        updatePropertiesView() {\n\n            if (this._selectedWidget) {\n                this.onWidgetSelected(this._selectedWidget);\n            }\n        },\n\n\n\n        /********************************************************\n         * Player\n         ********************************************************/\n\n        showSession(session, e) {\n          \n            const sessionID = session.session;\n            const dialog = new Dialog();\n\n            const db = new DomBuilder();\n\n            const div = db.div(\"MatcDialog MatcPlayerDialog \").build();\n            const cntr = db.div(\"\").build(div);\n\n            dialog.onOpen(() => {\n                if (this.isPublic) {\n                    Promise.all([\n                        this.modelService.findPublicTagAnnotations(this.model.id),\n                        this.modelService.findPublicMouseBySession(this.model.id, sessionID)\n                    ]).then(values => {\n                        this._showSession(sessionID, cntr, dialog, values);\n                    });\n                } else {\n                    Promise.all([\n                        this.modelService.findTagAnnotations(this.model.id),\n                        this.modelService.findMouseBySession(this.model.id, sessionID)\n                    ]).then(values => {\n                        this._showSession(sessionID, cntr, dialog, values);\n                    });\n                }\n            })\n\n            dialog.popup(div, e.target);\n        },\n\n        _showSession(sessionID, cntr, dialog, data) {\n\n            try {\n                const mouse = data[1];\n\n                const df = new DataFrame(this.events);\n                df.sortBy(\"time\");\n                const sessionGroup = df.groupBy(\"session\");\n                const events = sessionGroup.get(sessionID);\n\n                const player = this.$new(VideoPlayer);\n                player.setDialog(dialog)\n                player.placeAt(cntr);\n                player.setModel(this.model);\n                player.setTestSettings(this.testSettings)\n                player.setMouse(mouse);\n                player.setMouse(mouse);\n                player.setSession(events, sessionID);\n\n\n                dialog.own(on(dialog, \"close\", function () {\n                    player.destroy();\n                }));\n            } catch (e) {\n                console.error(e);\n            }\n        },\n\n        _getSessionAnnotation(annotations, appID) {\n\n            if (annotations.length > 1) {\n                /**\n                 * This should not happen, but we have seen it happeing. We delete this now...\n                 */\n                for (let i = 1; i < annotations.length; i++) {\n                    var a = annotations[i];\n                    this._doDelete(\"rest/annotations/apps/\" + appID + \"/\" + a.id + \".json\");\n                }\n            }\n\n            if (annotations.length >= 1) {\n                return annotations[0];\n            } else {\n                //console.debug(\"Create Tag annotation...\");\n                return {\n                    appID: appID,\n                    type: \"tags\",\n                    reference: \"\",\n                    sessions: {}\n                };\n            }\n        },\n\n        /********************************************************\n         * Show Settings\n         ********************************************************/\n\n\n        onShowSettings(e) {\n\n            var db = new DomBuilder();\n\n            db = new DomBuilder();\n            var popup = db.div(\"MatcDialog MatcHeaderDialog MatcPadding\").build();\n\n            var cntr = db.div(\"\").build(popup);\n\n            var settings = this.canvas.getSettings();\n\n\n            /**\n             * Themes\n             */\n            db.label(\"\", \"Theme :\").build(cntr);\n            var themeList = this.$new(RadioBoxList);\n            themeList.setOptions([\n                { value: \"MatcDark\", label: \"Dark\" },\n                { value: \"MatcLight\", label: \"Light\" }\n            ]);\n            themeList.setValue(settings.canvasTheme);\n            themeList.placeAt(cntr);\n\n\n\n            /**\n             * Mouse Wheel\n             */\n            db.label(\"MatcMarginTop\", \"Mouse Wheel / Touchpad Scroll :\").build(cntr);\n            var mouseWheelList = this.$new(RadioBoxList);\n            mouseWheelList.setOptions([\n                { value: \"scroll\", label: \"Scroll Canvas\" },\n                { value: \"zoom\", label: \"Zoom Canvas\" }\n            ]);\n            mouseWheelList.setValue(settings.mouseWheelMode);\n            mouseWheelList.placeAt(cntr);\n\n\n            var bar = db.div(\"MatcButtonBar MatcMarginTopXL\").build(popup);\n            var save = db.a(\"MatcButton MatcButtonPrimary\", \"Save\").build(bar);\n            var cancel = db.a(\" MatcLinkButton \", \"Cancel\").build(bar);\n\n\n\n            var dialog = new Dialog();\n            dialog.own(on(cancel, touch.press, lang.hitch(dialog, \"close\")));\n            dialog.own(on(save, touch.press, lang.hitch(this, \"onSaveSettings\", dialog, themeList, mouseWheelList)));\n\n            dialog.popup(popup, e.target);\n\n            this.canvas.enableMouseZoom(false);\n            this.canvas.setState(\"simulate\");\n\n            this.logger.log(0, \"onShowSettings\", \"exit > \");\n        },\n\n        onSaveSettings(dialog, themeList, mouseWheelList) {\n            var settings = {\n                canvasTheme: themeList.getValue(),\n                mouseWheelMode: mouseWheelList.getValue()\n            };\n\n            this.canvas.setSettings(settings);\n            this.canvas.enableMouseZoom(true);\n            dialog.close();\n        },\n\n\n        /********************************************************\n         * SignUp\n         ********************************************************/\n\n\n        showSignUpDialog(e) {\n\n            var d = new Dialog();\n\n            var db = new DomBuilder();\n\n            var div = db.div(\"MatcDialog \").build();\n\n\n            this._createSignUpForm(d, div);\n\n            d.popup(div, e.target);\n        },\n\n\n        _createSignUpForm(d, div) {\n            let f = this.$new(Form);\n            f.render([\n                {\n                    label: \"Email\",\n                    name: \"email\",\n                    type: \"text\",\n                    required: \"true\",\n                    placeholder: \"Your email\",\n                    css: \"input-lg MatcIgnoreOnKeyPress\",\n                    error: \"We need your email.\"\n                },\n                {\n                    label: \"Password\",\n                    name: \"password\",\n                    type: \"password\",\n                    min: 6,\n                    placeholder: \"Your password\",\n                    css: \"input-lg MatcIgnoreOnKeyPress\",\n                    error: \"The password should have at least six characters.\"\n                },\n                {\n                    label: 'I have read the <a href=\"#/termsofservice.html\" target=\"_blank\">terms of service</a>',\n                    name: \"tos\",\n                    type: \"check\",\n                    required: \"true\",\n                    css: \"MatcFormCheckBox MatcIgnoreOnKeyPress\",\n                    error: \"You must accept the terms of service!\"\n                }\n            ], [\n                { label: \"Cancel\", css: \"MatcLinkButton\", click: lang.hitch(d, \"close\") },\n                { label: \"Create Free Account\", css: \"MatcButton MatchButtonGreen\", click: lang.hitch(this, \"_signUpAndNew\", d, f) }\n            ]);\n\n            f.placeAt(div);\n            f.startup();\n\n            return f;\n        },\n\n        _signUpAndNew(dialog, form, data) {\n\n            var valid = form.validateForm(null, true);\n\n            if (valid) {\n\n                result = this._doPost(\"rest/user\", data);\n\n                if (result.type == \"error\") {\n                    if (result.errors.indexOf(\"user.email.not.unique\") >= 0) {\n                        form.showError(\"The email is already taken! Please enter another one!\", \"email\");\n                    } else {\n                        form.showError(\"Something went wrong! Please try again!\", \"\");\n                    }\n\n                    dialog.shake();\n                } else {\n                    dialog.close();\n\n                    var result = this._doPost(\"rest/login/\", data);\n                    if (result.type != \"error\") {\n\n                        window.location.href = \"/my-account.html\";\n\n                    } else {\n                        console.error(\"_signUpAndSave() > Could not sign in user\");\n                    }\n                }\n            } else {\n                dialog.shake();\n            }\n        }\n    },\n    mounted() {\n        this.db = new DomBuilder();\n    }\n}\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticToolbarRender.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticToolbarRender.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./AnalyticToolbarRender.vue?vue&type=template&id=45385725\"\nimport script from \"./AnalyticToolbarRender.vue?vue&type=script&lang=js\"\nexport * from \"./AnalyticToolbarRender.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\n<template>\n     <div class=\"MatcToolbar MatcAnalyticsToolbar MatcLayerListVisible\">\n\n\t\t<div class=\"MatcToolbarLayerList MatcToolbarAnalyticList MatcToobarPropertiesSection\" :style=\"'width:'+ layerListWidth +'px'\">\n\t\t\t<div class=\"MatcToolbarLayerListCntr\" data-dojo-attach-point=\"testListCntr\">\n\t\t\t\t\t\t\t\n\t\t\t</div>\n\t\t\t<div class=\"MatcToolbarLayerListDND\" ref=\"dndHanlde\" @mousedown.stop=\"onResizeStart\"></div>\n\t\t</div>\n\n\t\t<div class=\"MatcToolbarTop \">\n\t\t\t<div class=\"MatcToolbarTopHome\" :style=\"'width:'+ layerListWidth +'px'\">\n\t\t\t\t<HomeMenu @select=\"onHomeMenu\"  :name=\"modelName\" />\n\t\t\t</div>\n\n\t\t\t<div class=\"MatcToolbarTopCntr\" :style=\"'width:calc(100% - '+ layerListWidth +'px)'\" >\n\t\t\t\t<div class=\"MatcToolbarSection MatcToolbarTopLeft\">\n<!-- \n\t\t\t\t\t<div :class=\"['MatcToolbarItem MatcToolbarPrimaryItem', {'MatcToolbarItemSelected': mode === 'edit'} ]\" data-dojo-attach-point=\"editBtn\"  @click=\"onEdit\">\n\t\t\t\t\t\t<QIcon icon=\"Edit\" />\n\t\t\t\t\t</div> \n\n\t\t\t\t\t<div :class=\"['MatcToolbarItem MatcToolbarPrimaryItem', {'MatcToolbarItemSelected': mode === 'move'} ]\" data-dojo-attach-point=\"moveBtn\"  @click=\"onMove\">\n\t\t\t\t\t\t<QIcon icon=\"EditMove\" />\n\t\t\t\t\t</div> -->\n\n\t\t\t\t\t<div :class=\"['MatcToolbarItem MatcToolbarPrimaryItem', {'MatcToolbarItemSelected': mode === 'addComment'} ]\" data-dojo-attach-point=\"commentBtn\"  @click=\"onNewComment\">\n\t\t\t\t\t\t<QIcon icon=\"Comment\" />\n\t\t\t\t\t</div>\t\n\t\t\t\t</div>\n\t\t\n\t\t\t\t<div class=\"MatcToolbarTopCenterCntr\">\n\t\t\t\t\t<div class=\"MatcToolbarSection\" data-dojo-attach-point=\"screenSection\">\n\t\t\t\t\t\t<AnalyticViewModeButton @change=\"onChangeViewMode\" v-if=\"events\"/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\n\n\t\t\t\t<div class=\"MatcToolbarNotificationSection MatcToolbarTopRight MatcToolbarSection\" data-dojo-attach-point=\"notificationSection\">\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t<ViewConfig :value=\"canvasViewConfig\" @change=\"onChangeCanvasViewConfig\" :analytic=\"true\"/>\n\t\t\t\t\t<HeatmapToggleButton  :value=\"'Heatmap'\" @change=\"$emit('viewModeChange', $event)\"/>\t\n\t\t\t\t\t<div class=\"MatcToolbarItem\" @click=\"showSharing\">\n\t\t\t\t\t\t<div class=\"MatcToobarPrimaryButton\">\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tShare\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div> \n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"MatcToobarPropertiesSection MatcToolbarSectionHidden\" data-dojo-attach-point=\"propertiesCntr\">\n\t\t</div>\n\n\t</div>\n</template>\n<script>\nimport DojoWidget from 'dojo/DojoWidget'\nimport css from 'dojo/css'\nimport lang from 'dojo/_base/lang'\n\nimport on from 'dojo/on'\nimport touch from 'dojo/touch'\nimport hash from 'dojo/hash'\n\nimport Util from 'core/Util'\nimport _Color from 'common/_Color'\n\nimport Logger from 'common/Logger'\nimport DomBuilder from 'common/DomBuilder'\n\nimport Dialog from 'common/Dialog'\nimport _Tooltip from 'common/_Tooltip'\nimport RadioBoxList from 'common/RadioBoxList'\nimport Form from 'common/Form'\nimport Ring from 'common/Ring'\nimport Histogram from 'dash/Histogram'\nimport Analytics from 'dash/Analytics'\nimport Share from 'page/Share'\n\nimport DataFrame from 'common/DataFrame'\nimport ViewConfig from 'canvas/toolbar/components/ViewConfig'\n// import HelpButton from 'help/HelpButton'\nimport HomeMenu from './AnalyticHomeMenu.vue'\nimport Help from 'help/Help'\nimport QIcon from 'page/QIcon'\nimport AnalyticViewModeButton from './AnalyticViewModeButton'\nimport AnalyticToolbarRender from './AnalyticToolbarRender'\nimport {onStartDND} from '../../util/DND'\nimport HeatmapToggleButton from '../toolbar/components/HeatmapToggleButton.vue'\n//import SessionList from './SessionList'\n\nexport default {\n    name: 'AnalyticToolbar',\n    mixins:[Util,_Color,  _Tooltip, DojoWidget, AnalyticToolbarRender],\n    data: function () {\n        return {\n\t\t\tmode:'',\n\t\t\tmodelName: 'Loading...',\n\t\t\tevents: null,\n\t\t\tmodel: null,\n\t\t\tuser: null,\n\t\t\tvalue: false,\n\t\t\tanalyticMode: \"HeatmapClick\",\n\t\t\tanalyticHeatMapClicks: -1,\n\t\t\tcanvasViewConfig: {},\n\t\t\tlayerListWidth: 256\n        }\n    },\n    components: {\n\t\t\t'ViewConfig': ViewConfig,\n\t\t\t//'HelpButton': HelpButton,\n\t\t\t'HomeMenu': HomeMenu,\n\t\t\t'QIcon': QIcon,\n\t\t\t'AnalyticViewModeButton': AnalyticViewModeButton,\n\t\t\t'HeatmapToggleButton': HeatmapToggleButton\n\t\t\t//'SessionList': SessionList\n\t\t},\n    methods: {\n        postCreate(){\n\t\t\tthis.logger = new Logger(\"AnalyticToolbar\");\n\t\t\tthis.logger.log(2,\"constructor\", \"entry\");\n\t\t\tthis.renderToolbar()\n\t\t\tthis.initLayer()\n\t\t},\n\n\t\tsetCommentService (s) {\n\t\t\tthis.logger.log(3,\"setCommentService\", \"entry\");\n\t\t\tthis.commentService = s\n\t\t},\n\n\t\tonMove (e){\n\t\t\tthis.stopEvent(e);\n\t\t\tthis.canvas.setMode(\"move\");\n\t\t},\n\n\t\tonEdit (e){\n\t\t\tthis.stopEvent(e);\n\t\t\tthis.canvas.setMode(\"edit\");\n\t\t},\n\n\t\n\t\tshowHelpDialog(helpID){\n\t\t\tif (this.$refs.helpBtn) {\n\t\t\t\tthis.$refs.helpBtn.show('analytics.canvas', helpID)\n\t\t\t}\n\t\t},\n\n\t\tonHomeMenu (option, e) {\n\t\t\tthis.logger.log(1,\"onHomeMenu\", \"entry\", e);\n\t\t\tif (this[option.value]) {\n\t\t\t\tthis[option.value](e)\n\t\t\t}\n\t\t},\n\n\t\tonChangeViewMode (option) {\n\t\t\tthis.logger.log(-1,\"onChangeViewMode\", \"entry\", option);\n\t\t\tif (this[option]) {\n\t\t\t\tthis[option]()\n\t\t\t}\n\t\t},\n\n\t\tshowHelp(e) {\n\t\t\tlet dialog = new Dialog()\n\t\t\tvar db = new DomBuilder();\n\t\t\tlet popup = db.div(\"MatcDialog MatcHelpDialog MatcPadding\").build();\n\t\t\tdialog.popup(popup, e.target);\n\t\t\tlet help = this.$new(Help)\n\t\t\thelp.placeAt(popup)\n\t\t},\n\n\n\t\tonNewComment(e){\n\t\t\tthis.logger.log(2,\"onNewComment\", \"entry\");\n\t\t\tthis.stopEvent(e);\n\t\t\tthis.emit(\"newComment\", {\"type\" : \"comment\", \"event\" : e});\n\t\t},\n\n\t\tsetAnalyticMode(mode, params, callback){\n\t\t\tthis.logger.log(2,\"setAnalyticMode\", \"entry > mode: \" + mode);\n\t\t\tthis.analyticMode = mode;\n\t\t\tthis.analyticModeCallback = callback\n\t\t\tif (!callback) {\n\t\t\t\tconsole.warn(\"setAnalyticMode() called with callback\", this.mode)\n\t\t\t}\n\t\t\tif(this.canvas){\n\t\t\t\tthis.canvas.setAnalyticMode(mode, params);\n\t\t\t}\n\t\t\tthis.hideProperties();\n\t\t},\n\n\t\tonCanvasSelected () {\n\t\t\tthis.logger.log(-2,\"onCanvasSelected\", \"entry > mode: \" + this.analyticMode);\n\n\t\t\tif (this.analyticMode === \"HeatmapClick\") {\n\t\t\t\tthis.hideAllSections()\n\t\t\t\tthis.showHeatMapProperties()\n\t\t\t}\n\t\t},\n\n\t\treRenderAnalyticMode () {\n\t\t\tthis.logger.log(-2,\"reRenderAnalyticMode\", \"entry\", this.analyticMode);\n\t\t\tif (this.analyticModeCallback){\n\t\t\t\tthis.analyticModeCallback()\n\t\t\t} else {\n\t\t\t\tthis.logger.error(\"reRenderAnalyticMode\", \"No callback\");\n\t\t\t}\n\t\t},\n\n\t\tsetModelService (s) {\n\t\t\tthis.modelService = s\n\t\t\tsetTimeout(lang.hitch(this, \"initMouseData\"), 500);\n\t\t},\n\n\t\tsetPublic(p){\n\t\t\tthis.isPublic = p;\n\t\t\tif(p){\n\t\t\t\t// css.remove(this.signupSection, \"MatcToolbarSectionHidden\");\n\t\t\t}\n\t\t},\n\n\t\tsetCanvasViewConfig (viewConfig) {\n\t\t\tthis.canvasViewConfig = viewConfig\n\t\t},\n\n\t\tonChangeCanvasViewConfig (key, value) {\n\t\t\tif (this.canvas) {\n\t\t\t\tthis.canvas.setCanvasViewConfig(key, value)\n\t\t\t}\n\t\t},\n\n\t\tsetUser(u) {\n\t\t\tthis.user = u\n\t\t},\n\n\t\tasync initMouseData(){\n\t\t\tthis.logger.log(2,\"initMouseData\", \"entry\");\n\t\t\tif(this.isPublic){\n\t\t\t\t//this._doGet(\"/examples/mouse/\" + this.model.id + \".json\", lang.hitch(this,\"setMouseData\"));\n\t\t\t\tlet res = await this.modelService.findPublicMouse(this.model.id)\n\t\t\t\tthis.setMouseData(res)\n\t\t\t} else {\n\t\t\t\tlet res = await this.modelService.findMouse(this.model.id)\n\t\t\t\tthis.setMouseData(res)\n\t\t\t\t//this._doGet(\"rest/mouse/\" + this.model.id + \".json\", lang.hitch(this,\"setMouseData\"));\n\t\t\t}\n\t\t},\n\n\t\tsetMouseData(data){\n\t\t\tthis.logger.log(2,\"setMouseData\", \"entry >\"  +data.length);\n\t\t\tthis.mouseData = data;\n\t\t},\n\n\n\t\tasync showSharing(e) {\n\t\t\tthis.logger.log(-1, \"showSharing\", \"entry > \", this.isPublic);\n\n\t\t\tconst invitation = await this.modelService.findInvitation(this.model.id)\n\t\t\tconst temp = {};\n\t\t\tfor (let key in invitation) {\n\t\t\t\ttemp[invitation[key]] = key;\n\t\t\t}\n\n\t\t\tconst db = new DomBuilder();\n\t\t\tconst popup = db.div(\"MatcDialog MatcInfitationDialog MatcInfitationDialogLarge MatcPadding\").build();\n\t\t\tconst cntr = db.div(\"container\").build(popup);\n\t\t\tlet row = db.div(\"row\").build(cntr);\n\t\t\tlet right = db.div(\"col-md-12\").build(row);\n\t\t\tdb.h3(\"\", this.getNLS(\"share.Headline\")).build(right);\n\n\t\t\tconst share = this.$new(Share)\n\t\t\tshare.placeAt(right)\n\t\t\tshare.setInvitation(temp[1])\n\t\t\tshare.setPublic(this.isPublic)\n\n\t\t\trow = db.div(\"row MatcMarginTop\").build(cntr);\n\t\t\tright = db.div(\"col-md-12 MatcButtonBar\").build(row);\n\n\t\t\tconst write = db.div(\"MatcButton MatcButtonPrimary\", \"Close\").build(right);\n\n\t\t\tconst d = new Dialog();\n\t\t\td.own(on(write, touch.press, lang.hitch(d, \"close\")));\n\t\t\td.popup(popup, e.target);\n\t\t},\n\n\t\t/**********************************************************************\n\t\t * Layer List Width\n\t\t **********************************************************************/\n\n\t\tonResizeStart (e) {\n            const pos = this.layerListWidth\n            onStartDND(e, d => {\n\t\t\t\tlet width = pos + d.x\n\t\t\t\t// if (Math.abs(256 - width) < 5) {\n\t\t\t\t// \twidth = 256\n\t\t\t\t// }\n                this.layerListWidth = Math.min(Math.max(196, width), 400)\n\t\t\t\tlocalStorage.setItem('quxLayerListWidth', this.layerListWidth)\n\t\t\t\tthis.setLayerListWidth(this.layerListWidth)    \n            })\n        },\n\n\t\tinitLayer (){\n\t\t\tthis.logger.log(-2,\"initLayer\", \"entry\");\n\t\t\tconst w = localStorage.getItem('quxLayerListWidth')\n\t\t\tif (w && !isNaN(w * 1)) {\n\t\t\t\tthis.setLayerListWidth( w * 1)\t\t\t\t\n\t\t\t}\n\t\t},\n\n   \t\tsetLayerListWidth(w) {\n\t\t\tthis.layerListWidth = w\n\t\t\tif (this.canvas) {\n\t\t\t\tthis.canvas.setLayerListWidth(w)\n\t\t\t}\n\t\t},\n\n\n\t\t/**********************************************************************\n\t\t * Callbacks to canvas\n\t\t **********************************************************************/\n\n\n\t\tshowClickHeatMap(){\n\t\t\tthis.logger.log(-2,\"showClickHeatMap\", \"entry > \" + this.analyticHeatMapClicks);\n\t\t\tthis.setAnalyticMode(\"HeatmapClick\", {\n\t\t\t\t\tnumberOfClicks : this.analyticHeatMapClicks,\n\t\t\t\t\tsessions: this.getSelectedSessions(),\n\t\t\t\t}, \n\t\t\t\t() => this.showClickHeatMap()\n\t\t\t);\n\t\t\tthis.showHeatMapProperties();\n\t\t},\n\n\t\tshowFirstClickHeatMap(i){\n\t\t\tthis.logger.log(-1,\"showFirstClickHeatMap\", \"entry > \"+ i);\n\t\t\tthis.analyticHeatMapClicks = i;\n\t\t\tthis.setHeatMapLabel(i)\n\t\t\tif (i === 'mouse') {\n\t\t\t\tthis.showMouseHeatMap()\n\t\t\t} else {\t\t\n\t\t\t\tthis.setAnalyticMode(\"HeatmapClick\",{\n\t\t\t\t\tnumberOfClicks : this.analyticHeatMapClicks,\n\t\t\t\t\tsessions: this.getSelectedSessions()\n\t\t\t\t} , () => this.showFirstClickHeatMap(i));\n\t\t\t}\n\t\t},\n\n\t\tshowMouseHeatMap(){\n\t\t\tthis.logger.log(-2,\"showMouseHeatMap\", \"entry\");\n\t\t\tif(!this.mouseData){\n\t\t\t\tthis.canvas.showHint(\"Loading data...\");\n\t\t\t\tif(this.isPublic){\n\t\t\t\t\tthis._doGet(\"/examples/mouse/\" + this.model.id + \".json\", lang.hitch(this,\"_onMouseDataLoaded\"))\n\t\t\t\t} else {\n\t\t\t\t\tthis._doGet(\"rest/mouse/\" + this.model.id + \".json\", lang.hitch(this,\"_onMouseDataLoaded\"))\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.canvas.setMouseData(this.mouseData);\n\t\t\t\tthis.setAnalyticMode(\"HeatmapMouse\", {\n\t\t\t\t\tsessions: this.getSelectedSessions()\n\t\t\t\t}, () => this.showMouseHeatMap());\n\t\t\t}\n\t\t\tthis.showHeatMapProperties();\n\t\t},\n\n\n\t\t_onMouseDataLoaded(data){\n\t\t\tthis.logger.log(2,\"_onMouseDataLoaded\", \"entry >\"  +data.length);\n\t\t\tthis.mouseData = data;\n\t\t\tthis.canvas.setMouseData(this.mouseData);\n\t\t\tthis.setAnalyticMode(\"HeatmapMouse\", {\n\t\t\t\tsessions: this.getSelectedSessions()\n\t\t\t}, () => this.showMouseHeatMap());\n\t\t},\n\n\t\n\t\tshowViewMap(){\n\t\t\tthis.logger.log(2,\"showViewMap\", \"entry\");\n\t\t\tthis.setAnalyticMode(\"HeatmapViews\", {\t\t\n\t\t\t\tsessions: this.getSelectedSessions()\n\t\t\t}, () => this.showViewMap());\n\t\t},\n\n\t\tshowDropOff () {\n\t\t\tthis.logger.log(-1,\"showDropOff\", \"entry\");\n\t\t\tthis.showDropOffProperties()\n\t\t},\n\n\t\tshowUserJourney(){\n\t\t\tthis.logger.log(-1,\"showUserJourney\", \"entry > \");\t\n\t\t\tconst params = {\n\t\t\t\tsessions: this.getSelectedSessions(),\n\t\t\t\ttime: this.sessionTimeCheckBox.getValue(),\n\t\t\t\tcolor : this.sessionLineColor.getValue(),\n\t\t\t\ttree: this.sessionTreeCheckBox.getValue(),\n\t\t\t\ttask: this.sessionTaskBtn.getValue(),\n\t\t\t\ttaskColor: this.sessionTaskLineColor.getValue(),\n\t\t\t\toutlier: this.sessionOutlierCheckbox.getValue(),\n\t\t\t\toutlierColor: this.sessionOutlierColor.getValue()\n\t\t\t};\n\t\t\tthis.setAnalyticMode(\"UserJourney\",params, () => this.showUserJourney());\n\t\t\tthis.showSessionProperties();\n\t\t},\n\n\n\n\t\tshowGestureMap(){\n\t\t\tthis.logger.log(2,\"showGestureMap\", \"entry > \");\t\n\t\t\tthis.setAnalyticMode(\"Gesture\", {\n\t\t\t\tcolor: this.gestureLineColor.getValue(),\n\t\t\t\tsessions: this.getSelectedSessions()\n\t\t\t}, () => this.showGestureMap());\n\t\t\tthis.showGestureProperties();\n\t\t},\n\n\n\t\tshowScreenMode () {\n\t\t\tconst newMode = this.screenModeRadioList.getValue()\n\t\t\tthis.setAnalyticMode(newMode, {\n\t\t\t\tsessions: this.getSelectedSessions()\n\t\t\t}, () => this.showScreenMode());\n\t\t\tcss.remove(this.screenModeDiv, \"MatcToolbarSectionHidden\")\n\t\t\tthis.logger.log(-1,\"showScreenMode\", \"exit > \", newMode);\n\t\t}, \n\t\t\n\t\tchangeScreenMode (m) {\n\t\t\tthis.logger.log(0,\"changeScreenMode\", \"entry > \", m);\n\t\t},\n\n\t\t/*****************************************************************************************************\n\t\t * Dialogs\n\t\t ****************************************************************************************************/\n\n\n\n\t\tshowDwellDistribution(e){\n\t\t\tthis.logger.log(0,\"showDwellDistribution\", \"entry > \" );\n\n\t\t\tif(this._selectedScreen){\n\n\t\t\t\tvar df = new DataFrame(this.events);\n\t\t\t\tvar analytics  = new Analytics();\n\t\t\t\tvar screenTimeGrouping = analytics.getScreenTimeGrouping(df);\n\t\t\t\tvar dwellTimes = screenTimeGrouping.get(this._selectedScreen.id);\n\n\t\t\t\tif(dwellTimes){\n\n\t\t\t\t\tvar db = new DomBuilder();\n\t\t\t\t\tvar dialog = new Dialog();\n\t\t\t\t\tvar d = db.div(\"MatcPadding DashTaskListDetailsDialog\").build();\n\n\t\t\t\t\tdb.h2(\"MatcDialogTitle\", \"Dwell Time Distribution &quot\" + this._selectedScreen.name + \"&quot\").build(d);\n\n\t\t\t\t\tvar cntr = db.div(\"DashTaskListDialogHist\").build(d);\n\n\t\t\t\t\tvar duration_dist = dwellTimes.hist(null, 10);\n\n\t\t\t\t\tvar hist = this.$new(Histogram);\n\t\t\t\t\thist.setFormTo(function(v){\n\t\t\t\t\t\treturn Math.round(v/1000) + \" sec\";\n\t\t\t\t\t});\n\t\t\t\t\thist.onHover(function(bucket){\n\t\t\t\t\t\treturn  Math.round(bucket.from/1000) + \" - \"  + Math.round(bucket.to/1000) + \" sec (\" +bucket.count + \" x)\" ;\n\t\t\t\t\t});\n\t\t\t\t\thist.setValue(duration_dist, dwellTimes.mean());\n\t\t\t\t\thist.placeAt(cntr);\n\n\t\t\t\t\tdialog.popup(d, e.target);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\n\n\t\t/*****************************************************************************************************\n\t\t * properties view\n\t\t ****************************************************************************************************/\n\n\t\tshowGestureProperties(){\n\t\t\tthis.logger.log(1,\"showGestureProperties\", \"entry > \");\n\t\t\tthis.showProperties();\n\t\t\tcss.remove(this.gestureOptionsDiv, \"MatcToolbarSectionHidden\");\n\t\t},\n\n\n\t\tshowWidgetProperties(model){\n\t\t\tthis.logger.log(1,\"showWidgetProperties\", \"entry > \" + model.id + \" \" + model.name);\n\t\t\tthis.showProperties();\n\n\t\t\tcss.remove(this.widgetNameDiv, \"MatcToolbarSectionHidden\");\n\t\t\tthis.widgetName.value = model.name;\n\n\t\t\tconst data = this.canvas.getWidgetData(model);\n\n\t\t\tif(data[model.id]){\n\t\t\t\tconst widgetData = data[model.id];\n\n\t\t\t\tthis.widgetClickRing.setPs(widgetData.clicksRel);\n\t\t\t\tthis.widgetClickRing.setValue(widgetData.clicksAbs);\n\n\t\t\t\t// vs firstClicksRelApp\n\t\t\t\tif(isNaN(widgetData.firstClicksRelScreen)){\n\t\t\t\t\twidgetData.firstClicksRelScreen = 0;\n\t\t\t\t}\n\t\t\t\tthis.widgetFirstClickRing.setPs(widgetData.firstClicksRelScreen);\n\t\t\t\tthis.widgetFirstClickRing.setValue(widgetData.firstClicksAbs);\n\n\n\t\t\t\tthis.setTextContent(this.widgetDiscoverSTDLabel, \"+/-\" + Math.round(widgetData.discoverTimeStd / 1000) + \"s\")\n\t\t\t\tthis.setTextContent(this.widgetDiscoverLabel, Math.round(widgetData.discoverTimeAbs / 1000) + \"s\");\n\t\t\t}\n\t\t},\n\n\n\n\t\tshowScreenProperties(model){\n\t\t\tthis.logger.log(-1,\"showScreenProperties\", \"entry\");\n\t\t\tthis.showProperties();\n\n\t\t\tcss.remove(this.screenNameDiv, \"MatcToolbarSectionHidden\");\n\n\t\t\tthis.screenName.value = model.name;\n\n\t\t\tvar times;\n\t\t\tvar views;\n\t\t\tvar clicks;\n\t\t\tvar widgetClicks;\n\t\t\tvar screenTests;\n\t\t\tif(!model.style.overlay){\n\t\t\t\ttimes = this.canvas.getScreenDwellTime();\n\t\t\t\tviews = this.canvas.getScreenViews();\n\t\t\t\tclicks = this.canvas.getScreenClicks();\n\t\t\t\twidgetClicks = this.canvas.getScreenWidgetClicks();\n\t\t\t\tscreenTests = this.canvas.getScreenTests();\n\t\t\t} else {\n\t\t\t\ttimes = this.canvas.getOverlayDwellTime();\n\t\t\t\tviews = this.canvas.getOverlayViews();\n\t\t\t\tclicks = this.canvas.getOverlayClicks();\n\t\t\t\twidgetClicks = this.canvas.getOverlayWidgetClicks();\n\t\t\t\tscreenTests = this.canvas.getOverlayTest();\n\t\t\t}\n\n\t\t\tvar time =times.times[model.id];\n\t\t\tif(!time){\n\t\t\t\ttime = 0;\n\t\t\t}\n\n\n\t\t\tvar sClick = clicks.clicks[model.id];\n\t\t\tvar wClicks = widgetClicks.clicks[model.id];\n\n\t\t\tvar totalClicksOnScreen = sClick + wClicks;\n\t\t\tvar avgDwell = (time /times.sessions) ;\n\n\t\t\tvar count =views.counts[model.id];\n\t\t\tif(!count){\n\t\t\t\tcount = 0;\n\t\t\t}\n\n\t\t\tvar tests = screenTests.counts[model.id];\n\t\t\tif(!tests){\n\t\t\t\ttests = 0;\n\t\t\t}\n\n\n\t\t\tthis.screenTotalViewRing.setValue(count);\n\t\t\tthis.screenTotalViewRing.setPs((count / views.total));\n\n\t\t\t//(count / times.sessions)\n\t\t\tthis.screenTestRing.setValue(tests);\n\t\t\tthis.screenTestRing.setPs((tests / screenTests.sessions));\n\n\n\t\t\tthis.screenClickRing.setPs(sClick / totalClicksOnScreen);\n\t\t\tthis.screenClickRing.setValue(sClick);\n\n\n\t\t\tthis.screenWidgetClickRing.setPs(wClicks / totalClicksOnScreen);\n\t\t\tthis.screenWidgetClickRing.setValue(wClicks);\n\n\n\t\t\tthis.screenDwellRing.setPs(time / times.total);\n\t\t\tthis.screenDwellRing.setValue(Math.round( avgDwell / 1000) + \"s\");\n\n\n\t\t},\n\n\n\t\tshowSessionProperties(){\n\t\t\tthis.logger.log(1,\"showSessionProperties\", \"entry\");\n\t\t\tthis.showProperties();\n\n\t\t\t// css.remove(this.sessionDiv, \"MatcToolbarSectionHidden\");\n\t\t\tcss.remove(this.sessionOptionsDiv, \"MatcToolbarSectionHidden\");\n\t\n\n\t\t\tif (this.sessionTreeCheckBox.getValue()){\n\t\t\t\tcss.add(this.sessionTaskCntr, \"MatcToolbarSectionHidden\")\n\t\t\t\tcss.add(this.sessionLineColor.domNode, \"hidden\");\n\t\t\t\tcss.add(this.sessionTaskBtn.domNode, \"hidden\");\n\t\t\t\tcss.remove(this.sessionShowDiv, 'MatcToolbarSectionHidden')\n\t\t\t\t// css.add(this.sessionTaskLineColor.domNode, \"hidden\");\n\t\t\t\tcss.add(this.sessionLineColor.domNode, \"hidden\");\n\t\t\t\tcss.add(this.sessionOutlierDiv, \"MatcToolbarSectionHidden\")\n\t\t\t\tcss.add(this.sessionOutlierCheckbox.domNode, \"hidden\");\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tcss.remove(this.sessionTaskCntr, \"MatcToolbarSectionHidden\")\n\t\t\t\tcss.remove(this.sessionLineColor.domNode, \"hidden\");\n\t\t\t\tcss.remove(this.sessionTaskBtn.domNode, \"hidden\");\n\t\t\t\tcss.add(this.sessionShowDiv, 'MatcToolbarSectionHidden')\n\t\t\t\t// css.remove(this.sessionTaskLineColor.domNode, \"hidden\");\n\t\t\t\tcss.remove(this.sessionLineColor.domNode, \"hidden\");\n\t\t\t\tcss.remove(this.sessionOutlierDiv, \"MatcToolbarSectionHidden\")\n\t\t\t\tcss.remove(this.sessionOutlierCheckbox.domNode, \"hidden\");\n\t\t\t}\n\t\t},\n\n\n\t\t/*****************************************************************************************************\n\t\t * drop off\n\t\t ****************************************************************************************************/\n\t\tselectDropOffTask () {\n\t\t\tthis.showDropOffProperties()\n\t\t},\n\n\t\tshowDropOffProperties(){\n\t\t\tthis.logger.log(0,\"showDropOffProperties\", \"entry\");\n\n\n\t\t\tlet taskNumber = this.dropOffTaskBtn.getValue()\n\t\t\tlet task = this.testSettings.tasks[taskNumber];\n\t\t\tif (task) {\n\t\t\t\tthis.setAnalyticMode(\"DropOff\", {\n\t\t\t\t\ttime: this.dropOffTimeCheckBox.getValue(),\n\t\t\t\t\ttask: task,\n\t\t\t\t\tcolor: '#ccc'\n\t\t\t\t}, () => this.showDropOffProperties());\n\t\t\t\tcss.remove(this.dropOffConfigDiv, \"MatcToolbarSectionHidden\")\n\t\t\t\tcss.remove(this.dropOffOptionsDiv, \"MatcToolbarSectionHidden\");\n\t\t\t\tcss.remove(this.dropOffChartDivCntr, \"MatcToolbarSectionHidden\")\n\t\t\t\t//css.remove(this.dropOffFunnelDivCntr, \"MatcToolbarSectionHidden\")\n\t\t\t\tthis.showDropOffChart(task)\n\t\t\t\tthis.showProperties();\n\t\t\t} else {\n\t\t\t\tthis.setAnalyticMode(\"DropOff\", {\n\t\t\t\t\ttime: this.dropOffTimeCheckBox.getValue(),\n\t\t\t\t\ttask: null,\n\t\t\t\t\tcolor: '#ccc'\n\t\t\t\t}, () => this.showDropOffProperties());\n\t\t\t\tcss.remove(this.dropOffConfigDiv, \"MatcToolbarSectionHidden\")\n\t\t\t\tcss.remove(this.dropOffOptionsDiv, \"MatcToolbarSectionHidden\")\n\t\t\t\tthis.showProperties();\n\t\t\t}\n\t\t},\n\n\t\tshowDropOffChart (task) {\n\t\t\tvar df = new DataFrame(this.events);\n\t\t\tvar analytics  = new Analytics();\n\t\t\tlet funnel = analytics.getFunnelSummary(df, task, this.annotation);\n\n\t\t\tlet lastStep = funnel[funnel.length-1]\n\n\t\t\tthis.dropoffTaskSuccess.setPs(lastStep.p)\n\t\t\tthis.dropoffTaskSuccess.setValue(Math.round(lastStep.p * 100) + '%')\n\n\t\t\tthis.dropOffTaskDuration.innerText = Math.round(lastStep.durationMean / 100) / 10 + 's'\n\t\t\tthis.dropOffTaskDurationLabel.innerText = '+/-' + Math.round(lastStep.durationStd / 100) / 10 + 's'\n\n\t\t\tthis.dropOffInteractions.innerText = Math.round(lastStep.interactionsMean)\n\t\t\tthis.dropOffInteractionsLabel.innerText = '+/-' + Math.round(lastStep.interactionsStd)\n\t\t},\n\n\t\tshowDropOffFunnel (funnel) {\n\t\t\tthis.dropOffChartDiv.innerHTML = ''\n\t\t\tlet db = new DomBuilder()\n\t\t\tlet cntr = db.div().build()\n\t\t\tfunnel.forEach((step, i) => {\n\t\t\t\tif(step.event){\n\t\t\t\t\tdb.span('MatcDashLabel', this.getNiceEventLabel(step.event, i)).build(cntr)\n\t\t\t\t\tlet bar = db.div('MatcToolbarDropOffChartBar', Math.round(step.p * 100) + '%').build(cntr)\n\t\t\t\t\tbar.style.background = this.greenToRed(step.p)\n\t\t\t\t\tbar.style.width = step. p * 100 + '%'\n\t\t\t\t}\n\t\t\t})\n\t\t\tthis.dropOffChartDiv.appendChild(cntr)\n\t\t},\n\n\t\tgetNiceEventLabel (event, i){\n\t\t\tif (this.model){\n\t\t\t\tvar row = [];\n\t\t\t\tif(event.widget){\n\t\t\t\t\tif(event.type ==\"WidgetGesture\" && event.gesture){\n\t\t\t\t\t\tlet gesture = event.gesture;\n\t\t\t\t\t\trow = [this.getGestureLabel(gesture.type),  this.getWidgetName(event.widget)];\n\t\t\t\t\t} else if(event.state && (event.type == \"WidgetClick\" || event.type == \"WidgetChange\")  ){\n\t\t\t\t\t\treturn this.getEventStateLabel(event.state) + ` -  ` + this.getWidgetName(event.widget) + ' @ ' + this.getScreenName(event.screen);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this.getEventLabel(event.type) + ` -  ` + this.getWidgetName(event.widget) + ' @ ' + this.getScreenName(event.screen);\n\t\t\t\t\t}\n\t\t\t\t} else if(event.type ==\"ScreenGesture\" && event.gesture){\n\t\t\t\t\tlet gesture = event.gesture;\n\t\t\t\t\trow = [\"Screen \" + this.getGestureLabel(gesture.type), this.getScreenName(event.screen)];\n\t\t\t\t}else {\n\t\t\t\t\trow = [this.getEventLabel(event.type), this.getScreenName(event.screen)];\n\t\t\t\t}\n\t\t\t\treturn row[0] + \" - \" +row[1]+ \"\";\n\t\t\t}\n\t\t\treturn this.getNLS(\"dash.perf.dropoff.step\") + i;\n\t\t},\n\n\n\t\tshowHeatMapProperties(){\n\t\t\tthis.showProperties();\n\t\t\tcss.remove(this.heatmapDiv,\"MatcToolbarSectionHidden\" );\n\t\t\tthis.heatmapClickList.setValue(this.analyticHeatMapClicks);\n\t\t},\n\n\n\n\t\t/*****************************************************************************************************\n\t\t * show properties section and make sure the scroll bar is moved too!\n\t\t ****************************************************************************************************/\n\n\t\tshowProperties(){\n\t\t\tcss.remove(this.propertiesCntr, \"MatcToolbarSectionHidden\");\n\t\t\tif(this.canvas){\n\t\t\t\tcss.add(this.canvas.scrollRight, \"MatcCanvasScrollBarRightOpen\");\n\t\t\t}\n\t\t},\n\n\t\thideProperties(){\n\t\t\tconsole.debug(\"hideProperties() > enter\")\n\t\t\tif (this.analyticMode == \"UserJourney\"){\n\t\t\t\tthis.hideAllSections();\n\t\t\t\tthis.showSessionProperties();\n\t\t\t\treturn\n\t\t\t} \n\t\t\t\n\t\t\tif (this.analyticMode == \"HeatmapClick\"){\n\t\t\t\tthis.hideAllSections();\n\t\t\t\tthis.showHeatMapProperties();\n\t\t\t\treturn\n\t\t\t} \n\t\t\t\n\t\t\t// if (this.analyticMode == \"HeatmapClick\"){\n\t\t\t// \tthis.hideAllSections();\n\t\t\t// \tthis.showHeatMapProperties();\n\t\t\t// \treturn\n\t\t\t// } \n\t\t\t\n\t\t\t// css.add(this.propertiesCntr, \"MatcToolbarSectionHidden\");\n\t\t\t// if(this.canvas){\n\t\t\t// \tcss.remove(this.canvas.scrollRight, \"MatcCanvasScrollBarRightOpen\");\n\t\t\t// }\n\t\t\tthis.hideAllSections();\n\t\t\t\n\t\t},\n\n\n\t\thideAllSections(){\n\t\t\tthis.logger.log(3,\"hideAllSections\", \"entry\");\n\t\t\tfor(var i=0; i< this.sections.length; i++){\n\t\t\t\tvar section = this.sections[i];\n\t\t\t\tcss.add(section, \"MatcToolbarSectionHidden\");\n\t\t\t}\n\t\t},\n\n\n\t\t/**********************************************************************\n\t\t * Canvas Delegates\n\t\t **********************************************************************/\n\n\n\n\t\t/**********************************************************************\n\t\t * DI stuff\n\t\t **********************************************************************/\n\n\n\t\tsetController(c){\n\t\t\tthis.logger.log(3,\"setController\", \"entry\");\n\t\t\tthis.controller = c;\n\t\t},\n\n\t\tsetCanvas(c){\n\t\t\tthis.logger.log(3,\"setCanvas\", \"entry\");\n\t\t\tthis.canvas = c;\n\n\t\t},\n\n\t\tsetModelFactory(f){\n\t\t\tthis.logger.log(3,\"setModelFactory\", \"entry\");\n\t\t\tthis.factory = f;\n\t\t},\n\n\t\tsetModel(m){\n\t\t\tthis.model = this.createInheritedModel(m);\n\t\t\tthis.modelName = m.name\n\t\t\tthis.renderToolbar();\n\t\t\tthis.render();\n\t\t},\n\n\t\tsetAnnotation(a){\n\t\t\tthis.logger.log(-1,\"setAnnotation\", \"enter > # \" );\n\t\t\tthis.annotation = a;\n\t\t},\n\n\t\tsetTest(t){\n\t\t\tthis.logger.log(2,\"setTest\", \"enter > # \" );\n\t\t\tthis.testSettings = t;\n\t\t},\n\n\t\tsetEvents(events){\n\t\t\tthis.logger.log(2,\"setEvents\", \"enter > # \" + events.length);\n\t\t\tthis.events = events;\n\t\t},\n\n\t\tsetMode(mode){\n\t\t\tthis.logger.log(2,\"setMode\", \"entry > '\" + mode + \"'\");\n\t\t\tthis.mode = mode;\n\t\t\tthis.onModeChange();\n\t\t},\n\n\n\t\tonModeChange () {\n\n\t\t},\n\n\n\t\t/********************************************************\n\t\t * Helper\n\t\t ********************************************************/\n\n\t\tsetSelectedViewButton(){\n\t\t},\n\n\t\tcreateRing(lbl, help, distCallBack){\n\n\t\t\tvar bgColor = \"#cecece\";\n\t\t\tvar settings = this.canvas.getSettings();\n\t\t\tif(settings.canvasTheme == \"MatcDark\"){\n\t\t\t\tbgColor = \"#777\";\n\t\t\t}\n\t\t\tvar ring = this.$new(Ring, {size:100, width:5, backgroundColor: bgColor, color:\"#365fff\", color2:\"#83b600\", color3:\"#ffa713\"});\n\t\t\tring.setDomSize(120,120);\n\t\t\tring.setLabel(lbl);\n\n\t\t\tif(distCallBack){\n\t\t\t\tring.setAction(\"mdi mdi-chart-bar\");\n\t\t\t\tthis.tempOwn(ring.on(\"action\", lang.hitch(this, distCallBack)));\n\t\t\t}\n\n\t\t\tif(help){\n\t\t\t\tring.setHelp(true);\n\t\t\t\tthis.tempOwn(ring.on(\"help\", lang.hitch(this, \"showHelpDialog\", help)));\n\t\t\t}\n\n\t\t\tcss.add(ring.domNode, \"MatcMarginTop\");\n\t\t\treturn ring;\n\t\t},\n\n\t\tcreateToolBarItem(label, callback, icon, parent){\n\t\t\tvar a = document.createElement(\"div\");\n\t\t\tcss.add(a,\"MatcToolbarItem MatcToolbarPrimaryItem\");\n\n\t\t\tif(icon){\n\t\t\t\tvar i = document.createElement(\"span\");\n\t\t\t\tcss.add(i,icon);\n\t\t\t\ta.appendChild(i);\n\t\t\t}\n\n\t\t\t// var lbl = document.createElement(\"label\");\n\t\t\t// css.add(lbl, \"MatcToolbarLabel\");\n\t\t\t// lbl.innerHTML =label;\n\t\t\t// a.appendChild(lbl);\n\n\n\t\t\tif(callback){\n\t\t\t\tthis.tempOwn(on(a, touch.press, lang.hitch(this, callback)));\n\t\t\t}\n\t\t\tif(!parent){\n\t\t\t\tthis.properties.appendChild(a);\n\t\t\t} else {\n\t\t\t\tparent.appendChild(a);\n\t\t\t}\n\n\t\t\treturn a;\n\t\t},\n\n\n\t\tcreateInput(content,placeholder){\n\n\t\t\tvar div = document.createElement(\"div\");\n\t\t\tcss.add(div, \"MatcToolbarItem\");\n\t\t\tcontent.appendChild(div);\n\n\t\t\tlet input = document.createElement(\"input\");\n\t\t\tinput.disabled = true;\n\t\t\tcss.add(input, \"MatcIgnoreOnKeyPress MatcToobarInput  MatcToobarInlineEditDisabled\");\n\t\t\tdiv.appendChild(input);\n\n\t\t\tif(placeholder){\n\t\t\t\tinput.placeholder = placeholder;\n\t\t\t}\n\t\t\treturn input;\n\t\t},\n\n\t\tcreateContent(parent){\n\t\t\tvar content = document.createElement(\"div\");\n\t\t\tcss.add(content, \"MatcToolbarSectionContent\");\n\t\t\tparent.appendChild(content);\n\t\t\treturn content;\n\t\t},\n\n\t\tcreateSection(lbl, parentNode, canBeHidden = true){\n\n\t\t\tconst parent = document.createElement(\"div\");\n\t\t\tcss.add(parent, \"MatcToolbarSection\");\n\n\t\t\tconst header = this.createSectionHeader( parent, lbl);\n\n\t\t\t/**\n\t\t\t * store the value somehow in a cookie? and use it during restore??\n\t\t\t */\n\t\t\tthis.own(on(header, touch.press, () => {\n\t\t\t\tcss.toggle(parent, \"MatcToolbarSectionCollabsed\");\n\t\t\t\treturn false;\n\t\t\t}));\n\n\t\t\tif (canBeHidden) {\n\t\t\t\tthis.sections.push(parent);\n\t\t\t}\n\t\t\tparentNode.appendChild(parent);\n\t\t\treturn parent;\n\t\t},\n\n\t\tcreateSectionHeader(parent, lbl, hasTemplateMarker){\n\t\t\tvar div = document.createElement(\"div\");\n\t\t\tcss.add(div,\"MatcToolbarSectionLabel\");\n\t\t\tparent.appendChild(div);\n\n\t\t\tdiv.innerHTML=lbl;\n\n\t\t\tif(hasTemplateMarker){\n\t\t\t\tvar span = document.createElement(\"span\");\n\t\t\t\tcss.add(span, \"MatcToolbarSectionMarker\");\n\t\t\t\tspan.innerHTML=\" *\";\n\t\t\t\tdiv.appendChild(span);\n\t\t\t}\n\n\t\t\tvar chev = document.createElement(\"span\");\n\t\t\tcss.add(chev, \"MatcToolbarSectionChevron mdi mdi-chevron-down\");\n\t\t\tdiv.appendChild(chev);\n\n\t\t\treturn div;\n\t\t},\n\n\n\n\t\tcreateBigNumber(db, cntr, label, help){\n\t\t\tvar numberCntr = db.div(\"MatcToolBarNumberCntr MatcMarginTop\").build(cntr);\n\t\t\tlet l = db.div(\"MatcDashLabel\", label).build(numberCntr);\n\t\t\tvar main =  db.div(\"MatcToolbarBigLabel\").build(numberCntr);\n\t\t\tvar little =  db.div(\"MatcToolbarDetailLabel\").build(numberCntr);\n\t\t\tif(help){\n\t\t\t\tvar node =  db.span(\"mdi mdi-help-circle MatcHelpIcon\").build(l);\n\t\t\t\tthis.tempOwn(on(node, touch.press, lang.hitch(this, \"showHelpDialog\", help)));\n\t\t\t}\n\n\t\t\treturn [main, little];\n\t\t},\n\n\n\t\t/********************************************************\n\t\t * Main menu handlers\n\t\t ********************************************************/\n\n\t\tonExit(){\n\t\t\tthis.logger.log(0,\"onExit\", \"entry\", this.isPublic);\n\t\t\tif(this.isPublic){\n\t\t\t\thash(\"#/examples/\"+ this.model.id + \"/design.html\");\n\t\t\t} else {\n\t\t\t\thash(\"#/apps/\"+ this.model.id + \"/design.html\");\n\t\t\t}\n\t\t},\n\n\t\tonShare(){\n\t\t\tthis.logger.log(0,\"onShare\", \"entry\");\n\t\t},\n\n\t\t/********************************************************\n\t\t * Selection handlers!\n\t\t ********************************************************/\n\n\t\tonWidgetSelected(widget){\n\t\t\tthis.logger.log(2,\"onWidgetSelected\", \"entry\");\n\n\t\t\t/**\n\t\t\t * We might want to blur some stuff\n\t\t\t */\n\t\t\tif(this._selectedWidget && this._selectedWidget.id != widget.id){\n\t\t\t\tthis.logger.log(3,\"onWidgetSelected\", \"exit > no new selection!\");\n\t\t\t\tthis.blurWidgetProperties();\n\t\t\t}\n\n\n\t\t\tthis.cleanUp();\n\n\n\t\t\tthis._selection = \"widget\";\n\t\t\tthis._selectedWidget = widget;\n\t\t\tthis.showWidgetProperties(widget);\n\n\n\t\t\tthis.logger.log(3,\"onWidgetSelected\", \"exit\");\n\t\t},\n\n\n\t\tonScreenSelected(screen){\n\t\t\tthis.logger.log(-1, \"onScreenSelected\", \"entry\", this._selectedScreen);\n\n\t\t\t/**\n\t\t\t * We don not want to rerender on scroll\n\t\t\t */\n\t\t\tif(this._selectedScreen && this._selectedScreen.id == screen.id){\n\t\t\t\tthis.logger.log(3,\"onScreenSelected\", \"exit > no new selection!\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.cleanUp();\n\t\t\tthis._selection = \"screen\";\n\t\t\tthis._selectedScreen = screen;\n\t\t\tthis.showScreenProperties(screen);\n\n\n\t\t\tthis.logger.log(4,\"onScreenSelected\", \"exit\");\n\t\t},\n\n\n\n\n\t\tonLineSelected(line){\n\t\t\tthis.cleanUp();\n\t\t\tthis._selection = \"line\";\n\t\t\tthis._selectedLine = line;\n\t\t},\n\n\n\n\t\tonMultiSelect(selection){\n\t\t\tthis.cleanUp();\n\n\t\t\tthis._selection = \"multi\";\n\t\t\tthis._selectedMulti = selection;\n\t\t},\n\n\t\tonGroupSelect(group){\n\t\t\tthis.cleanUp();\n\t\t\tthis._selection = \"group\";\n\t\t\tthis._selectedGroup = group;\n\t\t\tthis.showGroupProperties(group);\n\t\t},\n\n\n\n\t\t// onCanvasSelected(){\n\t\t// \tthis.cleanUp();\n\t\t// \tthis.hideProperties();\n\t\t// },\n\n\n\t\t/**\n\t\t * method which will update all properties. method is called from controller!\n\t\t */\n\t\tupdatePropertiesView(){\n\n\t\t\tif(this._selectedWidget ){\n\t\t\t\tthis.onWidgetSelected(this._selectedWidget );\n\t\t\t}\n\t\t},\n\n\n\t\t/********************************************************\n\t\t * Show Settings\n\t\t ********************************************************/\n\n\n\t\tonShowSettings(e){\n\n\t\t\tvar db = new DomBuilder();\n\n\t\t\tdb = new DomBuilder();\n\t\t\tvar popup = db.div(\"MatcDialog MatcHeaderDialog MatcPadding\").build();\n\n\t\t\tvar cntr = db.div(\"\").build(popup);\n\n\t\t\tvar settings = this.canvas.getSettings();\n\n\n\t\t\t/**\n\t\t\t * Themes\n\t\t\t */\n\t\t\tdb.label(\"\",\"Theme :\").build(cntr);\n\t\t\tvar themeList = this.$new(RadioBoxList);\n\t\t\tthemeList.setOptions([\n\t\t\t\t{value:\"MatcLight\", label: \"Light\"},\n\t\t\t\t{value:\"MatcDark\", label:\"Dark\"},\n\t\t\t\t{value: \"MatcAuto\", label: \"Auto\"}\n\t\t\t]);\n\t\t\tthemeList.setValue(settings.canvasTheme);\n\t\t\tthemeList.placeAt(cntr);\n\n\t\t\t/**\n\t\t\t * Mouse Wheel\n\t\t\t */\n\t\t\tdb.label(\"MatcMarginTop\",\"Mouse Wheel / Touchpad Scroll :\").build(cntr);\n\t\t\tvar mouseWheelList = this.$new(RadioBoxList);\n\t\t\tmouseWheelList.setOptions([\n\t\t\t\t{value:\"scroll\", label: \"Scroll Canvas\"},\n\t\t\t\t{value:\"zoom\", label:\"Zoom Canvas\"}\n\t\t\t]);\n\t\t\tmouseWheelList.setValue(settings.mouseWheelMode);\n\t\t\tmouseWheelList.placeAt(cntr);\n\n\n\t\t\tvar bar = db.div(\"MatcButtonBar MatcMarginTopXL\").build(popup);\n\t\t\tvar save = db.a(\"MatcButton MatcButtonPrimary\", \"Save\").build(bar);\n\t\t\tvar cancel = db.a(\" MatcLinkButton \", \"Cancel\").build(bar);\n\n\n\n\t\t\tvar dialog = new Dialog();\n\t\t\tdialog.own(on(cancel, touch.press, lang.hitch(dialog, \"close\")));\n\t\t\tdialog.own(on(save, touch.press, lang.hitch(this, \"onSaveSettings\", dialog, themeList, mouseWheelList)));\n\n\t\t\tdialog.popup(popup, e.target);\n\n\t\t\tthis.canvas.enableMouseZoom(false);\n\t\t\tthis.canvas.setState(\"simulate\");\n\n\t\t\tthis.logger.log(0,\"onShowSettings\", \"exit > \");\n\t\t},\n\n\t\tonSaveSettings(dialog, themeList,mouseWheelList){\n\t\t\tvar settings = {\n\t\t\t\tcanvasTheme: themeList.getValue(),\n\t\t\t\tmouseWheelMode : mouseWheelList.getValue()\n\t\t\t};\n\n\t\t\tthis.canvas.setSettings(settings);\n\t\t\tthis.canvas.enableMouseZoom(true);\n\t\t\tdialog.close();\n\t\t},\n\n\n\t\t/********************************************************\n\t\t * SignUp\n\t\t ********************************************************/\n\n\n\t\tshowSignUpDialog(e){\n\n\t\t\tvar d = new Dialog();\n\n\t\t\tvar db = new DomBuilder();\n\n\t\t\tvar div = db.div(\"MatcDialog \").build();\n\n\n\t\t\tthis._createSignUpForm(d, div);\n\n\t\t\td.popup(div, e.target);\n\t\t},\n\n\n\t\t_createSignUpForm(d, div){\n\t\t\tlet f = this.$new(Form);\n\t\t\tf.render([\n\t\t\t\t{\n\t\t\t\t\tlabel: \"Email\",\n\t\t\t\t\tname:\"email\",\n\t\t\t\t\ttype:\"text\",\n\t\t\t\t\trequired:\"true\",\n\t\t\t\t\tplaceholder:\"Your email\",\n\t\t\t\t\tcss:\"input-lg MatcIgnoreOnKeyPress\",\n\t\t\t\t\terror:\"We need your email.\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: \"Password\",\n\t\t\t\t\tname:\"password\",\n\t\t\t\t\ttype:\"password\",\n\t\t\t\t\tmin:6,\n\t\t\t\t\tplaceholder:\"Your password\",\n\t\t\t\t\tcss:\"input-lg MatcIgnoreOnKeyPress\",\n\t\t\t\t\terror:\"The password should have at least six characters.\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'I have read the <a href=\"#/termsofservice.html\" target=\"_blank\">terms of service</a>',\n\t\t\t\t\tname:\"tos\",\n\t\t\t\t\ttype:\"check\",\n\t\t\t\t\trequired:\"true\",\n\t\t\t\t\tcss:\"MatcFormCheckBox MatcIgnoreOnKeyPress\",\n\t\t\t\t\terror:\"You must accept the terms of service!\"\n\t\t\t\t}\n\t\t\t], [\n\t\t\t\t{label : \"Cancel\", css:\"MatcLinkButton\", click: lang.hitch(d, \"close\")},\n\t\t\t\t{label : \"Create Free Account\", css:\"MatcButton MatchButtonGreen\", click: lang.hitch(this, \"_signUpAndNew\",d,f)}\n\t\t\t]);\n\n\t\t\tf.placeAt(div);\n\t\t\tf.startup();\n\n\t\t\treturn f;\n\t\t},\n\n\t\t_signUpAndNew(dialog, form, data){\n\n\t\t\tvar valid = form.validateForm(null, true);\n\n\t\t\tif(valid){\n\n\t\t\t\tresult = this._doPost(\"rest/user\", data);\n\n\t\t\t\tif(result.type==\"error\"){\n\t\t\t\t\tif(result.errors.indexOf(\"user.email.not.unique\") >=0){\n\t\t\t\t\t\tform.showError(\"The email is already taken! Please enter another one!\", \"email\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tform.showError(\"Something went wrong! Please try again!\", \"\");\n\t\t\t\t\t}\n\n\t\t\t\t\tdialog.shake();\n\t\t\t\t} else {\n\t\t\t\t\tdialog.close();\n\n\t\t\t\t\tvar result = this._doPost(\"rest/login/\", data);\n\t\t\t\t\tif(result.type!=\"error\"){\n\n\t\t\t\t\t\twindow.location.href = \"/my-account.html\";\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(\"_signUpAndSave() > Could not sign in user\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdialog.shake();\n\t\t\t}\n\t\t},\n\n\t\t/********************************************************\n\t\t * CleanUp\n\t\t ********************************************************/\n\n\n\t\tcleanUp(){\n\t\t\tthis.hideAllSections();\n\t\t\tthis.unselect()\n\t\t},\n\n\t\tunselect() {\n\t\t\tthis._selectedWidget = null;\n\t\t\tthis._selectedLine  = null;\n\t\t\tthis._selectedScreen = null;\n\t\t\tthis._selectedMulti = null;\n\t\t\tthis._selectedGroup = null;\n\t\t\tthis._selection = null;\n\t\t},\n\n\t\tblurWidgetProperties(){\n\n\t\t}\n    },\n    mounted () {\n\t\tthis.db = new DomBuilder();\n    }\n}\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticToolbar.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticToolbar.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./AnalyticToolbar.vue?vue&type=template&id=4dee5760\"\nimport script from \"./AnalyticToolbar.vue?vue&type=script&lang=js\"\nexport * from \"./AnalyticToolbar.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcCanvas MatcAnalyticCanvas\"},[_vm._m(0),_vm._m(1),_c('div',{staticClass:\"MatcCanvasScrollBar MatcCanvasScrollBarBottom\",style:('padding-left:' + this.layerListWidth + 'px'),attrs:{\"data-dojo-attach-point\":\"scrollBottom\"}},[_vm._m(2)]),_c('div',{staticClass:\"MatcMessage\",attrs:{\"data-dojo-attach-point\":\"message\"}})])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcCanvasFrame\",attrs:{\"data-dojo-attach-point\":\"frame\"}},[_c('div',{staticClass:\"MatcCanvasContainer MatcCanvasZoomable\",attrs:{\"data-dojo-attach-point\":\"container\"}},[_c('div',{staticClass:\"MatcCanvasContainer\",attrs:{\"data-dojo-attach-point\":\"zoomContainer\"}},[_c('div',{staticClass:\"MatcCanvasLayer\",attrs:{\"data-dojo-attach-point\":\"screenContainer\"}}),_c('div',{staticClass:\"MatcCanvasLayer\",attrs:{\"data-dojo-attach-point\":\"widgetContainer\"}}),_c('div',{staticClass:\"MatcCanvasLayer MatcCanvasSVGLayer\",attrs:{\"data-dojo-attach-point\":\"svgContainer\"}})]),_c('div',{staticClass:\"MatcDnDLayer\",attrs:{\"data-dojo-attach-point\":\"dndContainer\"}})])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcCanvasScrollBar MatcCanvasScrollBarRight\",attrs:{\"data-dojo-attach-point\":\"scrollRight\"}},[_c('div',{staticClass:\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrRight\",attrs:{\"data-dojo-attach-point\":\"scrollRightCntr\"}},[_c('div',{staticClass:\"MatchCanvasScrollHandle\",attrs:{\"data-dojo-attach-point\":\"scrollRightHandler\"}})])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrBottom\",attrs:{\"data-dojo-attach-point\":\"scrollBottomCntr\"}},[_c('div',{staticClass:\"MatchCanvasScrollHandle\",attrs:{\"data-dojo-attach-point\":\"scrollBottomHandler\"}})])}]\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcCanvas MatcAnalyticCanvas\"})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n<template>\n    <div class=\"MatcCanvas MatcAnalyticCanvas\">\n    </div>\n  </template>\n  \n\n  <script>\n \n  import css from \"dojo/css\";\n  import on from \"dojo/on\";\n  import lang from \"dojo/_base/lang\";\n  import DomBuilder from \"common/DomBuilder\"; \n  \n  export default {\n    name: \"UserJourney\",\n    mixins: [],\n    data: function () {\n      return {\n      };\n    },\n    components: {},\n    methods: {\n\n      highlightSession (sessionID = false) {\n        if (!this.analyticParams.tree) {\n          this.highlightAnalyticLine(sessionID)\n        }\n      },\n\n\n      highlightAnalyticLine(sessionID) {\n        this.logger.log(1, \"highlightAnalyticLine\", \"entry > \", sessionID);\n          if (this.analyticLines) {\n            for (let id in this.analyticLines) {\n              let line = this.analyticLines[id]\n              if (!sessionID || sessionID === id) {\n                // somebug when tasks are selected\n                line.style('opacity', 1)\n              } else {\n                line.style('opacity', 0)\n              }\n\n              if (this.analyticCircles[id]) {\n                let divs = this.analyticCircles[id]             \n                divs.forEach(div => {\n                  if (!sessionID || sessionID === id) {\n                    div.style.opacity = 1                  \n                  } else {\n                    div.style.opacity = 0\n                  }\n                })   \n              }\n            }\n          }\n      },\n    \n  \n      _render_global_UserJourney() {\n        this.logger.log(1, \"_render_global_UserJourney\", \"entry > \");\n        this.setBW(true);\n        this.cleanUpAnalytics()\n        if (!this.analyticParams.tree) {\n          this._renderUserSingleLines();\n        } else {\n          this._renderUserTree();\n        }\n      },\n  \n      _renderUserTree() {\n        let sessions = this.getUserJourney();\n        let db = new DomBuilder();\n        let time = this.analyticParams.time\n        \n        let selectedSessions = this.analyticParams.sessions;\n        let graph = {};\n        let maxCount = 0;\n        let maxMeanDuration = 0\n      \n        for (let sessionID in selectedSessions) {\n          if (selectedSessions[sessionID] === true) {\n            let session = sessions[sessionID];\n            if (session) {\n              this._getSessionGraph(session, graph, time);\n              maxCount++;\n            } else {\n              console.debug(\"_renderUserTree() > No session for \", sessionID);\n            }\n          }\n        }\n  \n        /**\n         * We might have the situation that the users creates loopes\n         * in one session. This will cause the count to be bigger than the\n         * session count (maxCount). This messes up the graph. To make it\n         * nice again, we update maxCount\n         */\n    \n        for (let id in graph) {\n          const l = graph[id]\n          if (l.count > maxCount) {\n            console.warn(\"_renderUserTree() > Update maxcount, because l.count bigger than max count\", )\n            maxCount = l.count\n          }\n          const meanDuration = l.duration / l.count\n          maxMeanDuration = Math.max(meanDuration, maxMeanDuration)\n        }\n  \n        const divs = {};\n        for (let id in graph) {\n          const l = graph[id];\n          const line = [];\n          line.push({\n            x: l.from.x,\n            y: l.from.y,\n            d: \"right\",\n          });\n          line.push({\n            x: l.to.x,\n            y: l.to.y,\n            d: \"right\",\n          });\n  \n          const meanDuration = l.duration / l.count\n          const p = time ?\n              Math.min(1, meanDuration / maxMeanDuration):\n              Math.min(1, l.count / maxCount)\n  \n          const width = Math.min(15, Math.max(1, Math.round(p * 25))) + 1;\n          const color = this.mixColor(Math.min(1, p));\n          const toID = l.to.x + \",\" + l.to.y;\n          const fromID = l.from.x + \",\" + l.from.y;\n          \n          if (!divs[toID]) {\n            divs[toID] = this._renderTreeEvent(l.to.x, l.to.y, width, color, db);\n          }\n        \n          if (!divs[fromID]) {\n            divs[fromID] = this._renderTreeEvent(l.from.x,l.from.y,width,color,db);\n          }\n  \n          this.drawAnalyticLine(id, line, color, width, this.taskLineOpacity);\n        }\n      },\n  \n  \n  \n      _renderTreeEvent(x, y, width, color, db) {\n        const cntr = db\n          .div(\"MatcAnalyticCanvasEventCntr\")\n          .build(this.widgetContainer);\n\n        cntr.style.left = Math.round(x) + \"px\";\n        cntr.style.top = Math.round(y) + \"px\";\n  \n        const div = db\n          .div(\"MatcAnalyticCanvasEvent MatcAnalyticCanvasEvent\")\n          .build(cntr);\n  \n        const r = Math.round(width * 2);\n        div.style.width = r + \"px\";\n        div.style.height = r + \"px\";\n        div.style.top = -1 * Math.round(r / 2) + \"px\";\n        div.style.left = -1 * Math.round(r / 2) + \"px\";\n        div.style.background = color;\n      },\n  \n      _renderUserSingleLines() {\n        const sessions = this.getUserJourney();\n        const outlierScores = this.getOutlierScores()\n\n        const taskPerformance = this.getTaskPerformance();\n        const db = new DomBuilder();\n  \n        let task = null;\n        if (this.analyticParams.task !== false && this.analyticParams.task >= 0) {\n          task = this.testSettings.tasks[this.analyticParams.task];\n        }\n\n        const selectedSessions = this.analyticParams.sessions;\n        for (let sessionID in selectedSessions) {\n          if (selectedSessions[sessionID] === true) {\n            const session = sessions[sessionID];\n            const matches = taskPerformance[sessionID];\n            const outlierScore = outlierScores[sessionID]\n            if (session) {\n              this._renderUserGraph(sessionID, session, db, task, matches, outlierScore);\n            } else {\n              console.debug( \"_render_global_UserJourney() > No session for \", sessionID   );\n            }\n          }\n        }\n\n        if (this.analyticParams.outlier) {\n          this.showHint(`Found ${Object.values(outlierScores).filter(v => v ===1).length} outliers`)\n        }\n      },\n  \n      \n  \n      _renderUserGraph(sessionID, session, db, task, matches, isOutlier) {\n    \n        const sessionEvents = session.data;\n        const line = [];\n        const sessionLength = sessionEvents.length\n        const matchLines = [];\n  \n        let e = null;\n        let lastDurationEvent\n        let duration = 0\n        let maxDuration = 0\n        let match;\n        if (task && matches) {\n          match = matches[task.id];\n        }\n  \n        // compute line\n        for (let i = 0; i < sessionLength; i++) {\n          e = sessionEvents[i];\n          if (lastDurationEvent) {\n            duration = e.time - lastDurationEvent.time\n            maxDuration = Math.max(duration, maxDuration)\n          }\n          \n          const screenID = this.getEventScreenId(e);\n          const sourceScreen = this.sourceModel.screens[screenID];\n          const zoomedScreen = this.model.screens[screenID];\n          if (sourceScreen && zoomedScreen) {\n            if (e.type == \"SessionStart\") {\n              const x = sourceScreen.x - Math.max(10, Math.round(30 * this.zoom));\n              const y = sourceScreen.y + Math.max(10, Math.round(30 * this.zoom));\n              line.push({ x: x, y: y, d: \"right\", duration:duration, type: e.type, session: e.session });\n            } else if (e.x >= 0 && e.y >= 0 && !e.noheat) {\n              const x = e.x * sourceScreen.w + sourceScreen.x;\n              const y = e.y * sourceScreen.h + sourceScreen.y;\n              line.push({ x: x, y: y, d: \"right\", duration: duration , type: e.type, session: e.session});\n              lastDurationEvent = e\n            }\n            if (match && match.startPosition <= i && match.endPosition >= i) {\n              const point = line[line.length - 1];\n              point.match = true\n              matchLines.push(point);\n            }\n          } else {\n            console.warn(\"_renderUserGraph()\", \"Screen is not there\", e.screen);\n          }\n        }\n        \n        /** Since 4.0.60 we add a last node, if it was screen load */\n        if (e && e.type === 'ScreenLoaded') {\n          const screenID = this.getEventScreenId(e);\n          const sourceScreen = this.sourceModel.screens[screenID];\n          let x = Math.round(sourceScreen.x + sourceScreen.w / 2);\n          let y = Math.round(sourceScreen.y + sourceScreen.h / 2);\n          line.push({ x: x, y: y, d: \"right\", duration:duration, type: e.type, session: e.session});\n          if (match && match.startPosition <=  sessionLength-1 && match.endPosition >= sessionLength-1) {\n              const point = line[line.length - 1];\n              point.match = true\n              matchLines.push(point);\n            }\n        }\n  \n        this.analyticCircles[sessionID] = []\n        // draw all points\n        for (let i = 0; i < line.length; i++) {\n          const p = line[i]\n          const width = Math.round(40 * (p.duration / maxDuration)) + 25\n          const [div, halo, cntr] = this._renderScreenEvent(p.x,p.y, p.type, \"\",db, p.session, width);\n          if (i == line.length -1) {\n            css.add(cntr, \"MatcAnalyticCanvasEventSessionEnd\");\n            div.style.background = this.userJourneyEndColor\n            halo.style.background = this.userJourneyEndColor + 28;\n            halo.style.borderColor = this.userJourneyEndColor;\n          } else if (i > 0) {\n            if (p.match) {\n              div.style.background = this.analyticParams.taskColor;\n              halo.style.background = this.analyticParams.taskColor + 28;\n              halo.style.borderColor = this.analyticParams.taskColor;\n            } else if (isOutlier && this.analyticParams.outlier) {\n            \n              div.style.background = this.analyticParams.outlierColor\n              halo.style.background = this.analyticParams.outlierColor + 28;\n              halo.style.borderColor = this.analyticParams.outlierColor;\n\n            } else {\n              div.style.background = this.analyticParams.color\n              halo.style.background = this.analyticParams.color + 28;\n              halo.style.borderColor = this.analyticParams.color;\n            }\n          }\n          this.analyticCircles[sessionID].push(cntr)\n      \n\n\n        }\n    \n        /**\n         * Render successful lines on top\n         */\n        let lineColor = this.analyticParams.color\n        let lineOpacity = this.taskLineOpacity\n        let lineWidth = 2\n\n        if (this.analyticParams.outlier) {\n          if (isOutlier) {\n            lineColor = this.analyticParams.outlierColor\n            lineOpacity = this.taskLineOpacity\n            lineWidth = 4\n          } else {\n            lineOpacity = this.taskLineOpacity * 0.5\n          }\n        }\n        \n        if (task) {\n          lineOpacity = this.taskLineOpacity * 0.5\n          this.drawStraightAnalyticLine(sessionID, line, lineColor, lineWidth, lineOpacity);\n          this.drawStraightAnalyticLine(sessionID, matchLines,this.analyticParams.taskColor, 4 ,this.taskLineOpacity);\n        } else {\n          this.drawStraightAnalyticLine(sessionID,line, lineColor, lineWidth, lineOpacity);\n        }\n  \n        return false;\n      },\n  \n     \n      _renderScreenEvent(x, y, type, label, db, screenID, width, r = 15) {\n        const cntr = db\n          .div(\"MatcAnalyticCanvasEventCntr\")\n          .build(this.widgetContainer);\n        cntr.style.left = Math.round(x) + \"px\";\n        cntr.style.top = Math.round(y) + \"px\";\n  \n  \n        const halo = db\n          .div(\"MatcAnalyticCanvasEventHalo\")\n          .build(cntr);\n  \n        halo.style.width = width + \"px\";\n        halo.style.height = width + \"px\";\n        halo.style.top = -1 * Math.round(width / 2) + \"px\";\n        halo.style.left = -1 * Math.round(width / 2) + \"px\";\n   \n        const div = db\n          .div(\"MatcAnalyticCanvasEvent MatcAnalyticCanvasClickableEvent MatcAnalyticCanvasEvent\" + type)\n          .build(cntr);\n  \n        div.style.width = r + \"px\";\n        div.style.height = r + \"px\";\n        div.style.top = -1 * Math.round(r / 2) + \"px\";\n        div.style.left = -1 * Math.round(r / 2) + \"px\";\n  \n        this.tempOwn(on(div, \"click\", lang.hitch(this, \"onScreenEventClick\", screenID)));\n  \n        return [div, halo, cntr];\n      },\n  \n      onScreenEventClick(id, e) {\n        this.stopEvent(e);\n        if (this.toolbar) {\n          this.toolbar.setSelectSessions([id]);\n        }\n      },\n  \n      _getSessionGraph(session, graph) {\n    \n        const sessionEvents = session.data;\n        let from;\n        let e = null\n        let lastDurationEvent// = sessionEvents[0]\n        let duration = 0\n        for (let i = 0; i < sessionEvents.length; i++) {\n          e = sessionEvents[i];\n          // we start only counting durations once there\n          // was an click event\n          if (lastDurationEvent) {\n            duration = e.time - lastDurationEvent.time\n          }\n          \n        /**\n           * Be aware of the overlay...\n           */\n          const screenID = this.getEventScreenId(e);\n          const screen = this.sourceModel.screens[screenID];\n          if (screen) {\n            const to = {};\n            if (e.type == \"SessionStart\") {\n              to.x = screen.x - Math.max(10, Math.round(30));\n              to.y = screen.y + Math.max(10, Math.round(30));\n              from = this._addToGraph(from, to, graph, 0);\n            } else if (e.x >= 0 && e.y >= 0 && !e.noheat) { // some click\n              if (e.widget && this.sourceModel.widgets[e.widget]) {\n                const widget = this.sourceModel.widgets[e.widget];\n                to.x = Math.round(widget.x + widget.w / 2);\n                to.y = Math.round(widget.y + widget.h / 2);\n                from = this._addToGraph(from, to, graph, duration);\n                lastDurationEvent = e\n              } else {\n                to.x = Math.round(Math.min(1, e.x) * screen.w + screen.x);\n                to.y = Math.round(Math.min(1, e.y) * screen.h + screen.y);\n                from = this._addToGraph(from, to, graph, duration);\n                lastDurationEvent = e\n              }\n            }\n          } else {\n            console.warn(\"_getSessionGraph()\", \"Screen is not there\", e.screen);\n          }\n        }\n  \n          /** Since 4.0.60 we add a last node, if it was screen load */\n        if (e && e.type === 'ScreenLoaded') {\n          const screenID = this.getEventScreenId(e);\n          const screen = this.sourceModel.screens[screenID];\n          const to = {\n            x: Math.round(screen.x + screen.w / 2),\n            y: Math.round(screen.y + screen.h / 2)\n          }\n          from = this._addToGraph(from, to, graph, duration);\n        }\n  \n  \n      },\n  \n      _addToGraph(from, to, graph, duration) {\n        if (from) {\n          const id = from.x + \";\" + from.y + \"-\" + to.x + \";\" + to.y;\n          if (!graph[id]) {\n            graph[id] = {\n              from: from,\n              to: to,\n              count: 0,\n              duration: 0\n            };\n          }\n          graph[id].count++;\n          graph[id].duration += duration * 1;\n          return to;\n        }\n        return to;\n      }\n    },\n    mounted() {},\n  };\n  </script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./UserJourney.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./UserJourney.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./UserJourney.vue?vue&type=template&id=a7285c56\"\nimport script from \"./UserJourney.vue?vue&type=script&lang=js\"\nexport * from \"./UserJourney.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcCanvas MatcAnalyticCanvas\"})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n<template>\n    <div class=\"MatcCanvas MatcAnalyticCanvas\">\n     \n    </div>\n  </template>\n  \n  \n  <script>\n  \n  import on from \"dojo/on\";\n  import DomBuilder from \"common/DomBuilder\";\n  import DataFrame from \"common/DataFrame\";\n  import Analytics from \"dash/Analytics\";\n \n  export default {\n    name: \"DropOff\",\n    mixins: [],\n    data: function () {\n      return {\n      };\n    },\n    components: {},\n    methods: {\n     \n  \n      /**********************************************************************\n       * DropOff\n       **********************************************************************/\n  \n      _render_global_DropOff() {\n        this.logger.log(1, \"_render_global_DropOff\", \"entry > \", this.analyticParams.task);\n        this.setBW(true);\n        if (this.analyticParams.task) {\n          if (this.analyticParams.time) {\n            this._render_dropoff_task_time(this.analyticParams.task);\n          } else {\n            this._render_dropoff_task_success(this.analyticParams.task);\n          }\n        } else {\n          this.showError('No task selected')\n        }\n      },\n  \n       _render_dropoff_task_time (task) {\n  \n        const db = new DomBuilder()\n  \n        const df = new DataFrame(this.events);\n        const analytics  = new Analytics();\n        const funnel = analytics.getFunnelSummary(df, task, this.annotation);\n  \n\n  \n        const length = task.flow.length\n        if (task.flow && task.flow.length > 1) {\n  \n          /**\n           * We take here to total task time...\n           */\n          const maxTime = Math.max(1,funnel[funnel.length-1].durationMean)\n  \n          for (let i=0; i < task.flow.length - 1; i++){\n            const startSummary = funnel[i+1]\n            const endSummary = funnel[i+2]\n            const start = task.flow[i]\n            const end = task.flow[i+1]\n  \n  \n            const time = endSummary.durationMean - startSummary.durationMean\n            const p = Math.min(1, time  / maxTime)\n  \n  \n            const startPos = this._getDropOffBoxPosition(start, i , length)\n            const endPos = this._getDropOffBoxPosition(end, i+ 1, length)\n            const line = [startPos, endPos]\n  \n            let color = this.mixColor(p)\n            let width = Math.max(3, Math.round(this.dropOffLineWidth * p))\n            this.drawAnalyticLine('dropOffLine'+i,line, color , width, this.taskLineOpacity);\n  \n            /**\n             * Render Points\n             */\n            this._renderDropOffEvent(endPos.x, endPos.y, 'FlowStep', db, color, width + this.dropOffEventWidth, Math.round(time / 100) / 10, 's')\n            if (i === 0) {\n                color = this.mixColor(p)\n                width = Math.max(3, Math.round(this.dropOffLineWidth * p))\n                this._renderDropOffEvent(startPos.x, startPos.y, 'FlowStep', db, color, width + this.dropOffEventWidth, '0', 's')\n            }\n  \n          }\n        } else {\n          this.showError('Cannot show task times. The selected task has only one step.')\n        }\n      },\n  \n      _render_dropoff_task_success (task) {\n  \n        const db = new DomBuilder()\n  \n        const df = new DataFrame(this.events);\n        const analytics  = new Analytics();\n        const funnel = analytics.getFunnelSummary(df, task, this.annotation);\n  \n        const length = task.flow.length\n        if (task.flow && task.flow.length > 1) {\n          for (let i=0; i < task.flow.length - 1; i++){\n  \n            const startSummary = funnel[i+1]\n            const endSummary = funnel[i+2]\n            const start = task.flow[i]\n            const end = task.flow[i+1]\n  \n            const startPos = this._getDropOffBoxPosition(start, i, length)\n            const endPos = this._getDropOffBoxPosition(end, i + 1, length)\n            const line = [startPos, endPos]\n  \n            let color = this.greenToRed(endSummary.p)\n            let width = Math.max(3, Math.round(this.dropOffLineWidth * endSummary.p))\n            this.drawAnalyticLine('dropOffLine'+i,line, color , width, this.taskLineOpacity);\n  \n            /**\n             * Render drop off\n             */\n            if (startSummary && endSummary) {\n                const p = startSummary.p - endSummary.p\n                const dropOffPos = {\n                  x: startPos.x + 100,\n                  y: startPos.y + 100\n                }\n                const dropOffLine = [startPos, dropOffPos]\n                width = Math.max(3, Math.round(this.dropOffLineWidth * p))\n                this.drawAnalyticLine('dropOffLineDrop'+i,dropOffLine, this.dropOffLineColor , width, this.taskLineOpacity);\n                this._renderDropOffEvent(dropOffPos.x, dropOffPos.y, 'FlowStep', db, this.dropOffLineColor, width + this.dropOffEventWidth, Math.round(-100 * p))\n            }\n  \n            /**\n             * Render points\n             */\n            this._renderDropOffEvent(endPos.x, endPos.y, 'FlowStep', db, color, width + this.dropOffEventWidth, Math.round(endSummary.p * 100))\n            if (i === 0) {\n                color = this.greenToRed(startSummary.p)\n                width = Math.max(3, Math.round(this.dropOffLineWidth * startSummary.p))\n                this._renderDropOffEvent(startPos.x, startPos.y, 'FlowStep', db, color, width + this.dropOffEventWidth, Math.round(startSummary.p * 100))\n            }\n  \n          }\n        } else {\n          this.showError('Cannot show task times. The selected task has only one step.')\n        }\n      },\n  \n      _getDropOffBoxPosition (e, i = 0, l = 1) {\n  \n        if (e.widget) {\n          let widget = this.sourceModel.widgets[e.widget]\n          if (widget) {\n              let pos = {}\n              pos.x = Math.round(widget.x + widget.w / 2);\n              pos.y = Math.round(widget.y + widget.h / 2);\n              return pos\n          } else {\n             this.logger.warn(\"_geDropOffBoxPosition\", \"no widget > \", e.widget);\n          }\n  \n        }\n        if (e.screen) {\n          let sourceScreen = this.sourceModel.screens[e.screen]\n          if (sourceScreen) {\n              let pos = {}\n              pos.x = Math.round(sourceScreen.x + sourceScreen.w / 2);\n              pos.y = Math.min(sourceScreen.y + sourceScreen.h, Math.round(sourceScreen.y + sourceScreen.h / 3) + (sourceScreen.h * i / (l * 2)));\n              return pos\n          } else {\n             this.logger.warn(\"_geDropOffBoxPosition\", \"no screen > \", e.screen);\n          }\n        }\n      },\n  \n      _renderDropOffEvent(x, y, type, db, color, width, p, unit='%') {\n        var cntr = db\n          .div(\"MatcAnalyticCanvasEventCntr\")\n          .build(this.widgetContainer);\n        cntr.style.left = Math.round(x) + \"px\";\n        cntr.style.top = Math.round(y) + \"px\";\n  \n        var div = db\n          .div(\"MatcAnalyticCanvasEvent MatcAnalyticCanvasEvent\" + type,)\n          .build(cntr);\n  \n        var r = Math.max(5, Math.round(width));\n        div.style.width = r + \"px\";\n        div.style.height = r + \"px\";\n        div.style.top = -1 * Math.round(r / 2) + \"px\";\n        div.style.left = -1 * Math.round(r / 2) + \"px\";\n        div.style.background = color\n        this.tempOwn(on(div, 'click', (e) => this.selectDropOffPoint(e)))\n      \n        if (unit) {\n          db.span('MatcAnalyticCanvasEventLabel', p + unit).build(div)\n        }\n  \n        return div;\n      },\n  \n      selectDropOffPoint () {\n  \n      }\n    },\n    mounted() {},\n  };\n  </script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DropOff.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DropOff.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./DropOff.vue?vue&type=template&id=6d3beb0a\"\nimport script from \"./DropOff.vue?vue&type=script&lang=js\"\nexport * from \"./DropOff.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcCanvas MatcAnalyticCanvas\"})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n<template>\n  <div class=\"MatcCanvas MatcAnalyticCanvas\">\n\n  </div>\n</template>\n  \n  \n<script>\n\nimport DataFrame from \"common/DataFrame\";\nimport Analytics from \"dash/Analytics\";\nimport * as Outlier from 'dash/Outlier'\n\nexport default {\n  name: \"DataProcessing\",\n  mixins: [],\n  data: function () {\n    return {\n    };\n  },\n  components: {},\n  methods: {\n\n\n    getOutlierScores() {\n      if (!this.cache[\"outliers\"]) {\n        const df = new DataFrame(this.events);\n        //const outliers = Outlier.computeOutliersIRQ(df);\n        const outliers = Outlier.computeOutliersMAD(df, 2)\n        this.cache[\"outliers\"] = outliers\n      }\n      return this.cache[\"outliers\"];\n    },\n\n    getGestures() {\n      if (!this.cache[\"gestures\"]) {\n        var df = new DataFrame(this.events);\n        var gestures = df.select(\"type\", \"in\", [\n          \"ScreenGesture\",\n          \"WidgetGesture\",\n        ]);\n        this.cache[\"gestures\"] = gestures.data;\n      }\n\n      return this.cache[\"gestures\"];\n    },\n\n    getUserJourney() {\n      if (!this.cache[\"userJourney\"]) {\n        var df = new DataFrame(this.events);\n        df.sortBy(\"time\");\n        var sessionGroup = df.groupBy(\"session\");\n        let sessions = sessionGroup.data;\n        this.cache[\"userJourney\"] = sessions;\n      }\n      return this.cache[\"userJourney\"];\n    },\n\n    getTaskPerformance() {\n      if (!this.cache[\"taskPerformance\"]) {\n        const analytics = new Analytics();\n        const df = new DataFrame(this.events);\n        df.sortBy(\"time\");\n\n        const temp = analytics.getTaskPerformance(\n          df, this.testSettings.tasks, false, false\n        );\n        const sessions = {};\n        for (let i = 0; i < temp.data.length; i++) {\n          const match = temp.data[i];\n          if (!sessions[match.session]) {\n            sessions[match.session] = {};\n          }\n          if (!sessions[match.session][match.task]) {\n            sessions[match.session][match.task] = match;\n          } else {\n            console.warn(\"getTaskPerformance() Double mactch\", match);\n          }\n        }\n        this.cache[\"taskPerformance\"] = sessions;\n      }\n      return this.cache[\"taskPerformance\"];\n    },\n\n    getOverlayViews() {\n      if (!this.cache[\"overlayViews\"]) {\n        var screenLoads = this.df.select(\"type\", \"==\", \"OverlayLoaded\");\n\n        var screenLoadCounts = screenLoads.count(\"overlay\");\n        var totalScreenLoads = screenLoads.size();\n\n        var views = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          views[screen.id] = screenLoadCounts.get(screen.id, null, 0);\n        }\n\n        this.cache[\"overlayViews\"] = {\n          total: totalScreenLoads,\n          counts: views,\n        };\n      }\n      return this.cache[\"overlayViews\"];\n    },\n\n    getOverlayTest() {\n      if (!this.cache[\"overlayTests\"]) {\n        var sessions = this.df.groupBy(\"session\");\n        var sessionCount = sessions.size().size();\n\n        var tests = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          tests[screen.id] = 0;\n        }\n\n        sessions.foreach(function (df) {\n          var screenCounts = df.count(\"overlay\"); // diference to screenTest\n          screenCounts.foreach(function (row, id) {\n            tests[id] += 1;\n          });\n        });\n\n        this.cache[\"overlayTests\"] = {\n          sessions: sessionCount,\n          counts: tests,\n        };\n      }\n      return this.cache[\"overlayTests\"];\n    },\n\n    getScreenViews() {\n      if (!this.cache[\"screenViews\"]) {\n        var screenLoads = this.df.select(\"type\", \"==\", \"ScreenLoaded\");\n        var screenLoadCounts = screenLoads.count(\"screen\");\n        var totalScreenLoads = screenLoads.size();\n\n        var views = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          views[screen.id] = screenLoadCounts.get(screen.id, null, 0);\n        }\n\n        this.cache[\"screenViews\"] = {\n          total: totalScreenLoads,\n          counts: views,\n        };\n      }\n      return this.cache[\"screenViews\"];\n    },\n\n    getScreenTests() {\n      if (!this.cache[\"screenTests\"]) {\n        var sessions = this.df.groupBy(\"session\");\n        var sessionCount = sessions.size().size();\n\n        var tests = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          tests[screen.id] = 0;\n        }\n\n        sessions.foreach(function (df) {\n          var screenCounts = df.count(\"screen\");\n          screenCounts.foreach(function (row, id) {\n            tests[id] += 1;\n          });\n        });\n\n        this.cache[\"screenTests\"] = {\n          sessions: sessionCount,\n          counts: tests,\n        };\n      }\n      return this.cache[\"screenTests\"];\n    },\n\n    getScreenDwellTime() {\n      if (!this.cache[\"screenDwell\"]) {\n        var count = this.df.count(\"session\");\n        var sessionCount = count.size();\n\n        var analytics = new Analytics();\n        var screenTimeGrouping = analytics.getScreenTimeGrouping(this.df);\n        var totalTime = screenTimeGrouping.sum().sum();\n\n        var times = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          var screenTimeDF = screenTimeGrouping.get(screen.id);\n          if (screenTimeDF) {\n            times[screen.id] = screenTimeDF.sum();\n          } else {\n            times[screen.id] = 0;\n          }\n        }\n\n        this.cache[\"screenDwell\"] = {\n          total: totalTime,\n          times: times,\n          sessions: sessionCount,\n        };\n      }\n      return this.cache[\"screenDwell\"];\n    },\n\n    getOverlayDwellTime() {\n      if (!this.cache[\"overlayDwell\"]) {\n        var count = this.df.count(\"session\");\n        var sessionCount = count.size();\n\n        var analytics = new Analytics();\n\n        /**\n         * We calculate the overlay time relative to the absolute screen time...\n         */\n        var screenTimeGrouping = analytics.getScreenTimeGrouping(this.df);\n        var totalTime = screenTimeGrouping.sum().sum();\n\n        var overlayGrouping = analytics.getOverlayTimeGrouping(this.df);\n\n        var times = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          var screenTimeDF = overlayGrouping.get(screen.id);\n          if (screenTimeDF) {\n            times[screen.id] = screenTimeDF.sum();\n          } else {\n            times[screen.id] = 0;\n          }\n        }\n\n        this.cache[\"overlayDwell\"] = {\n          total: totalTime,\n          times: times,\n          sessions: sessionCount,\n        };\n      }\n      return this.cache[\"overlayDwell\"];\n    },\n\n    getScreenWidgetClicks() {\n      if (!this.cache[\"screenWidgetClicks\"]) {\n        /**\n         * FIXME: This could be nice with regards to the overlays....\n         *\n         * Some clicks should be attributed the to overlay, nit the clicks, or?\n         */\n        var widgetEvents = this.df.select(\"type\", \"==\", \"WidgetClick\");\n        var widgetScreenEvents = widgetEvents.count(\"screen\");\n        var totalWidgetEvents = widgetScreenEvents.sum();\n\n        /**\n         * Now filter out overlay events\n         */\n        widgetEvents = widgetEvents.select(\"overlay\", \"==\", null);\n        widgetScreenEvents = widgetEvents.count(\"screen\");\n\n        var clicks = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          clicks[screen.id] = widgetScreenEvents.get(screen.id, null, 0);\n        }\n\n        this.cache[\"screenWidgetClicks\"] = {\n          clicks: clicks,\n          total: totalWidgetEvents,\n        };\n      }\n\n      return this.cache[\"screenWidgetClicks\"];\n    },\n\n\n    getScreenClicksOnBackground(df) {\n\n      const screenClicks = df.select(\"type\", \"==\", \"ScreenClick\");\n      return screenClicks\n\n    },\n\n    getMissedClicks(df) {\n     \n        /** \n         * Get all screens that do not have a line\n         */\n        var screens = Object.values(this.sourceModel.screens);\n        let passiveScreens = {}\n        screens.forEach(s => {\n          let linesFrom = this.getFromLines(s)\n          if (linesFrom.length === 0) {\n            passiveScreens[s.id] = true\n          }\n        })\n\n\n        /**\n         * Get all the widgets that do not have a line\n         * AND that are not inputs \n         */\n        let passiveWidgets = []\n        let widgets = Object.values(this.sourceModel.widgets)\n        widgets.forEach(w => {\n          if (w.type === \"Box\" || w.type === \"Button\" || w.type === \"HotSpot\") {\n            let linesFrom = this.getFromLines(w)\n            if (linesFrom.length === 0) {\n              passiveWidgets[w.id] = true\n            }\n          }\n        })\n\n        /**\n         * Filter screenclicks for these screens\n         */\n        let clickEvents = df\n          .select(\"type\", \"in\", [\"ScreenClick\", \"WidgetClick\"])\n          .as_array();\n\n\n        let missedClicks = clickEvents.filter(e => {\n          if (e.type === \"ScreenClick\" && passiveScreens[e.screen] === true) {\n            return true\n          }\n          if (e.type === \"WidgetClick\" && passiveWidgets[e.widget] === true) {\n            return true\n          }\n\n          return false\n        })\n\n        return missedClicks;\n\n\n      \n    },\n\n\n    getScreenClicks() {\n      if (!this.cache[\"screenClicks\"]) {\n        /**\n         * FIXME: This could be nice with regards to the overlays....\n         *\n         * Some clicks should be attributed the to overlay, nit the clicks, or?\n         */\n        var clickEvents = this.df.select(\"type\", \"in\", [\n          \"ScreenClick\",\n          \"WidgetClick\",\n        ]);\n        var clickEventsCount = clickEvents.count(\"screen\");\n        var totalWidgetEvents = clickEventsCount.sum();\n\n        var widgetEvents = this.df.select(\"type\", \"==\", \"ScreenClick\");\n        var widgetScreenEvents = widgetEvents.count(\"screen\");\n\n        var clicks = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          clicks[screen.id] = widgetScreenEvents.get(screen.id, null, 0);\n        }\n\n        this.cache[\"screenClicks\"] = {\n          clicks: clicks,\n          total: totalWidgetEvents,\n        };\n      }\n\n      return this.cache[\"screenClicks\"];\n    },\n\n    getOverlayClicks() {\n      if (!this.cache[\"overlayCicks\"]) {\n        /**\n         * FIXME: This could be nice with regards to the overlays....\n         *\n         * Some clicks should be attributed the to overlay, nit the clicks, or?\n         */\n        var widgetEvents = this.df.select(\"type\", \"==\", \"ScreenClick\");\n        var widgetScreenEvents = widgetEvents.count(\"overlay\");\n        var totalWidgetEvents = widgetScreenEvents.sum();\n\n        var clicks = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          clicks[screen.id] = widgetScreenEvents.get(screen.id, null, 0);\n        }\n\n        this.cache[\"overlayCicks\"] = {\n          clicks: clicks,\n          total: totalWidgetEvents,\n        };\n      }\n\n      return this.cache[\"overlayCicks\"];\n    },\n\n    getOverlayWidgetClicks() {\n      if (!this.cache[\"overlayWidgetCicks\"]) {\n        /**\n         * FIXME: This could be nice with regards to the overlays....\n         *\n         * Some clicks should be attributed the to overlay, nit the clicks, or?\n         */\n        var widgetEvents = this.df.select(\"type\", \"==\", \"WidgetClick\");\n        var widgetScreenEvents = widgetEvents.count(\"overlay\");\n        var totalWidgetEvents = widgetScreenEvents.sum();\n\n        var clicks = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          clicks[screen.id] = widgetScreenEvents.get(screen.id, null, 0);\n        }\n\n        this.cache[\"overlayWidgetCicks\"] = {\n          clicks: clicks,\n          total: totalWidgetEvents,\n        };\n      }\n\n      return this.cache[\"overlayWidgetCicks\"];\n    },\n\n    getLineWidgetData() {\n      if (!this.cache[\"lineWidgetData\"]) {\n        let result = {}\n        let allWidetData = this.getWidgetData()\n        let maxClicksAbs = 0\n        // filter only for clicks on lines, and calcuate the clicksRel\n        for (let id in this.model.lines) {\n          let from = this.model.lines[id].from\n          if (allWidetData[from]) {\n            const clicksAbs = allWidetData[from].clicksAbs\n            result[from] = {\n              clicksAbs: clicksAbs\n            }\n            maxClicksAbs = Math.max(maxClicksAbs, clicksAbs)\n          }\n          Object.values(result).forEach(v => {\n            v.clicksRel = v.clicksAbs / maxClicksAbs\n          })\n        }\n        this.cache[\"lineWidgetData\"] = result\n      }\n      return this.cache[\"lineWidgetData\"]\n    },\n\n    getWidgetData() {\n      if (!this.cache[\"widgetData\"]) {\n        var analytics = new Analytics();\n        var widgets = {};\n        var data = analytics.getWidgetStatistics(this.sourceModel, this.df);\n        for (var id in data) {\n          widgets[id] = data[id];\n        }\n        this.cache[\"widgetData\"] = widgets;\n      }\n      return this.cache[\"widgetData\"];\n    },\n\n    getFirstNClicksData(events, n) {\n      console.debug('getFirstNClicksData', events.length)\n      const analytics = new Analytics();\n      return analytics.getFirstNClicks(events, n);\n    },\n\n\n  },\n  mounted() { },\n};\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DataProcessing.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DataProcessing.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./DataProcessing.vue?vue&type=template&id=2ca697e6\"\nimport script from \"./DataProcessing.vue?vue&type=script&lang=js\"\nexport * from \"./DataProcessing.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\n<template>\n  <div class=\"MatcCanvas MatcAnalyticCanvas\">\n    <div class=\"MatcCanvasFrame\" data-dojo-attach-point=\"frame\">\n      <div class=\"MatcCanvasContainer MatcCanvasZoomable\" data-dojo-attach-point=\"container\">\n        <div class=\"MatcCanvasContainer\" data-dojo-attach-point=\"zoomContainer\">\n          <div data-dojo-attach-point=\"screenContainer\" class=\"MatcCanvasLayer\"></div>\n          <div data-dojo-attach-point=\"widgetContainer\" class=\"MatcCanvasLayer\"></div>\n          <div data-dojo-attach-point=\"svgContainer\" class=\"MatcCanvasLayer MatcCanvasSVGLayer\"></div>\n        </div>\n        <div data-dojo-attach-point=\"dndContainer\" class=\"MatcDnDLayer\"></div>\n      </div>\n    </div>\n    <div class=\"MatcCanvasScrollBar MatcCanvasScrollBarRight\" data-dojo-attach-point=\"scrollRight\">\n      <div class=\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrRight\" data-dojo-attach-point=\"scrollRightCntr\">\n        <div class=\"MatchCanvasScrollHandle\" data-dojo-attach-point=\"scrollRightHandler\"></div>\n      </div>\n    </div>\n    <div class=\"MatcCanvasScrollBar MatcCanvasScrollBarBottom\" data-dojo-attach-point=\"scrollBottom\" :style=\"'padding-left:' + this.layerListWidth + 'px'\">\n      <div class=\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrBottom\" data-dojo-attach-point=\"scrollBottomCntr\" >\n        <div class=\"MatchCanvasScrollHandle\" data-dojo-attach-point=\"scrollBottomHandler\"></div>\n      </div>\n    </div>\n    <div class=\"MatcMessage\" data-dojo-attach-point=\"message\"></div>\n  </div>\n</template>\n\n<style lang=\"css\">\n@import url(\"../../style/css/legacy.css\");\n</style>\n<style lang=\"scss\">\n@import \"../../style/matc.scss\";\n@import \"../../style/canvas/all.scss\";\n@import '../../style/toolbar/all.scss';\n</style>\n\n<script>\nimport DojoWidget from \"dojo/DojoWidget\";\nimport css from \"dojo/css\";\n\nimport Logger from \"common/Logger\";\nimport on from \"dojo/on\";\nimport touch from \"dojo/touch\";\nimport lang from \"dojo/_base/lang\";\n\nimport win from \"dojo/_base/win\";\nimport topic from \"dojo/topic\";\n\nimport DomBuilder from \"common/DomBuilder\";\nimport DataFrame from \"common/DataFrame\";\nimport _DragNDrop from \"common/_DragNDrop\";\n\nimport Heat from \"dash/Heat\";\nimport Render from \"canvas/Render\";\nimport Lines from \"canvas/Lines\";\nimport DnD from \"canvas/DnD\";\nimport Add from \"canvas/Add\";\nimport Select from \"canvas/Select\";\nimport Distribute from \"canvas/Distribute\";\nimport GridResize from \"canvas/GridResize\";\nimport Tools from \"canvas/Tools\";\nimport Zoom from \"canvas/Zoom\";\nimport Util from \"core/Util\";\nimport InlineEdit from \"canvas/InlineEdit\";\nimport Scroll from \"canvas/Scroll\";\nimport Upload from \"canvas/Upload\";\nimport Comment from \"canvas/Comment\";\nimport KeyBoard from \"canvas/KeyBoard\";\nimport Resize from \"canvas/Resize\";\nimport Replicate from \"canvas/Replicate\";\nimport Analytics from \"dash/Analytics\";\nimport FastDomUtil from \"core/FastDomUtil\";\nimport * as d3 from \"d3\";\nimport _Color from 'common/_Color'\n\nimport UserJourney from './UserJourney'\nimport DropOff from './DropOff'\nimport DataProcessing from './DataProcessing'\n\nexport default {\n  name: \"AnalyticCanvas\",\n  props:['viewport'],\n  mixins: [\n    DojoWidget,\n    _DragNDrop,\n    _Color,\n    Util,\n    Render,\n    Lines,\n    DnD,\n    Add,\n    Select,\n    Distribute,\n    GridResize,\n    Tools,\n    Zoom,\n    InlineEdit,\n    Scroll,\n    Upload,\n    KeyBoard,\n    Resize,\n    Replicate,\n    Comment,\n    Heat,\n    UserJourney,\n    DropOff,\n    DataProcessing\n  ],\n  data: function () {\n    return {\n      mode: \"view\",\n      zoom: 1,\n      analyticMode: \"HeatmapClick\",\n      resizeEnabled: false,\n      renderDND: true,\n      dragNDropMinTimeSpan: 0,\n      wireInheritedWidgets: true,\n      taskLineOpacity: 1,\n      isBlackAndWhite: false,\n      dropOffLineWidth: 25,\n      dropOffLineColor: '#555',\n      dropOffEventWidth: 40,\n      userJourneyEndColor: '#f03131',\n      layerListWidth: 256\n    };\n  },\n  components: {},\n  methods: {\n    postCreate() {\n      this.logger = new Logger(\"AnalyticCanvas\");\n      this.logger.log(2, \"constructor\", \"entry\");\n      this.cache = {};\n      this.moveMode = \"classic\";\n      this.domUtil = new FastDomUtil();\n      this.analyticLines = {}\n      this.analyticCircles = {}\n\n      this.logger.log(2, \"postCreate\", \"entry\");\n      this.initSize();\n\n      /**\n       * init container size and position\n       */\n      this.canvasPos = {\n        x: this.canvasStartX,\n        y: this.canvasStartY,\n        w: this.canvasFlowWidth,\n        h: this.canvasFlowHeight,\n      };\n      this.initViewport()\n      this.initContainerSize();\n      this.setContainerPos();\n\n      /**\n       * Init remaining sub components\n       */\n      this.initSelection()\n      this.initRender();\n      this.initAnalyticSVG()\n      this.initZoom();\n      this.initScrollBars();\n      this.initComment();\n      this.initSettings();\n      this.initWiring();\n      this.initKeys();\n      this.initMouseTracker()\n      this.initDarkModeListener()\n      this.initLayer()\n\n      this.db = new DomBuilder();\n\n      /**\n       * Init Listeners\n       */\n      this.own(\n        topic.subscribe(\n          \"matc/toolbar/click\",\n          lang.hitch(this, \"onToolbarClick\")\n        )\n      );\n      this.own(on(win.body(), \"keydown\", lang.hitch(this, \"onKeyPress\")));\n      this.own(on(win.body(), \"keyup\", lang.hitch(this, \"onKeyUp\")));\n\n      this.logger.log(2, \"postCreate\", \"exit!!!\");\n    },\n\n    initLayer (){\n\t\t\tthis.logger.log(-2,\"initLayer\", \"entry\");\n\t\t\tconst w = localStorage.getItem('quxLayerListWidth')\n\t\t\tif (w && !isNaN(w * 1)) {\n\t\t\t\tthis.setLayerListWidth( w * 1)\t\t\t\t\n\t\t\t}\n\t\t},\n\n\n    setLayerListWidth (w) {\n      this.layerListWidth = w\n    },\n \n    showError(msg) {\n      if (this.message) {\n        css.add(this.message, \"MatcMessageError\");\n        css.remove(this.message, \"MatcMessageSuccess MatcMessageHint\");\n        this.message.textContent = msg;\n        setTimeout(lang.hitch(this, \"hideMessage\"), 3000);\n      }\n    },\n\n    XlineFunction(line) {\n      return this.straightLineFunction(line)\n    },\n\n    setPublic(isPublic) {\n      this.isPublic = isPublic;\n    },\n\n    setModelService(s) {\n      this.sourceModelService = s;\n    },\n\n    setCommentService(s) {\n      this.commentService = s;\n    },\n\n    setToolbar(t) {\n      this.toolbar = t;\n      this.onChangeCanvasViewConfig();\n    },\n\n    setMouseListener(callback) {\n      this.mouseListenerCallback = callback\n    },\n\n    inlineEditInit() {\n      this.logger.log(2, \"inlineEditInit\", \"enter\");\n    },\n\n    setMouseData(data) {\n      this.logger.log(0, \"setMouseData\", \"enter > \" + data.length);\n      // this.mouseData = this.computeMouseDistribution(data, this.sourceModel);\n      this.mouseData = data;\n      if (data.length == 0) {\n        this.showError(\"No Mouse data was recorded\");\n      }\n    },\n\n    setBW(isBW) {\n      this.logger.log(1, \"setBW\", \"enter > \" + isBW);\n      if (isBW) {\n        css.add(this.container, \"MatcCanvasBW\");\n      } else {\n        css.remove(this.container, \"MatcCanvasBW\");\n      }\n    },\n\n    onChangeCanvasViewConfig() {\n      if (this.toolbar) {\n        this.toolbar.setCanvasViewConfig({\n          zoom: this.zoom,\n          renderLines: this.renderLines,\n          showComments: this.showComments,\n          isBlackAndWhite: this.isBlackAndWhite,\n        });\n      }\n    },\n\n    setCanvasViewConfig(key, value) {\n      this.logger.log(-1, \"setCanvasViewConfig\", \"enter > \" + key, value);\n      if (key === \"zoom\") {\n        this.setZoomFactor(value);\n      }\n\n      if (key === \"renderLines\") {\n        this.setViewLines(value);\n      }\n\n      if (key === \"showComments\") {\n        this.setCommentView(value);\n      }\n\n      if (key === \"isBlackAndWhite\") {\n        this.isBlackAndWhite = value;\n        this.setBW(value);\n      }\n    },\n\n    /**********************************************************************\n     * Lines\n     **********************************************************************/\n\n    initAnalyticSVG() {\n      this.logger.log(3, \"initAnalyticSVG\", \"entry\");\n      let bodySelection = d3.select(this.svgContainer);\n      this.analyticSVG = bodySelection.append(\"svg\").attr(\"width\", this.canvasPos.h).attr(\"height\", this.canvasPos.w);\n    },\n\n    cleanUpAnalyticLines() {\n      if (this.analyticSVG) {\n        this.analyticSVG.selectAll(\"*\").remove();\n      }\n      this.analyticLines = {}\n      this.analyticCircles = {}\n    },\n\n    drawLine(id, line) {\n      let color = this.defaultLineColor\n      let width = this.defaultLineWidth\n      if (this.model && this.model.lines && this.model.lines[id]) {\n        let modelLine = this.model.lines[id]\n        let widgetData = this.getLineWidgetData()\n        if (widgetData[modelLine.from]) {\n          let data = widgetData[modelLine.from]\n          let p = data.clicksRel\n          //width = Math.max(0.3, Math.round(1 * p))\n          color = this.mixColor(p)\n        }\n      }\n      return this.drawSVGLine(id, line, color, width, 1);\n    },\n\n    drawAnalyticLine(id, line, color, width, opacity) {\n      const svg = this.analyticSVG.append(\"path\")\n        .attr(\"d\", this.lineFunction(line))\n        .attr(\"stroke\", color)\n        .attr(\"stroke-width\", width)\n        .attr(\"fill\", \"none\")\n        .style(\"opacity\", opacity);\n\n      this.analyticLines[id] = svg\n    },\n\n\n    drawStraightAnalyticLine(id, line, color, width, opacity) {\n      const svg = this.analyticSVG.append(\"path\")\n        .attr(\"d\", this.straightLineFunction(line))\n        .attr(\"stroke\", color)\n        .attr(\"stroke-width\", width)\n        .attr(\"fill\", \"none\")\n        .style(\"opacity\", opacity);\n\n      this.analyticLines[id] = svg\n    },\n\n\n\n    /**********************************************************************\n     * Wiring\n     **********************************************************************/\n\n    initWiring() {\n      this.logger.log(-1, \"initWiring\", \"enter\");\n      this.own(on(this.dndContainer, \"mousedown\", (e) => this.dispatchMouseDown(e)));\n    },\n\n    dispatchMouseDownScreen(e, id) {\n      this.logger.log(-1, \"dispatchMouseDownScreen\", \"enter\", id);\n      let dndDiv = this.screenDivs[id];\n      let screen = this.model.screens[id];\n      this.onScreenDndClick(screen.id, dndDiv, null);\n    },\n\n    dispatchMouseDownWidget(e, id) {\n      this.logger.log(-1, \"dispatchMouseDownWidget\", \"enter\", id);\n      let div = this.widgetDivs[id];\n      this.onWidgetDndClick(id, div);\n    },\n\n    /**********************************************************************\n     * Settings\n     **********************************************************************/\n\n    afterUpdateDnd(zoomedModel) {\n      this.logger.log(1, \"afterUpdateDnd\", \"enter > \", zoomedModel);\n    },\n\n    initSettings() {\n      this.logger.log(1, \"initSettings\", \"enter > \");\n      /**\n       * default settings\n       */\n      this.settings = {\n        canvasTheme: \"MatcLight\",\n        lineColor: \"#333\",\n        lineWidth: 1,\n        storePropView: true,\n        moveMode: \"ps\",\n        mouseWheelMode: \"scroll\",\n      };\n\n      var s = this._getStatus(\"matcSettings\");\n      if (s) {\n        if (s.canvasTheme) {\n          this.settings.canvasTheme = s.canvasTheme;\n        }\n        if (s.lineColor) {\n          this.settings.lineColor = s.lineColor;\n        }\n        if (s.lineWidth) {\n          this.settings.lineWidth = s.lineWidth;\n        }\n      } else {\n        this.logger.log(2, \"initSettings\", \"exit>  no saved settings\");\n      }\n\n      this.applySettings(this.settings);\n    },\n\n    getSettings() {\n      return this.settings;\n    },\n\n    setSettings(s) {\n      /**\n       * Mixin values\n       */\n      if (s.canvasTheme) {\n        this.settings.canvasTheme = s.canvasTheme;\n      }\n      if (s.lineColor) {\n        this.settings.lineColor = s.lineColor;\n      }\n      if (s.lineWidth) {\n        this.settings.lineWidth = s.lineWidth;\n      }\n      if (s.storePropView != null) {\n        this.settings.storePropView = s.storePropView;\n      }\n\n      if (s.mouseWheelMode != null) {\n        this.settings.mouseWheelMode = s.mouseWheelMode;\n      }\n\n      this._setStatus(\"matcSettings\", this.settings);\n\n      this.applySettings(this.settings);\n      this.rerender();\n    },\n\n    applySettings(s) {\n      this.logger.log(\n        2,\n        \"applySettings\",\n        \"enter > \" + s.canvasTheme + \" &> \" + s.moveMode\n      );\n\n      if (s.lineColor) {\n        this.defaultLineColor = s.lineColor;\n      }\n      if (s.lineWidth) {\n        this.defaultLineWidth = s.lineWidth;\n      }\n      if (s.canvasTheme) {\n        this.setCanvasTheme(s.canvasTheme)\n      }\n\n      if (s.mouseWheelMode) {\n        this._mouseWheelMode = s.mouseWheelMode;\n      }\n\n      this.settings = s;\n    },\n\n\n    setCanvasTheme(canvasTheme) {\n\n      if (canvasTheme === \"MatcAuto\") {\n        this.logger.log(-1, \"setCanvasTheme\", \"enter > auto: \" + canvasTheme + ' > OS: ' + this.isDarkModeOS())\n        if (this.isDarkModeOS()) {\n          canvasTheme = 'MatcDark'\n        } else {\n          canvasTheme = 'MatcLight'\n        }\n      }\n\n      if (this._lastCanvasTheme) {\n        css.remove(win.body(), this._lastCanvasTheme);\n      }\n\n      css.add(win.body(), canvasTheme)\n      this._lastCanvasTheme = canvasTheme;\n\n      if (canvasTheme == \"MatcLight\") {\n        this.defaultLineColor = \"#49C0F0\";\n      } else {\n        this.defaultLineColor = \"#49C0F0\";\n      }\n    },\n\n    initDarkModeListener() {\n      const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\")\n      this.own(on(mediaQuery, 'change', () => {\n        this.logger.log(-1, \"initDarkModeListener\", \"change\");\n        if (this.settings.canvasTheme === 'MatcAuto') {\n          this.setCanvasTheme(this.settings.canvasTheme)\n        }\n      }))\n    },\n\n\n    isDarkModeOS() {\n      if (window.matchMedia) {\n        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n          return true\n        } else {\n          return false\n        }\n      }\n      return true\n    },\n    /**********************************************************************\n     * DnD.js overwrites\n     **********************************************************************/\n\n    onWidgetDndClick(id, div, pos, e) {\n      this.logger.log(2, \"onWidgetDndClick\", \"enter > \" + id);\n      this.stopEvent(e);\n      this.onWidgetSelected(id);\n      this.selectAnalyticDiv(id);\n      this.setState(0);\n    },\n\n    onScreenDndClick(id, div, pos, e) {\n      this.logger.log(2, \"onScreenDndClick\", \"entry > \" + id);\n      this.stopEvent(e);\n      this.setSelectedScreens([id]);\n      this.selectAnalyticDiv(id);\n      this.setState(0);\n    },\n\n    onCanvasSelected() {\n      this.logger.log(2, \"onCanvasSelected\", \"entry > \");\n      this.selectAnalyticDiv(null);\n      if (this.toolbar) {\n        this.toolbar.unselect();\n        this.toolbar.onCanvasSelected()\n      }\n    },\n\n    selectAnalyticDiv(id) {\n      if (this._analyticLastSelectedDiv) {\n        css.remove(this._analyticLastSelectedDiv, \"MatcHeapMapWidgetSelected\");\n        delete this._analyticLastSelectedDiv;\n      }\n      if (this.analyticsDivs && this.analyticsDivs[id]) {\n        let div = this.analyticsDivs[id];\n        css.add(div, \"MatcHeapMapWidgetSelected\");\n        this._analyticLastSelectedDiv = div;\n      }\n\n      if (this.widgetDivs && this.widgetDivs[id]) {\n        let div = this.widgetDivs[id];\n        css.add(div, \"MatcHeapMapWidgetSelected\");\n        this._analyticLastSelectedDiv = div;\n      }\n    },\n\n    /**********************************************************************\n     * Rendering\n     **********************************************************************/\n\n    renderLayerList() {\n      this.logger.log(1, \"renderLayerList\", \"entry > \");\n    },\n\n    afterRender() {\n      this.logger.log(1, \"afterRender\", \"entry > \" + this.analyticMode);\n      this.cleanUpAnalytics();\n\n      try {\n        this._renderHeatMap();\n      } catch (e) {\n        this.logger.error(\"afterRender\", \"Could not render heatmaps \", e);\n        this.logger.sendError(e);\n      }\n    },\n\n    hasSelect() {\n      return this.mode != \"addComment\";\n    },\n\n    _renderHeatMap() {\n      this.logPageView(\"/analytics/workspace/\" + this.analyticMode + \".html\");\n\n      this.setBW(this.isBlackAndWhite);\n\n      /**\n       * Init everything so the _Heat.js code works correctly\n       */\n      this.cleanUpHeat();\n\n      /**\n       * FIXME: Make this customisable\n       */\n      if (\n        this.sourceModel.type == \"smartphone\" ||\n        this.sourceModel.type == \"tablet\"\n      ) {\n        this.defaultRadius = this.sourceModel.screenSize.w / 20;\n        this.defaultBlur = this.sourceModel.screenSize.w / 15;\n      } else {\n        this.defaultRadius = this.sourceModel.screenSize.w / 120;\n        this.defaultBlur = this.sourceModel.screenSize.w / 100;\n      }\n\n      this.logger.log(0, \"onScreenRendered\", \"adjust radios to \" + this.defaultRadius);\n\n      const screenGrouping = this.df.groupBy(\"screen\");\n\n      this.heatmapDivs = {};\n      for (var id in this.sourceModel.screens) {\n        const screen = this.sourceModel.screens[id];\n\n        const screenDF = screenGrouping.get(id);\n        let screenEvents = [];\n        if (screenDF) {\n          screenEvents = screenDF.as_array();\n        }\n\n        if (this[\"_render_\" + this.analyticMode]) {\n          /**\n           * create canvas\n           */\n          const div = this.createBox(screen);\n          css.add(div, \"MatcHeatMapScreen\");\n          const cntr = this.db.div(\"MatcHeapMapContainer\").build(div);\n\n          const canvas = this.db.canvas(screen.w, screen.h).build(cntr);\n          const ctx = canvas.getContext(\"2d\");\n\n          this[\"_render_\" + this.analyticMode](screenEvents, screen, ctx, div);\n\n          if (this.hasSelect()) {\n            this.tempOwn(on(div, touch.press, lang.hitch(this, \"onScreenDndClick\", screen.id, div, null)));\n          }\n\n          this.widgetContainer.appendChild(div);\n\n          this.heatmapDivs[screen.id] = div;\n          this.analyticsDivs[screen.id] = div;\n        }\n      }\n\n      /**\n       * now draw a div for every widgert so we can also select them.\n       * A little hack but I dunno have a better way...\n       */\n      if (\"UserJourney\" != this.analyticMode && \"Gesture\" != this.analyticMode && 'DropOff' != this.analyticMode) {\n        this.hideWidgetDND = true;\n      } else {\n        this.hideWidgetDND = false;\n      }\n\n      if (this[\"_render_global_\" + this.analyticMode]) {\n        this[\"_render_global_\" + this.analyticMode]();\n      }\n    },\n\n    _render_HeatmapMouse(screenEvents, screen, ctx) {\n      this.logger.log(0, \"_render_HeatmapMouse\", \"entry > \" + screen.name);\n      /**\n       * FIXME: we could make this fastter by caching some stuff,\n       * or at least soft the events by screen\n       */\n      let mouseData = this.mouseData.filter((m) => m.screen === screen.id);\n      mouseData = this._filterSelectedSessions(mouseData)\n      let data = this.computeMouseDistribution(mouseData, this.sourceModel);\n      if (data[screen.id]) {\n        let d = data[screen.id];\n        this.draw(ctx, d.values, d.max, screen.w, screen.h);\n      }\n    },\n\n    _render_HeatmapClick(screenEvents, screen, ctx, div) {\n      this.logger.log(2, \"_render_HeatmapClick\", \"entry > \");\n\n      const events = this._filterSelectedSessions(this.events)\n\n      const df = new DataFrame(events)\n      var numberOfClicks = -1;\n      if (this.analyticParams) {\n        numberOfClicks = this.analyticParams.numberOfClicks;\n      }\n\n      if (numberOfClicks === \"screenClicks\") {\n\n        let screenClicks = this.getScreenClicksOnBackground(df);\n        screenClicks = screenClicks.as_array();\n        this._render_pixel_screen_heatmap(screenClicks, screen, ctx, div);\n\n      } else if (numberOfClicks === \"missedClicks\") {\n\n        let missedClicks = this.getMissedClicks(df);\n        this._render_pixel_screen_heatmap(missedClicks, screen, ctx, div);\n\n      } else if (numberOfClicks > 0) {\n\n        let firstNEvents = this.getFirstNClicksData(events, numberOfClicks);\n        this._render_pixel_screen_heatmap(firstNEvents, screen, ctx, div);\n\n      } else {\n\n        let filtered = this.getClickEvents(new DataFrame(events));\n        let actionEvents = filtered.as_array();\n        this._render_pixel_screen_heatmap(actionEvents, screen, ctx, div);\n\n      }\n    },\n\n    _filterSelectedSessions(events) {\n      if (this.analyticParams && this.analyticParams.sessions) {\n        const sessions = this.analyticParams.sessions\n        return events.filter(e => {\n          return sessions[e.session] === true\n        })\n      }\n      return events\n    },\n\n    _render_pixel_screen_heatmap(actionEvents, screen, ctx) {\n      if (screen.w <= 0 || screen.h <= 0) {\n        this.logger.error(\"_render_pixel_screen_heatmap\", \"Error > bad screen dimension: \" + screen.name);\n        return\n      }\n      try {\n        const events = [];\n        for (let i = 0; i < actionEvents.length; i++) {\n          const e = actionEvents[i];\n          const screenID = this.getEventScreenId(e);\n          if (screenID == screen.id) {\n            events.push(e);\n          }\n        }\n        const dist = this.computeClickDistribution(events, screen.w, screen.h);\n        this.draw(ctx, dist.values, dist.max, screen.w, screen.h);\n      } catch (err) {\n        this.logger.error(\"_render_pixel_screen_heatmap\", \"Error > \" + screen.name);\n      }\n\n    },\n\n    _render_HeatmapScrollView(screenEvents, screen, ctx) {\n      this.logger.log(2, \"_render_HeatmapScrollView\", \"entry > \");\n\n      var dist = this.computeScrollVisibiltyDistribution(\n        screenEvents,\n        this.sourceModel.screenSize.h,\n        screen.h\n      );\n      this.drawSections(dist, ctx, screen.h, screen.w);\n    },\n\n    _render_HeatmapScrollTime(screenEvents, screen, ctx) {\n      this.logger.log(2, \"_render_HeatmapScrollTime\", \"entry > \");\n\n      var dist = this.computeScrollDurationDistrubtion(\n        screenEvents,\n        this.sourceModel.screenSize.h,\n        screen.h\n      );\n      this.drawSections(dist, ctx, screen.h, screen.w);\n    },\n\n    _render_HeatmapViews(screenEvents, screen, ctx) {\n      this.logger.log(2, \"HeatmapViews\", \"entry > \");\n\n      if (screen.style.overlay) {\n        let screenViews = this.getOverlayViews();\n        let count = screenViews.counts[screen.id];\n        if (!count) {\n          count = 0;\n        }\n\n        ctx.globalAlpha = 0.4;\n        let color = this.mixColor(count / screenViews.total);\n        ctx.fillStyle = color;\n        ctx.fillRect(0, 0, screen.w, screen.h);\n      } else {\n        let screenViews = this.getScreenViews();\n        let count = screenViews.counts[screen.id];\n        if (!count) {\n          count = 0;\n        }\n\n        ctx.globalAlpha = 0.4;\n        let color = this.mixColor(count / screenViews.total);\n        ctx.fillStyle = color;\n        ctx.fillRect(0, 0, screen.w, screen.h);\n      }\n    },\n\n    _render_HeatmapDwelTime(screenEvents, screen, ctx) {\n      this.logger.log(2, \"HeatmapDwelTime\", \"entry > \");\n\n      if (screen.style.overlay) {\n        let times = this.getOverlayDwellTime();\n        let time = times.times[screen.id];\n        if (!time) {\n          time = 0;\n        }\n        ctx.globalAlpha = 0.4;\n        let color = this.mixColor(time / times.total);\n        ctx.fillStyle = color;\n        ctx.fillRect(0, 0, screen.w, screen.h);\n      } else {\n        let times = this.getScreenDwellTime();\n        let time = times.times[screen.id];\n        if (!time) {\n          time = 0;\n        }\n        ctx.globalAlpha = 0.4;\n        let color = this.mixColor(time / times.total);\n        ctx.fillStyle = color;\n        ctx.fillRect(0, 0, screen.w, screen.h);\n      }\n    },\n\n\n\n    drawDurationLine(session, line, defaultColor, maxDuration) {\n      for (let i = 0; i < line.length - 1; i++) {\n        let start = line[i]\n        let end = line[i + 1]\n        let p = end.duration / maxDuration\n        let width = Math.round(p * 6) + 2\n        let color = defaultColor\n        if (!defaultColor) {\n          //color = this.mixColor(Math.min(1, p))\n        }\n        this.drawStraightAnalyticLine(session, [start, end], color, width, this.taskLineOpacity);\n      }\n    },\n\n\n\n    /**********************************************************************\n     * Gesture\n     **********************************************************************/\n\n    _render_global_Gesture() {\n      this.logger.log(0, \"_render_global_Gesture\", \"entry > \");\n\n      var gestures = this.getGestures();\n      var db = new DomBuilder();\n\n      for (var i = 0; i < gestures.length; i++) {\n        var e = gestures[i];\n        var gesture = e.gesture;\n\n        var screenID = this.getEventScreenId(e);\n        var screen = this.sourceModel.screens[screenID];\n        if (screen && gesture) {\n          var line = [];\n\n          var start = e.gesture.start;\n          var end = e.gesture.end;\n          if (start && end) {\n            var x = start.x * screen.w + screen.x;\n            var y = start.y * screen.h + screen.y;\n            line.push({ x: x, y: y, d: \"right\" });\n\n            this._renderGestureStart(x, y, this.analyticParams.color, db);\n\n            x = end.x * screen.w + screen.x;\n            y = end.y * screen.h + screen.y;\n            line.push({ x: x, y: y, d: \"right\" });\n\n            var r = Math.max(1, Math.round(3 * this.zoom));\n            this.drawSVGLine(\"\", line, this.analyticParams.color, r, 1);\n          }\n        } else {\n          console.warn(\n            \"_render_global_Gesture()\",\n            \"Screen is not there\",\n            e.screen\n          );\n        }\n      }\n    },\n\n    _renderGestureStart(x, y, color, db) {\n      var cntr = db\n        .div(\"MatcAnalyticCanvasEventCntr\")\n        .build(this.widgetContainer);\n      cntr.style.left = Math.round(x) + \"px\";\n      cntr.style.top = Math.round(y) + \"px\";\n\n      var div = db\n        .div(\"MatcAnalyticCanvasEvent MatcAnalyticCanvasEvent\")\n        .build(cntr);\n      var r = Math.max(5, Math.round(15 * this.zoom));\n      div.style.width = r + \"px\";\n      div.style.height = r + \"px\";\n      div.style.top = -1 * Math.round(r / 2) + \"px\";\n      div.style.left = -1 * Math.round(r / 2) + \"px\";\n      div.style.backgroundColor = color;\n      return div;\n    },\n\n\n    cleanUpAnalytics() {\n      this.cleanUpAnalyticLines()\n\n      this.cleanUpNode(this.widgetContainer)\n      this.analyticsDivs = {};\n    },\n\n\n\n    /**********************************************************************\n     * DI\n     **********************************************************************/\n\n    setController(c) {\n      this.logger.log(2, \"setController\", \"enter\");\n      this.controller = c;\n      c.setCanvas(this);\n    },\n\n    getController() {\n      if (this._controllerCallback) {\n        this[this._controllerCallback]();\n      }\n      return this.controller;\n    },\n\n    setControllerCallback(c) {\n      this._controllerCallback = c;\n    },\n\n    setModelFactory(f) {\n      this.logger.log(3, \"setModelFactory\", \"enter\");\n      this.factory = f;\n    },\n\n    setRenderFactory(f) {\n      this.logger.log(3, \"setRenderFactory\", \"enter\");\n      this.renderFactory = f;\n    },\n\n    setModel(model) {\n      this.sourceModel = model;\n      this.model = model\n      this.grid = this.sourceModel.grid;\n      this.setCommentView(this.showComments);\n    },\n\n    setEvents(events) {\n      this.logger.log(1, \"setEvents\", \"enter > # \" + events.length);\n      var analytics = new Analytics();\n      this.events = analytics.nornalizeContainerChildEvents(events);\n      this.df = new DataFrame(events);\n      this.df.sortBy(\"time\");\n      this.fixGestures(events);\n    },\n\n    setAnnotation(a) {\n      this.logger.log(2, \"setAnnotation\", \"enter > # \");\n      this.annotation = a;\n    },\n\n    setTest(t) {\n      this.logger.log(2, \"setTest\", \"enter > # \");\n      this.testSettings = t;\n    },\n\n    setAnalyticMode(mode, params) {\n      this.logger.log(2, \"setAnalyticMode\", \"entry > mode: \" + mode);\n      this.analyticMode = mode;\n      this.analyticParams = params;\n      this.rerender();\n\n      if (this.analyticCSS) {\n        css.remove(this.domNode, this.analyticCSS);\n      }\n\n      this.analyticCSS = mode;\n      css.add(this.domNode, this.analyticCSS);\n    },\n\n    setUser(u) {\n      this.user = u;\n    },\n\n    setMode(mode, forceRender) {\n      this.logger.log(2, \"setMode\", \"enter > \" + mode + \" != \" + this.mode + \" > \" + forceRender);\n      if (mode != this.mode) {\n        this.mode = mode;\n        if (this.toolbar) {\n          this.toolbar.setMode(mode);\n        }\n        this.rerender();\n      } else if (forceRender) {\n        this.rerender();\n      }\n    },\n\n    setSubMode () {\n\n    },\n\n    /***************************************************************************\n     * Keyboard handling\n     ***************************************************************************/\n\n    onKeyPress(e) {\n      this._currentKeyEvent = e;\n\n      if (this.state == \"simulate\" || this.state == \"dialog\") {\n        return;\n      }\n\n      var target = e.target;\n      if (css.contains(target, \"MatcIgnoreOnKeyPress\")) {\n        return;\n      }\n\n      /**\n       * The keycode is differently in every browser!\n       */\n      var k = e.keyCode ? e.keyCode : e.which;\n\n      if (k == 32) {\n        // space\n\n        if (!this._inlineEditStarted) {\n          this.stopEvent(e);\n          if (this.getMode() != \"move\") {\n            this.setMode(\"move\");\n            this.showHint(\"Move the mouse to move canvas...\");\n            this.onDragStart(this.container, \"container\", \"onCanvasDnDStart\", \"onCanvasDnDMove\", \"onCanvasDnDEnd\", null, this._lastMouseMoveEvent, true);\n          }\n        }\n\n        /**\n         * Arrow dispatch...\n         */\n      } else if (k == 37) {\n        this.onArrowLeft();\n      } else if (k == 39) {\n        this.onArrowRight();\n      } else if (k == 40) {\n        this.onArrowDown();\n      } else if (k == 38) {\n        this.onArrowUp();\n      } else if (k == 171 || k == 187) {\n        // +\n\n        if (!this._inlineEditStarted) {\n          this.onClickPlus();\n          this.stopEvent(e);\n        }\n      } else if (k == 173 || k == 189) {\n        //-\n\n        if (!this._inlineEditStarted) {\n          this.onClickMinus();\n          this.stopEvent(e);\n        }\n      }\n    },\n\n    getMode() {\n      return this.mode;\n    },\n\n    onKeyUp(e) {\n      var k = e.keyCode ? e.keyCode : e.which;\n      if (k == 32) {\n        this.onDragEnd(this._lastMouseMoveEvent);\n        this.setMode(\"view\");\n      }\n\n      delete this._currentKeyEvent;\n    },\n\n    /***************************************************************************\n     * Helper Functons\n     ***************************************************************************/\n\n    initMouseTracker() {\n      this.own(on(win.body(), \"mousemove\", lang.hitch(this, \"onMouseMove\")));\n    },\n\n    onMouseMove(e) {\n      var pos2 = this.getCanvasMousePosition(e, true);\n      //this._debugMouseLabel.innerHTML = \"[\" + Math.round(pos2.x) +\" , \"+ Math.round(pos2.y) + \"]\";\n      this._lastMousePos = pos2;\n      this._lastMouseMoveEvent = e;\n    },\n\n    destroy() {\n      this.cleanUp();\n    },\n\n    logPageView(url) {\n      this.logger.log(4, \"logPageView\", \"enter\", url);\n    },\n  },\n  mounted() { },\n};\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticCanvas.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticCanvas.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./AnalyticCanvas.vue?vue&type=template&id=9fde32f0\"\nimport script from \"./AnalyticCanvas.vue?vue&type=script&lang=js\"\nexport * from \"./AnalyticCanvas.vue?vue&type=script&lang=js\"\nimport style0 from \"./AnalyticCanvas.vue?vue&type=style&index=0&id=9fde32f0&prod&lang=css\"\nimport style1 from \"./AnalyticCanvas.vue?vue&type=style&index=1&id=9fde32f0&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import lang from 'dojo/_base/lang'\nimport win from 'dojo/win'\nimport Logger from 'common/Logger'\nimport Core from 'core/Core'\nimport CoreUtil from 'core/CoreUtil'\n\nexport default class AnalyticController extends Core{\n\n\tconstructor () {\n\t\tsuper()\n\t\tthis.logger = new Logger(\"AnalyticController\");\n\t\tthis.logger.log(2,\"constructor\", \"exit\");\n\t}\n\n\tsetModelService (s) {\n\t\tthis.modelService = s\n\t}\n\n\tsetCanvas(c){\n\t\tthis.logger.log(3,\"setCanvas\", \"entry\");\n\t\tthis._canvas = c;\n\t}\n\n\tsetToolbar(t){\n\t\tthis.logger.log(3,\"setToolbar\", \"entry\");\n\t\tthis.toolbar = t;\n\t}\n\n\tsetModelFactory(f){\n\t\tthis.logger.log(3,\"setModelFactory\", \"entry\");\n\t\tthis.factory = f;\n\t}\n\n\tsetModel(m, screenID){\n\n\t\tthis.logger.log(2,\"setModel\", \"entry > \" + screenID);\n\t\tthis.model = m;\n\t\tthis.inheritedModel = this.createInheritedModel(m);\n\t\tthis.inheritedModel = Core.addContainerChildrenToModel(this.inheritedModel);\n\t\tthis.oldModel = lang.clone(m);\n\t\tthis.render(screenID, () => {\n\t\t\tif(this.toolbar){\n\t\t\t\tthis.toolbar.setModel(m);\n\t\t\t} else {\n\t\t\t\tconsole.debug(\"No toolbar in controller!\");\n\t\t\t}\n\t\n\t\t});\n\n\t\tif (this._canvas) {\n\t\t\tthis._canvas.setFonts(m.fonts)\n\t\t\tthis._canvas.setModel(this.model)\n\t\t}\n\n\t\tthis.logger.log(3,\"setModel\", \"entry > \" + screenID);\n\t}\n\n\tsetMode(mode){\n\t\tthis.logger.log(0,\"setMode\", \"entry > \" + mode);\n\t\tthis.toolbar.setMode(mode);\n\t\tthis._canvas.setMode(mode);\n\t}\n\n\tsetSinglePage(enabled){\n\t\tthis.logger.log(0,\"setSinglePage\", \"entry > \" + enabled);\n\t}\n\n\tgetZoomFactor(){\n\t\tif(this._canvas){\n\t\t\treturn this._canvas.getZoomFactor();\n\t\t}\n\t\treturn 1;\n\t}\n\n\t/**********************************************************************\n\t * Canvas Delegates\n\t **********************************************************************/\n\n\trender(screenID, afterRenderCallback){\n\t\tthis.logger.log(2,\"render\", \"enter > screenID : \" + screenID);\n\t\tif(this._canvas){\n\t\t\t/**\n\t\t\t * resize the model\n\t\t\t */\n\t\t\tconst inheritedModel = CoreUtil.createInheritedModel(this.model)\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tthis._canvas.render(inheritedModel);\n\t\t\t\tif(screenID){\n\t\t\t\t\tthis._canvas.moveToScreen(screenID);\n\t\t\t\t}\n\t\t\t\tif (afterRenderCallback) {\n\t\t\t\t\tafterRenderCallback()\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\t_requestRendering(screenID){\n\t\tif (this._zoomedModel){\n\t\t\tthis._canvas.render(this._zoomedModel);\n\t\t\tif(screenID){\n\t\t\t\tthis._canvas.moveToScreen(screenID);\n\t\t\t}\n\t\t}\n\t\tthis._zoomedModel = null;\n\t}\n\n\t_zoomToScreen(screenID){\n\t\tif (screenID && this.model.screens[screenID]){\n\t\t\t/**\n\t\t\t * here we make sure the selected screen fits in the\n\t\t\t * browser window. We simply find the smallest possible\n\t\t\t * zoom factor and subtract 0.2 to make sure it fits in\n\t\t\t * browser\n\t\t\t */\n\t\t\tvar screen = this.model.screens[screenID];\n\t\t\tlet winBox = win.getBox();\n\t\t\tlet x =  winBox.w / screen.w;\n\t\t\tlet y =  winBox.h / screen.h;\n\t\t\tvar zoom = (Math.floor( Math.min(x,y) * 10) / 10) -0.2 ;\n\t\t\tthis._canvas.setZoom(zoom);\n\n\t\t}\n\t}\n\n\t/**********************************************************************\n\t * Selection methods\n\t **********************************************************************/\n\n\tonWidgetSelected(id){\n\t\tthis.logger.log(0,\"onWidgetSelected\", \"enter > \"+ id);\n\t\tvar widget = this.inheritedModel.widgets[id];\n\t\tif(widget){\n\t\t\tif(this.toolbar){\n\t\t\t\tthis.toolbar.onWidgetSelected(widget);\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(\"onWidgetSelected() > No width with id\", id);\n\t\t}\n\t}\n\n\n\tonScreenSelected(id){\n\t\tthis.logger.log(1,\"onScreenSelected\", \"enter > \"+ id);\n\t\tvar screen = this.model.screens[id];\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.onScreenSelected(screen);\n\t\t}\n\t}\n\n\tonCanvasSelected(){\n\t\tthis.logger.log(1,\"onCanvasSelected\", \"enter \");\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.onCanvasSelected();\n\t\t}\n\t}\n\n\tonLineSelected(id){\n\t\tthis.logger.log(1,\"onLineSelected\", \"enter > \" + id);\n\t\tvar line = this.model.lines[id];\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.onLineSelected(line);\n\t\t}\n\t}\n\n\tonMultiSelect(selection){\n\t\tthis.logger.log(1,\"onMultiSelect\", \"enter > \");\n\t\tif(this.toolbar){\n\t\t\t/**\n\t\t\t * TODO: get all the model elements\n\t\t\t */\n\t\t\tthis.toolbar.onMultiSelect(selection);\n\t\t}\n\t}\n\n\tonGroupSelected(id){\n\t\tthis.logger.log(1,\"onGroupSelected\", \"enter > \" + id);\n\t\tif(this.model.groups && this.model.groups[id]){\n\t\t\tif(this.toolbar){\n\t\t\t\tvar group = this.model.groups[id];\n\t\t\t\tthis.toolbar.onGroupSelect(group);\n\t\t\t}\n\t\t}\n\t}\n\n\tunSelect(){\n\t\tif(this._canvas){\n\t\t\tthis._canvas.unSelect();\n\t\t}\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.cleanUp();\n\t\t}\n\t}\n\n\n\tshowSuccess(msg){\n\t\tif(this._canvas){\n\t\t\tthis._canvas.showSuccess(msg);\n\t\t}\n\t}\n\n\tshowError(msg){\n\t\tif(this._canvas){\n\t\t\tthis._canvas.showError(msg);\n\t\t}\n\t}\n}","<template>\n  <div class=\"MatcCanvasPage\" id=\"CanvasNode\" @wheel=\"onMouseWheel\">\n    <template v-if=\"selectedViewMode === 'Design'\">\n        <DesignToolbar ref=\"toolbar\" :pub=\"pub\"  @viewModeChange=\"onVieModeChange\" />\n        <DesignCanvas ref=\"canvas\" @viewport=\"onViewPortChange\" :viewport=\"viewport\" />\n    </template>\n    <template v-if=\"selectedViewMode === 'Heatmap'\">\n        <AnalyticToolbar ref=\"toolbar\" @viewModeChange=\"onVieModeChange\" />\n        <AnalyticCanvas ref=\"canvas\" @viewport=\"onViewPortChange\" :viewport=\"viewport\"/>\n    </template>\n \n  </div>\n</template>\n\n<style lang=\"scss\">\n  @import \"../../style/matc.scss\";\n  @import \"../../style/canvas/all.scss\";\n  @import '../../style/toolbar/all.scss';\n</style>\n<style lang=\"sass\">\n  @import \"../../style/bulma.sass\"\n</style>\n\n<script>\nimport DojoWidget from \"dojo/DojoWidget\";\nimport css from \"dojo/css\";\nimport win from \"dojo/win\";\nimport Toolbar from \"canvas/toolbar/Toolbar\";\nimport Canvas from \"canvas/Canvas\";\nimport Controller from \"canvas/controller/Controller\";\nimport ModelFactory from \"core/ModelFactory\";\nimport RenderFactory from \"core/RenderFactory\";\nimport lang from \"dojo/_base/lang\";\nimport on from \"dojo/on\";\nimport Services from \"services/Services\";\nimport Logger from \"common/Logger\";\nimport CollabSession from '../../canvas/controller/CollabSession'\n\nimport AnalyticToolbar from 'canvas/analytic/AnalyticToolbar'\nimport AnalyticCanvas from 'canvas/analytic/AnalyticCanvas'\nimport AnalyticController from 'canvas/analytic/AnalyticController'\n\nexport default {\n  name: \"Design\",\n  mixins: [DojoWidget],\n  data: function() {\n    return {\n      selectedViewMode: '',\n      viewport: null\n    };\n  },\n  components: {\n    'DesignToolbar': Toolbar,\n    'DesignCanvas': Canvas,\n    'AnalyticToolbar': AnalyticToolbar,\n    'AnalyticCanvas': AnalyticCanvas\n  },\n  computed: {\n    pub() {\n      return this.$route.meta && this.$route.meta.isPublic;\n    },\n    mode() {\n      if (this.pub) {\n        return \"public\";\n      }\n      return \"private\";\n    }\n  },\n  methods: {\n    onViewPortChange (viewport) {\n      this.viewport = viewport\n    },\n    onVieModeChange (mode) {\n      this.logger.log(-1, \"onVieModeChange\", \"enter\", mode);      \n      this.load(mode)\n    },\n    onMouseWheel (e) {\n      /**\n       * Cancel all left and right swipes to surpress back navigation\n       */\n      if (e && Math.abs(e.deltaX) > 50 ) {\n        this.logger.log(-1, \"onMouseWheel\", \"cancel\");\n        e.preventDefault();\n      }\n    },\n    load (mode) {\n      if (mode === 'Design') {\n        this.loadData(mode)\n      } else {\n      this.loadAnlyticData(mode)\n      }\n    },\n    loadData(mode) {\n      let id = this.$route.params.id;\n      this.logger.log(3, \"loadData\", \"enter\", id);\n      Promise.all([\n        this.loadApp(id),\n        this.loadCommands(id),\n        this.loadInvitations(id)\n      ]).then(values => {\n\n        this.cache.app = values[0]\n        this.cache.commands = values[1]\n        this.cache.inivitations = values[2]\n\n        const invitations = values[2];\n        const hash = this.getHashFromInvitation(invitations)\n        // ste mode and render\n        this.selectedViewMode = mode\n        this.$nextTick( () => {\n          this.buildCanvas(values[0], values[1], hash);\n        })\n      });\n    },\n\n    loadAnlyticData (mode) {\n      let id = this.$route.params.id\n      this.logger.log(0, 'loadAnlyticData', 'enter', id)\n      Promise.all([\n        this.loadApp(id),\n        this.loadTest(id),\n        this.loadEvents(id),\n        this.loadAnnotations(id),\n        this.loadInvitations(id)\n      ]).then(values => {\n\n        this.cache.app = values[0]\n        this.cache.test = values[1]\n        this.cache.events = values[2]\n        this.cache.annotation = values[3]\n        this.cache.inivitations = values[4]\n\n        const invitations = values[4];\n        const hash = this.getHashFromInvitation(invitations)\n        \n        this.selectedViewMode = mode\n        this.$nextTick( () => {\n          this.buildAnalyticCanvas(values[0], values[1], values[2], values[3], hash)\n        })\n\n      })\n    },\n\n    getHashFromInvitation(invitations) {\n      const temp = {};\n      for (let key in invitations) {\n        temp[invitations[key]] = key;\n      }\n      const hash = temp[1];\n      return hash\n    },\n\n    loadAll () {\n      let id = this.$route.params.id\n      this.logger.log(2, 'loadAll', 'enter', id)\n      Promise.all([\n        this.loadApp(id),\n        this.loadTest(id),\n        this.loadEvents(id),\n        this.loadAnnotations(id),\n        this.loadInvitations(id),\n        this.loadCommands(id)\n      ]).then(values => {\n\n        this.cache.app = values[0]\n        this.cache.test = values[1]\n        this.cache.events = values[2]\n        this.cache.annotation = values[3]\n        this.cache.inivitations = values[4]\n        this.cache.commands = values[5]\n      })\n    },\n    loadTest (id) {\n      if (this.cache.test) {\n        return this.cache.test\n      }\n      return this.modelService.findTest(id)\n    },\n\n    loadEvents (id) {\n      if (this.cache.events) {\n        return this.cache.events\n      }\n      return this.modelService.findEvents(id)\n    },\n\n    loadAnnotations (id) {\n      if (this.cache.annotation) {\n        return this.cache.annotation\n      }\n      return this.modelService.findSessionAnnotations(id)\n    },\n\n    loadApp (id) {\n      if (this.cache.app) {\n        return this.cache.app\n      }\n      return this.modelService.findApp(id)\n    },\n    loadCommands (id) {\n      if (this.cache.commands) {\n        return this.cache.commands\n      }\n      return this.modelService.getCommands(id)\n    },\n    loadInvitations (id) {\n      if (this.cache.inivitations) {\n        return this.cache.inivitations\n      }\n      return this.modelService.findInvitation(id)\n    },\n\n    setCache (key, value) {\n      this.cache[key] = value\n    },\n\n    buildCanvas(model, stack, hash) {\n      this.logger.log(3, \"buildCanvas\", \"enter\");\n\n      const canvas = this.$refs.canvas;\n      const toolbar = this.$refs.toolbar;\n      const controller = new Controller();\n      const service = this.modelService;\n\n      /**\n       * model factory\n       */\n       const factory = new ModelFactory();\n      factory.setModel(model);\n\n      /**\n       * render factory\n       */\n      const renderFactory = new RenderFactory();\n      renderFactory.setModel(model);\n      renderFactory.setHash(hash);\n\n      /**\n       * Dependency injection\n       */\n      controller.setModelService(service);\n      controller.setToolbar(toolbar);\n      controller.setModelFactory(factory);\n      if (this.pub) {\n        controller.setPublic(true);\n        canvas.setPublic(true);\n        toolbar.setPublic(true);\n      }\n\n      toolbar.setController(controller);\n      toolbar.setCommentService(Services.getCommentService());\n      toolbar.setCanvas(canvas);\n      toolbar.setUser(this.user);\n      toolbar.setModelFactory(factory);\n      toolbar.setContext(this.context);\n      toolbar.setModelService(service);\n      toolbar.setHash(hash);\n      \n      //canvas.setViewport(this.viewport)\n      canvas.setController(controller);\n      canvas.setCommentService(Services.getCommentService());\n      canvas.setToolbar(toolbar);\n      canvas.setRenderFactory(renderFactory);\n      canvas.setModelFactory(factory);\n      canvas.setModelService(service);\n   \n      canvas.setUser(this.user);\n\n      // wire shit together\n      this.tempOwn(on(toolbar, \"newScreen\", lang.hitch(canvas, \"addScreen\"))); // deprecated\n      this.tempOwn(on(toolbar, \"newWidget\", lang.hitch(canvas, \"addWidget\"))); // deprecated\n\n      this.tempOwn(on(toolbar, \"newLine\", lang.hitch(canvas, \"addLine\")));\n      this.tempOwn(on(toolbar, \"newComment\", lang.hitch(canvas, \"addComment\")));\n\n      this.tempOwn(on(toolbar, \"newTemplatedWidget\", lang.hitch(canvas, \"addTemplatedWidget\")));\n      this.tempOwn(on(toolbar, \"newTemplatedScreen\", lang.hitch(canvas, \"addTemplatedScreen\")));\n      this.tempOwn(on(toolbar, \"newTemplatedGroup\", lang.hitch(canvas, \"addTemplatedGroup\")));\n\n      this.tempOwn(on(toolbar, \"newThemedScreen\", lang.hitch(canvas, \"addThemedScreen\")));\n      this.tempOwn(on(toolbar, \"newThemedGroup\", lang.hitch(canvas, \"addThemedGroup\")));\n      this.tempOwn(on(toolbar, \"newThemedWidget\", lang.hitch(canvas, \"addThemedWidget\")));\n      this.tempOwn(on(toolbar, \"newMultiThemedScreen\", lang.hitch(canvas, \"addMultiThemedScreens\")));\n      this.tempOwn(on(toolbar, \"newThemedScreenAndWidget\", lang.hitch(canvas, \"addThemedScreenAndWidgets\")));\n      this.tempOwn(on(toolbar, \"newImportApp\", lang.hitch(canvas, \"addImportedApp\")));\n\n      this.tempOwn(on(toolbar, \"onNewLogicObject\", lang.hitch(canvas, \"addLogicGroup\")));\n      this.tempOwn(on(toolbar, \"onNewRestObject\", lang.hitch(canvas, \"addRestObject\")));\n      this.tempOwn(on(toolbar, \"onNewScriptObject\", lang.hitch(canvas, \"addScriptObject\")));\n      this.tempOwn(on(toolbar, \"onNewSVG\", lang.hitch(canvas, \"addSVG\")))\n      this.tempOwn(on(toolbar, \"onEditSVG\", lang.hitch(canvas, \"openSVGEditor\")))\n      \n\n      /**\n       * last set the model\n       */\n      controller.setCommandStack(stack);\n\n      /**\n       * controller will render screen\n       */\n      controller.setModel(model, this.$route.params.sid);\n\n      /**\n       * Init layer list\n       */\n      canvas.initLayer();\n\n      if (!this.pub && this.user.role !== 'guest') {\n        this.collabSession = new CollabSession(this.user)\n        this.collabSession.initWebsocket(model, canvas, controller, toolbar)\n        window.onbeforeunload = () => {this.collabSession.sendBye()}\n      }\n    },\n\n\n\n\n\n    buildAnalyticCanvas (model, test, events, annotation, hash) {\n      this.logger.log(-1, 'buildAnalyticCanvas', 'enter', hash)\n\n      const canvas = this.$refs.canvas\n      const toolbar = this.$refs.toolbar\n\n      const controller = new AnalyticController()\n      const service = Services.getModelService()\n\n      /**\n       * model factory\n       */\n       const factory = new ModelFactory();\n      factory.setModel(model);\n\n      /**\n       * render factory\n       */\n       const renderFactory = new RenderFactory();\n      renderFactory.setModel(model);\n      renderFactory.setHash(hash)\n\n      /**\n       * Dependency injection\n       */\n      controller.setModelService(service)\n      controller.setToolbar(toolbar);\n      controller.setModelFactory(factory);\n\n\n      toolbar.setController(controller);\n      toolbar.setCanvas(canvas);\n      toolbar.setUser(this.user);\n      toolbar.setModelFactory(factory);\n      toolbar.setModelService(service)\n      toolbar.setEvents(events);\n      toolbar.setAnnotation(annotation);\n      toolbar.setTest(test);\n      toolbar.setCommentService(Services.getCommentService());\n      toolbar.setPublic(this.isPublic)\n\n      canvas.setController(controller);\n      canvas.setToolbar(toolbar);\n      canvas.setRenderFactory(renderFactory);\n      canvas.setModelFactory(factory);\n      canvas.setCommentService(Services.getCommentService())\n      canvas.setUser(this.user)\n      canvas.setEvents(events);\n      canvas.setAnnotation(annotation);\n      canvas.setTest(test);\n\n      // wire shit together\n      this.tempOwn(on(toolbar, \"newComment\", lang.hitch(canvas, \"addComment\")));\n\n      let startScreen = null;\n      for(let screenID in model.screens){\n        const screen = model.screens[screenID];\n        if (screen.props && screen.props.start){\n            startScreen = screenID;\n            break;\n        }\n      }\n      /**\n       * controller will render screen\n       */\n      controller.setModel(model, startScreen);\n    },\n    getModeFromRoute() {\n      if (this.$route.meta.viewMode === 'Heatmap') {\n        return 'Heatmap'\n      } else {\n        return'Design'\n      }\n    }\n\n  },\n  beforeDestroy () {\n    if (this.collabSession) {\n      this.collabSession.sendBye()\n      this.collabSession.close()\n    }\n  },\n  async mounted() {\n    this.logger = new Logger(\"Design\");\n    this.cache = {}\n\n\n    css.add(win.body(), \"MatcVisualEditor\");\n    this.user = await Services.getUserService().load();\n    this.modelService = Services.getModelService(this.$route);\n\n    const mode = this.getModeFromRoute()\n    this.load(mode);\n\n    this.logger.log(-1, \"mounted\", \"exit > \" + mode);\n    setTimeout(() => this.loadAll(), 3000)\n  }\n};\n</script>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Design.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Design.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Design.vue?vue&type=template&id=7bf2db61\"\nimport script from \"./Design.vue?vue&type=script&lang=js\"\nexport * from \"./Design.vue?vue&type=script&lang=js\"\nimport style0 from \"./Design.vue?vue&type=style&index=0&id=7bf2db61&prod&lang=scss\"\nimport style1 from \"./Design.vue?vue&type=style&index=1&id=7bf2db61&prod&lang=sass\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcCanvasPage MatcShare\",attrs:{\"id\":\"CanvasNode\"}},[_c('ShareCanvas',{ref:\"canvas\"})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcCanvas MatcAnalyticCanvas\"},[_c('div',{staticClass:\"MatcCanvasFrame\",attrs:{\"data-dojo-attach-point\":\"frame\"}},[_c('div',{staticClass:\"MatcCanvasContainer MatcCanvasZoomable \",attrs:{\"data-dojo-attach-point\":\"container\"}},[_vm._m(0),_c('div',{staticClass:\"MatcDnDLayer\",attrs:{\"data-dojo-attach-point\":\"dndContainer\"},on:{\"click\":_vm.onDNDLayerClick}})])]),_vm._m(1),_vm._m(2),_c('div',{staticClass:\"MatcMessage\",attrs:{\"data-dojo-attach-point\":\"message\"}})])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcCanvasContainer \",attrs:{\"data-dojo-attach-point\":\"zoomContainer\"}},[_c('div',{staticClass:\"MatcCanvasLayer\",attrs:{\"data-dojo-attach-point\":\"screenContainer\"}}),_c('div',{staticClass:\"MatcCanvasLayer\",attrs:{\"data-dojo-attach-point\":\"widgetContainer\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcCanvasScrollBar MatcCanvasScrollBarRight\",attrs:{\"data-dojo-attach-point\":\"scrollRight\"}},[_c('div',{staticClass:\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrRight\",attrs:{\"data-dojo-attach-point\":\"scrollRightCntr\"}},[_c('div',{staticClass:\"MatchCanvasScrollHandle\",attrs:{\"data-dojo-attach-point\":\"scrollRightHandler\"}})])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcCanvasScrollBar MatcCanvasScrollBarBottom\",attrs:{\"data-dojo-attach-point\":\"scrollBottom\"}},[_c('div',{staticClass:\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrBottom\",attrs:{\"data-dojo-attach-point\":\"scrollBottomCntr\"}},[_c('div',{staticClass:\"MatchCanvasScrollHandle\",attrs:{\"data-dojo-attach-point\":\"scrollBottomHandler\"}})])])}]\n\nexport { render, staticRenderFns }","\n<template>\n\t<div class=\"MatcCanvas MatcAnalyticCanvas\">\n\t\t<div class=\"MatcCanvasFrame\" data-dojo-attach-point=\"frame\">\n\t\t\t<div class=\"MatcCanvasContainer MatcCanvasZoomable \" data-dojo-attach-point=\"container\">\n\t\t\t\t<div class=\"MatcCanvasContainer \" data-dojo-attach-point=\"zoomContainer\">\n\t\t\t\t\t<div data-dojo-attach-point=\"screenContainer\" class=\"MatcCanvasLayer\"></div>\n\t\t\t\t\t<div data-dojo-attach-point=\"widgetContainer\" class=\"MatcCanvasLayer\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div data-dojo-attach-point=\"dndContainer\" class=\"MatcDnDLayer\" @click=\"onDNDLayerClick\"></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"MatcCanvasScrollBar MatcCanvasScrollBarRight\" data-dojo-attach-point=\"scrollRight\">\n\t\t\t<div class=\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrRight\" data-dojo-attach-point=\"scrollRightCntr\">\n\t\t\t\t<div class=\"MatchCanvasScrollHandle\" data-dojo-attach-point=\"scrollRightHandler\"></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"MatcCanvasScrollBar MatcCanvasScrollBarBottom\" data-dojo-attach-point=\"scrollBottom\" >\n\t\t\t<div class=\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrBottom\" data-dojo-attach-point=\"scrollBottomCntr\">\n\t\t\t\t<div class=\"MatchCanvasScrollHandle\" data-dojo-attach-point=\"scrollBottomHandler\"></div>\n\t\t\t</div>\n\t\t</div>\n\n\n\t\t<div class=\"MatcMessage\" data-dojo-attach-point=\"message\">\n\t\t</div>\n\t</div>\n</template>\n<style lang=\"css\"></style>\n<style lang=\"scss\">\n@import \"../../style/matc.scss\";\n@import \"../../style/share.scss\";\n@import \"../../style/canvas/all.scss\";\n@import '../../style/toolbar/all.scss';\n</style>\n<script>\nimport DojoWidget from 'dojo/DojoWidget'\nimport css from 'dojo/css'\n\nimport Logger from 'common/Logger'\nimport on from 'dojo/on'\nimport lang from 'dojo/_base/lang'\n\nimport win from 'dojo/_base/win'\nimport topic from 'dojo/topic'\nimport domGeom from 'dojo/domGeom'\n\nimport DomBuilder from 'common/DomBuilder'\nimport Dialog from 'common/Dialog'\nimport ScrollContainer from 'common/ScrollContainer'\nimport _DragNDrop from 'common/_DragNDrop'\n\nimport Heat from 'dash/Heat'\nimport Render from 'canvas/Render'\nimport Lines from 'canvas/Lines'\nimport DnD from 'canvas/DnD'\nimport Add from 'canvas/Add'\nimport Select from 'canvas/Select'\nimport Distribute from 'canvas/Distribute'\nimport Tools from 'canvas/Tools'\nimport Zoom from 'canvas/Zoom'\nimport InlineEdit from 'canvas/InlineEdit'\nimport Scroll from 'canvas/Scroll'\nimport Upload from 'canvas/Upload'\nimport Comment from 'canvas/Comment'\n\nimport Simulator from 'core/Simulator'\nimport Util from 'core/Util'\nimport QR from 'core/QR'\n\nimport KeyBoard from \"canvas/KeyBoard\";\nimport Resize from \"canvas/Resize\";\nimport Replicate from \"canvas/Replicate\";\nimport _Dialogs from '../toolbar/mixins/_Dialogs'\n\nimport DomUtil from 'core/FastDomUtil'\n\nexport default {\n\tname: 'ShareCanvas',\n\tmixins: [DojoWidget, _DragNDrop, Util, Render, Lines, DnD, Add, Select, Distribute,\n\t\tTools, Zoom, InlineEdit, Scroll, Upload, Comment, KeyBoard, Resize, Replicate, Heat, _Dialogs],\n\tdata: function () {\n\t\treturn {\n\t\t\tmode: \"view\",\n\t\t\tzoom: 0.4,\n\t\t\tzoomLevelPos: 3,\n\t\t\tanalyticMode: \"HeatmapClick\",\n\t\t\tresizeEnabled: false,\n\t\t\trenderDND: true,\n\t\t\tdragNDropMinTimeSpan: 0,\n\t\t\twireInheritedWidgets: true,\n\t\t\ttaskLineOpacity: 1\n\t\t}\n\t},\n\tcomponents: {},\n\tmethods: {\n\n\t\tpostCreate() {\n\t\t\tthis.logger = new Logger(\"ShareCanvas\");\n\t\t\tthis.logger.log(2, \"postCreate\", \"entry\");\n\t\t\tthis.domUtil = new DomUtil()\n\n\t\t\tthis.initSize()\n\t\t\tthis.initWiring()\n\n\t\t\tthis.cache = {};\n\t\t\tthis.moveMode = \"classic\";\n\t\t\t/**\n\t\t\t * init container size and position\n\t\t\t */\n\t\t\tthis.canvasPos = {\n\t\t\t\tx: this.canvasStartX,\n\t\t\t\ty: this.canvasStartY,\n\t\t\t\tw: this.canvasFlowWidth,\n\t\t\t\th: this.canvasFlowHeight\n\t\t\t};\n\t\t\tthis.initContainerSize();\n\t\t\tthis.setContainerPos();\n\n\t\t\tthis.db = new DomBuilder();\n\n\n\t\t\t/**\n\t\t\t * Init remaining sub components\n\t\t\t */\n\t\t\tthis.initSelection()\n\t\t\tthis.initRender();\n\t\t\tthis.initZoom();\n\t\t\tthis.initScrollBars();\n\t\t\tthis.initComment();\n\t\t\tthis.initSettings();\n\t\t\tthis.initMouseTracker();\n\t\t\tthis.initButtons()\n\n\t\t\t/**\n\t\t\t * Init Listeners\n\t\t\t */\n\t\t\tthis.own(topic.subscribe(\"matc/toolbar/click\", lang.hitch(this, \"onToolbarClick\")));\n\t\t\tthis.own(on(win.body(), \"keydown\", lang.hitch(this, \"onKeyPress\")));\n\t\t\tthis.own(on(win.body(), \"keyup\", lang.hitch(this, \"onKeyUp\")));\n\n\t\t\tthis.logger.log(2, \"postCreate\", \"exit!!!\");\n\t\t},\n\n\t\tcloseSVGEditor() {\n\n\t\t},\n\n\t\tsetModelService(s) {\n\t\t\tthis.modelService = s\n\t\t},\n\n\t\tsetCommentService(s) {\n\t\t\tthis.commentService = s\n\t\t},\n\n\t\tsetPublic(isPublic) {\n\t\t\tthis.isPublic = isPublic;\n\t\t},\n\n\n\t\tinlineEditInit() {\n\t\t\tthis.logger.log(2, \"inlineEditInit\", \"enter\");\n\t\t},\n\n\t\tonZoomMinusClick() {\n\t\t\tlet z = Math.round((this.zoom - 0.1) * 10) / 10\n\t\t\tthis.setZoomFactor(z)\n\t\t},\n\n\t\tonZoomPlusClick() {\n\t\t\tlet z = Math.round((this.zoom + 0.1) * 10) / 10\n\t\t\tthis.setZoomFactor(z)\n\t\t},\n\n\t\tonTogggleLine() {\n\t\t\tthis.setViewLines(!this.renderLines)\n\t\t},\n\n\t\tsetSubMode () {\n\t\t\t\n\t\t},\n\n\t\tcleanUpGridResize () {},\n\n\t\tsetBW(isBW) {\n\t\t\tthis.logger.log(-1, \"setBW\", \"enter > \" + isBW);\n\t\t\tif (isBW) {\n\t\t\t\tcss.add(this.container, \"MatcCanvasBW\");\n\t\t\t} else {\n\t\t\t\tcss.remove(this.container, \"MatcCanvasBW\");\n\t\t\t}\n\t\t},\n\n\t\tonChangeCanvasViewConfig() {\n\t\t},\n\n\t\tsetCanvasViewConfig(key, value) {\n\t\t\tthis.logger.log(-1, \"setCanvasViewConfig\", \"enter > \" + key, value);\n\t\t},\n\n\t\tsetHash(h) {\n\t\t\tthis.logger.log(-1, \"setHash\", \"entry > \", h);\n\t\t\tthis.hash = h;\n\t\t},\n\n\t\t/**********************************************************************\n\t\t * Button render\n\t\t **********************************************************************/\n\t\trenderLayerList() {\n\t\t\tthis.logger.log(1, \"renderLayerList\", \"entry > \");\n\t\t},\n\n\t\tonDNDLayerClick () {\n\t\t\t//this.onCloseCommentPopup()\n\t\t},\n\n\t\t/**********************************************************************\n\t\t * Button render\n\t\t **********************************************************************/\n\n\t\tinitButtons() {\n\n\n\t\t\tvar btn = this.db.div(\"MatcTestCommentButton MatcAnimated MatcFadeOut\").build(this.domNode); //\n\t\t\tthis.db.span(\"mdi mdi-comment MatcMiddle\").build(btn);\n\t\t\tthis.own(on(btn, \"click\", lang.hitch(this, \"onNewComment\")));\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tcss.remove(btn, \"MatcFadeOut\")\n\t\t\t}, 100);\n\n\n\t\t\tvar btnSim = this.db.div(\"MatcTestQRButton  MatcAnimated MatcFadeOut\").build(this.domNode);\n\t\t\tthis.db.span(\"mdi mdi-play MatcMiddle\").build(btnSim);\n\t\t\tthis.own(on(btnSim, \"click\", lang.hitch(this, \"onSimulator\")));\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tcss.remove(btnSim, \"MatcFadeOut\")\n\t\t\t}, 200);\n\n\n\t\t\n\t\t\tvar btnZoomOut = this.db.div(\"MatcTestQRButton MatcShareZoomOut MatcAnimated MatcFadeOut\").build(this.domNode);\n\t\t\tthis.db.span(\"mdi mdi-magnify-minus-outline MatcMiddle\").build(btnZoomOut);\n\t\t\tthis.own(on(btnZoomOut, \"click\", lang.hitch(this, \"onZoomMinusClick\")));\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tcss.remove(btnZoomOut, \"MatcFadeOut\")\n\t\t\t}, 300);\n\n\t\t\tvar btnZoomIn = this.db.div(\"MatcTestQRButton  MatcShareZoomIn MatcAnimated MatcFadeOut\").build(this.domNode);\n\t\t\tthis.db.span(\"mdi mdi-magnify-plus-outline MatcMiddle\").build(btnZoomIn);\n\t\t\tthis.own(on(btnZoomIn, \"click\", lang.hitch(this, \"onZoomPlusClick\")));\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tcss.remove(btnZoomIn, \"MatcFadeOut\")\n\t\t\t}, 400);\n\n\n\t\t\tvar lineButton = this.db.div(\"MatcTestQRButton MatcShareLine MatcAnimated MatcFadeOut\").build(this.domNode);\n\t\t\tthis.db.span(\"mdi mdi-vector-line MatcMiddle\").build(lineButton);\n\t\t\tthis.own(on(lineButton, \"click\", lang.hitch(this, \"onTogggleLine\")));\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tcss.remove(lineButton, \"MatcFadeOut\")\n\t\t\t}, 500);\n\n\t\t},\n\n\t\t/**********************************************************************\n\t\t * Comment Overwirtes\n\t\t **********************************************************************/\n\n\t\tonNewComment(e) {\n\t\t\tthis.logger.log(1, \"onNewComment\", \"enter > \");\n\t\t\tthis.addComment({ event: e, type: \"comment\" });\n\t\t},\n\n\t\tasync loadComments() {\n\t\t\tthis.logger.log(1, \"loadComments\", \"enter > \", this.model);\n\t\t\tif (!this.model || !this.hash) {\n\t\t\t\tconsole.error(\"loadComments() > no model or hash\")\n\t\t\t}\n\t\n\t\t\tlet comments = await this.commentService.findByHash(this.model.id, this.hash, 'ScreenComment')\t\n\t\t\tthis.onCommentsLoaded(comments)\n\t\t},\n\n\t\n\t\tasync saveDNDChange(comment) {\t\n\t\t\tconst comments = await this.commentService.updateByHash(this.model.id, this.hash, comment)\n\t\t\tthis.onCommentSaved(comments)\t\t\t\n\t\t},\n\n\t\tasync onSaveComment(comment, isChild=false) {\t\t\n\t\t\tif (comment.id) {\n\t\t\t\tconst old = this.comments[comment.id];\n\t\t\t\told.message = comment.message\n\t\t\t\told.status = comment.status\n\t\t\t\told.modified = new Date().getTime()\n\t\t\t\told.edited = true\n\t\t\t\tconst res = await this.commentService.updateByHash(this.model.id, this.hash, old)\n\t\t\t\tthis.updateCommentIcon(old)\n\t\t\t\tthis.onCommentSaved(res)\t\t\n\t\t\t} else {\n\t\t\t\tconst res = await this.commentService.createByHash(this.model.id, this.hash, comment)\t\t\t\n\t\t\t\tthis.onCommentSaved(res)\t\t\t\t\t\n\t\t\t}\t\t\t\n\t\t\tif (!isChild) {\n\t\t\t\tthis.onCloseCommentPopup();\n\t\t\t}\t\n\t\t},\n\t\n\t\t/**********************************************************************\n\t\t * Simulator stuff, should move to some kind of toolbar to reuse _Dialogs\n\t\t **********************************************************************/\n\n\n\t\tonSimulator(e) {\n\t\t\t// make sure we use an un-zoomed model like\n\t\t\t// the toolbar would do\n\t\t\t//console.debug(this.model)\n\t\t\tthis.startSimilator(e)\n\t\t},\n\n\n\t\tstartSimilator() {\n\t\t\tthis.logger.log(0, \"startSimilator\", \"entry\");\n\n\t\t\tvar pos = domGeom.position(win.body());\n\t\t\tlet maxHeight = pos.h - 100\n\t\t\t/**\n\t\t\t * Since 2.1.7 we have better scalling.\n\t\t\t * Keep in sync with the ShareCanvas.startSimulator() method\n\t\t\t *\n\t\t\t * FIXME: This could be still a litte bit better. We could max the height and with factors\n\t\t\t */\n\t\t\tcss.add(win.body(), 'MatcCanvasSimulatorVisible')\n\t\t\tif (this.defaultModel.type === \"desktop\") {\n\t\t\t\tpos.w = pos.w * 0.75;\n\t\t\t\tpos.h = pos.h * 0.75;\n\t\t\t\tthis._showDesktopSimulator(this.model, pos, maxHeight);\n\t\t\t} else if (this.defaultModel.type === \"tablet\") {\n\t\t\t\tif (this.defaultModel.screenSize.w > this.model.screenSize.h) {\n\t\t\t\t\tpos.w = pos.w * 0.65;\n\t\t\t\t\tpos.h = pos.h * 0.65;\n\t\t\t\t\tthis._showMobileTest(this.defaultModel, pos, \"MatchSimulatorWrapperTablet\", maxHeight);\n\t\t\t\t} else {\n\t\t\t\t\tpos.w = pos.w * 0.35;\n\t\t\t\t\tpos.h = pos.h * 0.35;\n\t\t\t\t\tthis._showMobileTest(this.defaultModel, pos, \"MatchSimulatorWrapperTablet\", maxHeight);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpos.w = pos.w * 0.25;\n\t\t\t\tpos.h = pos.h * 0.25;\n\t\t\t\tthis._showMobileTest(this.defaultModel, pos, \"MatchSimulatorWrapperMobile\", maxHeight);\n\t\t\t}\n\t\t},\n\n\n\t\t_showDesktopSimulator(model, pos, maxHeight) {\n\n\t\t\tconst dialog = document.createElement(\"div\");\n\t\t\tcss.add(dialog, \"MatchSimulatorDialog\");\n\n\t\t\tconst container = document.createElement(\"div\");\n\t\t\tcss.add(container, \"MatchSimulatorContainer\");\n\t\t\tdialog.appendChild(container);\n\n\t\t\tpos = this.getScaledSize(pos, \"width\", this.model);\n\t\t\tif (pos.h > maxHeight) {\n\t\t\t\tlet factor = pos.h / maxHeight\n\t\t\t\tpos.h = pos.h / factor\n\t\t\t\tpos.w = pos.w / factor\n\t\t\t}\n\t\t\tcontainer.style.width = Math.round(pos.w) + \"px\";\n\t\t\tcontainer.style.height = Math.round(pos.h) + \"px\";\n\n\t\t\tconst s = this.$new(Simulator, { mode: \"debug\", logData: false });\n\t\t\ts.scrollListenTarget = \"parent\";\n\t\t\ts.isDesktopTest = true\n\t\t\ts.setHash(this.hash)\n\n\t\t\tconst scroller = this.$new(ScrollContainer, { canDestroy: true });\n\t\t\tscroller.placeAt(container);\n\t\t\t//s.setScrollContainer(scroller);\n\n\n\t\t\tconst d = new Dialog();\n\t\t\td.hasCSSAnimation = false;\n\t\t\td.popup(dialog, this.simulatorButton);\n\n\t\t\td.own(d.on(\"close\", lang.hitch(this, \"stopSimulator\", s, scroller)));\n\t\t\td.own(on(dialog, 'click', (e) => {\n\t\t\t\tif (e.target === dialog) {\n\t\t\t\t\td.close()\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\t/**\n\t\t\t * Isn#t the model passed\n\t\t\t */\n\t\t\tmodel = this.defaultModel;\n\t\t\tconst screen = this._getSimulatorScreen();\n\t\t\ts.setStartScreen(screen);\n\t\t\tsetTimeout(function () {\n\t\t\t\tscroller.wrap(s.domNode);\n\t\t\t\ts.setModel(model);\n\t\t\t}, 500);\n\n\t\t\t/**\n\t\t\t * otherwise the mouse wheel listener will prevent\n\t\t\t * scrolling in the simulator!\n\t\t\t */\n\t\t\tif (this.canvas) {\n\t\t\t\tthis.canvas.enableMouseZoom(false);\n\t\t\t\tthis.canvas.setState(\"simulate\");\n\t\t\t}\n\t\n\n\t\t},\n\n\n\n\t\t_showMobileTest(model, pos, clazz, maxHeight) {\n\t\t\tconst dialog = document.createElement(\"div\");\n\t\t\tcss.add(dialog, \"MatchSimulatorDialog\");\n\n\t\t\tconst wrapper = document.createElement(\"div\");\n\t\t\tcss.add(wrapper, \"MatchSimulatorWrapper \");\n\t\t\tif (clazz) {\n\t\t\t\tcss.add(wrapper, clazz);\n\t\t\t}\n\t\t\tdialog.appendChild(wrapper);\n\n\t\t\tconst container = document.createElement(\"div\");\n\t\t\tcss.add(container, \"MatchSimulatorContainer\");\n\n\t\t\tpos = this.getScaledSize(pos, \"width\", this.model);\n\t\t\tif (pos.h > maxHeight) {\n\t\t\t\tlet factor = pos.h / maxHeight\n\t\t\t\tpos.h = Math.ceil(pos.h / factor)\n\t\t\t\tpos.w = Math.ceil(pos.w / factor)\n\t\t\t}\n\n\t\t\tcontainer.style.width = Math.ceil(pos.w) + \"px\";\n\t\t\tcontainer.style.height = Math.ceil(pos.h) + \"px\";\n\n\t\t\twrapper.style.width = Math.ceil(pos.w) + \"px\";\n\t\t\twrapper.style.height = Math.ceil(pos.h) + \"px\";\n\t\t\tcss.add(wrapper, 'MatcSimulatorFadeOut')\n\t\t\twrapper.appendChild(container);\n\n\t\t\tconst scroller = this.$new(ScrollContainer, { canDestroy: true });\n\t\t\tscroller.placeAt(container);\n\n\t\t\tconst s = this.$new(Simulator, { mode: \"debug\", logData: false });\n\t\t\ts.scrollListenTarget = \"parent\";\n\t\t\ts.isDesktopTest = true\n\t\t\t//s.setScrollContainer(scroller);\n\t\t\ts.setHash(this.hash)\n\n\n\t\t\t// sinde 4.1.03 the qr code can be hidden in the settings.\n\t\t\tconst settings = this.getSettings()\n\t\t\tif (settings.hasQRCode !== false) {\n\t\t\t\tconst qrCodeWrapper = document.createElement(\"div\")\n\t\t\t\tcss.add(qrCodeWrapper, \"MatcSimulatorQRWrapper\");\n\t\t\t\tdialog.appendChild(qrCodeWrapper);\n\n\t\t\t\tconst img = document.createElement(\"img\");\n\t\t\t\tQR.getQRCode(this.hash, false, true).then(url => {\n\t\t\t\t\timg.src = url\n\t\t\t\t})\n\t\t\t\tcss.add(img, \"MatcSimulatorQR\");\n\t\t\t\tqrCodeWrapper.appendChild(img);\n\t\t\t}\n\n\n\n\t\t\t/**\n\t\t\t * FIXME: We have here some flickering. Because of the fixed\n\t\t\t * positions widgets we cannot use cssAniamtion because the scale(1,1)\n\t\t\t * set in Dialog.js will mess up the the fixed attribute.\n\t\t\t *\n\t\t\t * Solutions:\n\t\t\t *\n\t\t\t * 1) Do not add screen pos whne flag is set?\n\t\t\t */\n\t\t\tconst d = new Dialog();\n\t\t\td.hasCSSAnimation = false;\n\t\t\td.popup(dialog, this.simulatorButton);\n\n\t\t\td.on(\"close\", lang.hitch(this, \"stopSimulator\", s, scroller));\n\t\t\td.own(on(dialog, 'click', (e) => {\n\t\t\t\tif (e.target === dialog) {\n\t\t\t\t\td.close()\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\t/**\n\t\t\t * Isnt the model passed???\n\t\t\t */\n\t\t\tmodel = this.defaultModel;\n\n\t\t\tconst screen = this._getSimulatorScreen();\n\t\t\tconsole.debug(screen)\n\t\t\ts.setStartScreen(screen);\n\t\t\tsetTimeout(() => {\n\t\t\t\tscroller.wrap(s.domNode);\n\t\t\t\ts.setModel(model);\n\t\t\t\tcss.remove(wrapper, 'MatcSimulatorFadeOut')\n\t\t\t}, 600);\n\n\t\t\t/**\n\t\t\t * otherwise the mouse wheel listener will prevent\n\t\t\t * scrolling in the simulator!\n\t\t\t */\n\t\t\tif (this.canvas) {\n\t\t\t\tthis.canvas.enableMouseZoom(false);\n\t\t\t\tthis.canvas.setState(\"simulate\");\n\t\t\t}\n\n\t\t},\n\n\t\t_getSimulatorScreen() {\n\t\t\tif (this._selectedScreen) {\n\t\t\t\treturn this._selectedScreen;\n\t\t\t}\n\t\t\tif (this._selectedGroup) {\n\t\t\t\tconst childId = this._selectedGroup.children[0]\n\t\t\t\treturn this.getParentScreen({ id: childId });\n\t\t\t}\n\t\t\tif (this._selectedWidget) {\n\t\t\t\treturn this.getParentScreen(this._selectedWidget);\n\t\t\t}\n\t\t},\n\n\n\n\t\t/**********************************************************************\n\t\t * Wiring\n\t\t **********************************************************************/\n\n\t\tinitWiring() {\n\t\t\tthis.logger.log(-1, \"initWiring\", \"enter\");\n\t\t\tthis.own(\n\t\t\t\ton(this.dndContainer, \"mousedown\", (e) => this.dispatchMouseDown(e))\n\t\t\t);\n\t\t},\n\n\t\tdispatchMouseDownCanvas(e) {\n\t\t\tthis.logger.log(1, \"dispatchMouseDownCanvas\", \"enter\", e, this.mode);\n\t\t\tthis.onDragStart(this.container, \"container\", \"onCanvasDnDStart\", \"onCanvasDnDMove\", \"onCanvasDnDEnd\", null, e);\n\t\t},\n\n\t\tdispatchMouseDownScreen(e, id) {\n\t\t\tthis.logger.log(-1, \"dispatchMouseDownScreen\", \"enter\", id);\n\t\t},\n\n\t\tdispatchMouseDownWidget(e, id) {\n\t\t\tthis.logger.log(-1, \"dispatchMouseDownWidget\", \"enter\", id);\n\t\t\tlet div = this.widgetDivs[id];\n\t\t\tthis.onWidgetDndClick(id, div);\n\t\t},\n\n\t\tonWidgetDndClick(id, div, pos, e) {\n\t\t\tthis.stopEvent(e);\n\t\t\tthis.logger.log(1, \"onWidgetDndClick\", \"enter > \" + id);\n\t\t\tthis.setState(0);\n\t\t\t// var widget = this.model.widgets[id];\n\t\t\t// if(widget){\n\t\t\t// \tvar lines = this.getLinesForWidget(widget);\n\t\t\t// \tif (lines) {\n\t\t\t// \t\tvar clickLine = this.getLineForGesture(lines, \"click\")\n\t\t\t// \t\tif (!clickLine){\n\t\t\t// \t\t\tclickLine = lines[0]\n\t\t\t// \t\t}\n\t\t\t// \t\tif (clickLine){\n\t\t\t// \t\t\tthis.animateToScreen(clickLine.to, this.container);\n\t\t\t// \t\t}\n\t\t\t// \t}\n\t\t\t// } else {\n\t\t\t// \tthis.highlightActionWidgets();\n\t\t\t// }\n\t\t},\n\n\t\thighlightActionWidgets() {\n\t\t\tthis.logger.log(2, \"highlightActionWidgets\", \"entry > \");\n\t\t\tvar divs = [];\n\t\t\tfor (var id in this.model.widgets) {\n\t\t\t\tvar widget = this.model.widgets[id];\n\t\t\t\tif (widget) {\n\t\t\t\t\tvar lines = this.getLinesForWidget(widget);\n\t\t\t\t\tif (lines) {\n\t\t\t\t\t\tvar div = this.analyticsDivs[widget.id];\n\t\t\t\t\t\tif (div) {\n\t\t\t\t\t\t\tdivs.push(div);\n\t\t\t\t\t\t\tcss.add(div, \"MatcSimulatorWidgetHightlight\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetTimeout(function () {\n\t\t\t\tfor (var i = 0; i < divs.length; i++) {\n\t\t\t\t\tcss.remove(divs[i], \"MatcSimulatorWidgetHightlight\")\n\t\t\t\t}\n\t\t\t}, 500)\n\t\t},\n\n\n\t\tonScreenDndClick(id, div, pos, e) {\n\t\t\tthis.logger.log(-1, \"onScreenDndClick\", \"entry > \" + id);\n\t\t\tthis.stopEvent(e);\n\t\t\tthis.highlightActionWidgets();\n\t\t\t// TODO: Check for lines\n\t\t\tthis.setState(0);\n\t\t\t// call canvas click to make sure comment popups close\n\t\t\tthis.onCanvasSelected();\n\t\t},\n\n\t\tonCanvasSelected() {\n\t\t\tthis.logger.log(-2, \"onCanvasSelected\", \"entry > \");\n\t\t\t//this.inherited(arguments) ;\n\t\t},\n\n\t\t/**********************************************************************\n\t\t * Rendering\n\t\t **********************************************************************/\n\n\t\t updateGridRezise() {},\n\n\n\t\tanimateToScreen(screenID, container) {\n\t\t\t// css.add(container, \"MatcShareCanvasAnimatedContainer\");\n\t\t\tthis.moveToScreen(screenID);\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tcss.remove(container, \"MatcShareCanvasAnimatedContainer\");\n\t\t\t}, 500);\n\t\t},\n\n\n\t\t/**********************************************************************\n\t\t * Rendering\n\t\t **********************************************************************/\n\n\n\t\tafterRender() {\n\t\t\tthis.logger.log(-1, \"afterRender\", \"entry > \" + this.analyticMode);\n\t\t\tthis.cleanUpAnalytics();\n\n\n\t\t},\n\n\t\thasSelect() {\n\t\t\treturn this._mode != \"addComment\";\n\t\t},\n\n\n\t\t/**********************************************************************\n\t\t * Gesture\n\t\t **********************************************************************/\n\n\t\tcleanUpAnalytics() {\n\t\t\tthis.analyticsDivs = {};\n\t\t},\n\n\n\t\t/**********************************************************************\n\t\t * DI\n\t\t **********************************************************************/\n\n\n\t\tsetController(c) {\n\t\t\tthis.logger.log(2, \"setController\", \"enter\");\n\t\t\tthis.controller = c;\n\t\t\tc.setCanvas(this);\n\t\t},\n\n\t\tgetController() {\n\t\t\tif (this._controllerCallback) {\n\t\t\t\tthis[this._controllerCallback]();\n\t\t\t}\n\t\t\treturn this.controller;\n\t\t},\n\n\t\tsetControllerCallback(c) {\n\t\t\tthis._controllerCallback = c;\n\t\t},\n\n\n\t\tsetModelFactory(f) {\n\t\t\tthis.logger.log(3, \"setModelFactory\", \"enter\");\n\t\t\tthis.factory = f;\n\t\t},\n\n\t\tsetRenderFactory(f) {\n\t\t\tthis.logger.log(0, \"setRenderFactory\", \"enter\");\n\t\t\tthis.renderFactory = f;\n\t\t},\n\n\t\tsetModel(model) {\n\t\t\tthis.logger.log(-3, \"setModel\", \"enter\");\n\t\t\t\n\t\t\tthis.model = model;\n\t\t\tthis.defaultModel = model\n\t\t\tthis.grid = this.model.grid;\n\t\t\tif (!this.isCommentsLoaded) {\n\t\t\t\tthis.loadComments()\n\t\t\t\tthis.isCommentsLoaded = true\n\t\t\t}\n\n\t\t},\n\n\n\t\tsetTest(t) {\n\t\t\tthis.logger.log(2, \"setTest\", \"enter > # \");\n\t\t\tthis.testSettings = t;\n\t\t},\n\n\n\t\tsetUser(u) {\n\t\t\tthis.user = u;\n\t\t},\n\n\t\tsetMode(mode, forceRender) {\n\t\t\tthis.logger.log(2, \"setMode\", \"enter > \" + mode + \" != \" + this._mode + \" > \" + forceRender);\n\t\t\tif (mode != this._mode) {\n\t\t\t\tthis._mode = mode;\n\t\t\t\tif (this.toolbar) {\n\t\t\t\t\tthis.toolbar.setMode(mode);\n\t\t\t\t}\n\t\t\t\tthis.rerender();\n\t\t\t} else if (forceRender) {\n\t\t\t\tthis.rerender();\n\t\t\t}\n\t\t},\n\n\n\t\tgetMode() {\n\t\t\treturn this._mode;\n\t\t},\n\n\n\n\n\t\t/***************************************************************************\n\t\t * Keyboard handling\n\t\t ***************************************************************************/\n\n\t\tonKeyPress(e) {\n\n\t\t\tthis._currentKeyEvent = e;\n\n\t\t\tif (this.state == \"simulate\" || this.state == \"dialog\") {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar target = e.target;\n\t\t\tif (css.contains(target, \"MatcIgnoreOnKeyPress\")) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * The keycode is differently in every browser!\n\t\t\t */\n\t\t\tvar k = e.keyCode ? e.keyCode : e.which;\n\n\t\t\tif (k == 32) { // space\n\t\t\t\tif (!this._inlineEditStarted) {\n\t\t\t\t\tthis.stopEvent(e);\n\t\t\t\t\tif (this.getMode() != \"move\") {\n\t\t\t\t\t\tthis.showHint(\"Move the mouse to move canvas...\");\n\t\t\t\t\t\tthis.onDragStart(this.container, \"container\", \"onCanvasDnDStart\", \"onCanvasDnDMove\", \"onCanvasDnDEnd\", null, this._lastMouseMoveEvent, true);\n\t\t\t\t\t\tthis.setMode(\"move\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/**\n\t\t\t\t * Zoom\n\t\t\t\t */\n\t\t\t} else if (k == 171 || k == 187) { // +\n\t\t\t\tif (!this._inlineEditStarted) {\n\t\t\t\t\tthis.onClickPlus();\n\t\t\t\t\tthis.stopEvent(e);\n\t\t\t\t}\n\t\t\t} else if (k == 173 || k == 189) { //-\n\n\t\t\t\tif (!this._inlineEditStarted) {\n\t\t\t\t\tthis.onClickMinus();\n\t\t\t\t\tthis.stopEvent(e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t},\n\n\t\tonKeyUp(e) {\n\t\t\tvar k = e.keyCode ? e.keyCode : e.which;\n\t\t\tif (k == 32) {\n\t\t\t\tthis.onDragEnd(this._lastMouseMoveEvent);\n\t\t\t\tthis.setMode(\"view\");\n\t\t\t}\n\n\t\t\tdelete this._currentKeyEvent;\n\t\t},\n\n\n\t\t/***************************************************************************\n\t\t * Settings\n\t\t ***************************************************************************/\n\n\n\t\tinitSettings() {\n\t\t\tthis.logger.log(1, \"initSettings\", \"enter > \");\n\t\t\t/**\n\t\t\t * default settings\n\t\t\t */\n\t\t\tthis.settings = {\n\t\t\t\tcanvasTheme: \"MatcLight\",\n\t\t\t\tlineColor: \"#999\",\n\t\t\t\tlineWidth: 1,\n\t\t\t\tstorePropView: true,\n\t\t\t\tmoveMode: \"ps\",\n\t\t\t\tmouseWheelMode: \"scroll\"\n\t\t\t};\n\n\n\t\t\tvar s = this._getStatus(\"matcSettings\");\n\t\t\tif (s) {\n\t\t\t\tif (s.canvasTheme) {\n\t\t\t\t\t//this.settings.canvasTheme = s.canvasTheme;\n\t\t\t\t}\n\t\t\t\tif (s.lineColor) {\n\t\t\t\t\tthis.settings.lineColor = s.lineColor;\n\t\t\t\t}\n\t\t\t\tif (s.lineWidth) {\n\t\t\t\t\tthis.settings.lineWidth = s.lineWidth;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.logger.log(2, \"initSettings\", \"exit>  no saved settings\");\n\t\t\t}\n\n\n\t\t\tthis.applySettings(this.settings);\n\t\t},\n\n\t\tgetSettings() {\n\t\t\treturn this.settings;\n\t\t},\n\n\t\tsetSettings(s) {\n\n\t\t\t/**\n\t\t\t * Mixin values\n\t\t\t */\n\t\t\tif (s.canvasTheme) {\n\t\t\t\tthis.settings.canvasTheme = s.canvasTheme;\n\t\t\t}\n\t\t\tif (s.lineColor) {\n\t\t\t\t//this.settings.lineColor = s.lineColor;\n\t\t\t}\n\t\t\tif (s.lineWidth) {\n\t\t\t\tthis.settings.lineWidth = s.lineWidth;\n\t\t\t}\n\t\t\tif (s.storePropView != null) {\n\t\t\t\tthis.settings.storePropView = s.storePropView;\n\t\t\t}\n\n\t\t\tif (s.mouseWheelMode != null) {\n\t\t\t\tthis.settings.mouseWheelMode = s.mouseWheelMode;\n\t\t\t}\n\n\t\t\tthis._setStatus(\"matcSettings\", this.settings);\n\n\t\t\tthis.applySettings(this.settings);\n\t\t\tthis.rerender();\n\t\t},\n\n\n\t\tapplySettings(s) {\n\n\t\t\tthis.logger.log(2, \"applySettings\", \"enter > \" + s.canvasTheme + \" &> \" + s.moveMode);\n\n\t\t\tif (s.lineWidth) {\n\t\t\t\tthis.defaultLineWidth = s.lineWidth;\n\t\t\t}\n\t\t\tif (s.canvasTheme) {\n\t\t\t\tif (this._lastCanvasTheme) {\n\t\t\t\t\tcss.remove(win.body(), this._lastCanvasTheme);\n\t\t\t\t}\n\t\t\t\tcss.add(win.body(), s.canvasTheme)\n\t\t\t\tthis._lastCanvasTheme = s.canvasTheme;\n\t\t\t}\n\n\t\t\tif (s.mouseWheelMode) {\n\t\t\t\tthis._mouseWheelMode = s.mouseWheelMode;\n\t\t\t}\n\n\t\t\tthis.settings = s;\n\n\t\t},\n\n\n\t\t/***************************************************************************\n\t\t * Helper Functons\n\t\t ***************************************************************************/\n\n\n\t\t/**\n\t\t * Returns all lines for a widget or its parent group.\n\t\t *\n\t\t * 1) If there is one or more lines for the widget, this will be\n\t\t * returned\n\t\t *\n\t\t * 2) Else, if there is a group and the group has one or more line,\n\t\t * the group lines will be returned!\n\t\t */\n\t\tgetLinesForWidget(widget) {\n\n\t\t\t/**\n\t\t\t * In case of an inherited widget, use the lines of the master\n\t\t\t */\n\t\t\tif (widget.inherited && this.model.widgets[widget.inherited]) {\n\t\t\t\twidget = this.model.widgets[widget.inherited];\n\t\t\t}\n\n\t\t\tvar widgetID = widget.id;\n\t\t\tvar lines = this.getFromLines(widget);\n\t\t\tif (lines && lines.length > 0) {\n\t\t\t\treturn lines;\n\t\t\t}\n\n\t\t\tvar group = this.getParentGroup(widgetID);\n\t\t\tif (group) {\n\t\t\t\tvar groupLine = this.getFromLines(group);\n\t\t\t\tif (groupLine && groupLine.length > 0) {\n\t\t\t\t\treturn groupLine;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Return the line with a given type (lines[i].event === type).\n\t\t * Handles also old school where there was not event\n\t\t */\n\t\tgetLineForGesture(lines, type) {\n\t\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\t\tif (lines[i].event === type || (\"click\" === type && !lines[i].event)) {\n\t\t\t\t\treturn lines[i];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tinitMouseTracker() {\n\t\t\tthis.own(on(win.body(), \"mousemove\", lang.hitch(this, \"onMouseMove\")));\n\t\t},\n\n\t\tonMouseMove(e) {\n\t\t\tvar pos2 = this.getCanvasMousePosition(e, true);\n\t\t\tthis._lastMousePos = pos2;\n\t\t\tthis._lastMouseMoveEvent = e;\n\t\t},\n\n\n\t\tdestroy() {\n\t\t\tthis.cleanUp();\n\t\t}\n\t},\n\tmounted() {\n\n\t}\n}\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ShareCanvas.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ShareCanvas.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./ShareCanvas.vue?vue&type=template&id=a01e04d6\"\nimport script from \"./ShareCanvas.vue?vue&type=script&lang=js\"\nexport * from \"./ShareCanvas.vue?vue&type=script&lang=js\"\nimport style1 from \"./ShareCanvas.vue?vue&type=style&index=1&id=a01e04d6&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\nimport lang from 'dojo/_base/lang'\nimport win from 'dojo/win'\nimport Logger from 'common/Logger'\nimport Core from 'core/Core'\nimport CoreUtil from 'core/CoreUtil'\n\nexport default class ShareController extends Core{\n\n\tconstructor (){\n\t\tsuper()\n\t\tthis.logger = new Logger(\"ShareContoller\");\n\t\tthis.logger.log(2,\"constructor\", \"exit\");\n\t}\n\n\t/**********************************************************************\n\t * Dependencies\n\t **********************************************************************/\n\n\tsetCanvas (c){\n\t\tthis.logger.log(3,\"setCanvas\", \"entry\");\n\t\tthis._canvas = c;\n\t}\n\n\tsetToolbar (t){\n\t\tthis.logger.log(3,\"setToolbar\", \"entry\");\n\t\tthis.toolbar = t;\n\t}\n\n\tsetModelService (s) {\n\t\tthis.modelService = s\n\t}\n\n\tsetModelFactory (f){\n\t\tthis.logger.log(3,\"setModelFactory\", \"entry\");\n\t\tthis.factory = f;\n\t}\n\n\tsetModel (m, screenID){\n\t\tthis.logger.log(2,\"setModel\", \"entry > \" + screenID);\n\t\tthis.model = m;\n\n\t\t// Zoom out if large model!\n\t\tvar count = this.countProps(m.screens);\n\t\tif (count > 4) {\n\t\t\tif(this._canvas){\n\t\t\t\tthis._canvas.zoom = 0.25;\n\t\t\t\tthis._canvas.zoomLevelPos = 2;\n\t\t\t}\n\t\t}\n\n\t\tthis.inheritedModel = this.createInheritedModel(m);\n\t\tthis.oldModel = lang.clone(m);\n\t\tthis.render(screenID);\n\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.setModel(m);\n\t\t}\n\n\t\tif (this._canvas) {\n\t\t\tthis._canvas.setFonts(m.fonts)\n\t\t}\n\n\t\tthis.logger.log(3,\"setModel\", \"entry > \" + screenID);\n\t}\n\n\n\tsetMode (mode){\n\t\tthis.logger.log(0,\"setMode\", \"entry > \" + mode);\n\t\tif (this.toolbar) {\n\t\t\tthis.toolbar.setMode(mode);\n\t\t}\n\t\tthis._canvas.setMode(mode);\n\t}\n\n\tsetSinglePage (enabled){\n\t\tthis.logger.log(0,\"setSinglePage\", \"entry > \" + enabled);\n\t}\n\n\n\tgetZoomFactor (){\n\t\tif(this._canvas){\n\t\t\treturn this._canvas.getZoomFactor();\n\t\t}\n\t\treturn 1;\n\t}\n\n\t/**********************************************************************\n\t * Canvas Delegates\n\t **********************************************************************/\n\n\trender (screenID){\n\t\tthis.logger.log(2,\"render\", \"enter > screenID : \" + screenID);\n\n\t\tif(this._canvas){\n\t\t\tlet inheritedModel = CoreUtil.createInheritedModel(this.model)\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tthis._canvas.setModel(inheritedModel);\n\t\t\t\tthis._canvas.render(inheritedModel);\n\t\t\t\tif(screenID){\n\t\t\t\t\tthis._canvas.moveToScreen(screenID);\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\t_requestRendering (screenID){\n\t\tif(this._zoomedModel){\n\t\t\tthis._canvas.render(this._zoomedModel);\n\t\t\tif(screenID){\n\t\t\t\tthis._canvas.moveToScreen(screenID);\n\t\t\t}\n\t\t}\n\t\tthis._zoomedModel = null;\n\t}\n\n\t_zoomToScreen (screenID){\n\t\tif(screenID && this.model.screens[screenID]){\n\t\t\t/**\n\t\t\t * here we make sure the selected screen fits in the\n\t\t\t * browser window. We simply find the smallest possible\n\t\t\t * zoom factor and subtract 0.2 to make sure it fits in\n\t\t\t * browser\n\t\t\t */\n\t\t\tvar screen = this.model.screens[screenID];\n\t\t\tlet winBox = win.getBox();\n\t\t\tlet x =  winBox.w / screen.w;\n\t\t\tlet y =  winBox.h / screen.h;\n\t\t\tvar zoom = (Math.floor( Math.min(x,y) * 10) / 10) -0.2 ;\n\t\t\tthis._canvas.setZoom(zoom);\n\n\t\t}\n\t}\n\n\t/**********************************************************************\n\t * Selection methods\n\t **********************************************************************/\n\n\tonWidgetSelected (id){\n\t\tthis.logger.log(0,\"onWidgetSelected\", \"enter > \"+ id);\n\t\tvar widget = this.inheritedModel.widgets[id];\n\t\tif(widget){\n\t\t\tif(this.toolbar){\n\t\t\t\tthis.toolbar.onWidgetSelected(widget);\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(\"onWidgetSelected() > No width with id\", id);\n\t\t}\n\t}\n\n\n\tonScreenSelected (id){\n\t\tthis.logger.log(1,\"onScreenSelected\", \"enter > \"+ id);\n\t\tvar screen = this.model.screens[id];\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.onScreenSelected(screen);\n\t\t}\n\t}\n\n\tonCanvasSelected (){\n\t\tthis.logger.log(1,\"onCanvasSelected\", \"enter \");\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.onCanvasSelected();\n\t\t}\n\t}\n\n\tonLineSelected (id){\n\t\tthis.logger.log(1,\"onLineSelected\", \"enter > \" + id);\n\t\tvar line = this.model.lines[id];\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.onLineSelected(line);\n\t\t}\n\t}\n\n\tonMultiSelect (selection){\n\t\tthis.logger.log(1,\"onMultiSelect\", \"enter > \");\n\t\tif(this.toolbar){\n\t\t\t/**\n\t\t\t * TODO: get all the model elements\n\t\t\t */\n\t\t\tthis.toolbar.onMultiSelect(selection);\n\t\t}\n\t}\n\n\tonGroupSelected (id){\n\t\tthis.logger.log(1,\"onGroupSelected\", \"enter > \" + id);\n\t\tif(this.model.groups && this.model.groups[id]){\n\t\t\tif(this.toolbar){\n\t\t\t\tvar group = this.model.groups[id];\n\t\t\t\tthis.toolbar.onGroupSelect(group);\n\t\t\t}\n\t\t}\n\t}\n\n\tunSelect (){\n\t\tif(this._canvas){\n\t\t\tthis._canvas.unSelect();\n\n\t\t}\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.cleanUp();\n\t\t}\n\t}\n\n\n\tshowSuccess (msg){\n\t\tif(this._canvas){\n\t\t\tthis._canvas.showSuccess(msg);\n\t\t}\n\t}\n\n\tshowError (msg){\n\t\tif(this._canvas){\n\t\t\tthis._canvas.showError(msg);\n\t\t}\n\t}\n\n}","<template>\n  <div class=\"MatcCanvasPage MatcShare\" id=\"CanvasNode\">\n      <ShareCanvas ref=\"canvas\" />\n  </div>\n</template>\n\n<style class=\"css\">\n\t@import url(\"../../style/css/legacy.css\");\n</style>\n\n<style lang=\"scss\">\n  @import \"../../style/matc.scss\";\n  @import \"../../style/test.scss\";\n</style>\n<style lang=\"sass\">\n  @import \"../../style/bulma.sass\"\n</style>\n\n<script>\nimport DojoWidget from \"dojo/DojoWidget\";\nimport css from 'dojo/css'\nimport win from 'dojo/win'\nimport ShareCanvas from 'canvas/share/ShareCanvas'\nimport ShareController from 'canvas/share/ShareController'\nimport ModelFactory from 'core/ModelFactory'\nimport RenderFactory from 'core/RenderFactory'\n//import lang from 'dojo/_base/lang'\n//import on from 'dojo/on'\nimport Services from 'services/Services'\nimport Logger from \"common/Logger\";\n\nexport default {\n  name: \"Design\",\n  mixins: [DojoWidget],\n  data: function() {\n    return {\n    };\n  },\n  components: {\n      'ShareCanvas': ShareCanvas\n  },\n  computed: {\n    pub () {\n      return this.$route.meta && this.$route.meta.isPublic\n    },\n    mode () {\n\t\t\tif (this.pub) {\n\t\t\t\treturn 'public'\n\t\t\t}\n\t\t\treturn 'private'\n\t\t}\n  },\n  methods: {\n    loadData () {\n      let id = this.$route.query.h\n      this.logger.log(0, 'loadData', 'enter', id)\n      Promise.all([\n          this.modelService.findAppByHash(id),\n      ]).then(values => {\n         this.buildCanvas(values[0])\n      })\n    },\n    buildCanvas (model) {\n      this.logger.log(0, 'buildCanvas', 'enter')\n      let canvas = this.$refs.canvas\n      let controller = new ShareController()\n      let service = this.modelService\n\n      /**\n       * model factory\n       */\n      var factory = new ModelFactory();\n      factory.setModel(model);\n\n      /**\n       * render factory\n       */\n      var renderFactory = new RenderFactory();\n      renderFactory.setModel(model);\n      renderFactory.setHash(this.$route.query.h)\n\n      /**\n       * Dependency injection\n       */\n      controller.setModelService(service)\n      controller.setModelFactory(factory);\n      if (this.pub) {\n        controller.setPublic(true)\n      }\n\n      canvas.setController(controller);\n      canvas.setCommentService(Services.getCommentService())\n      canvas.setRenderFactory(renderFactory);\n      canvas.setModelFactory(factory);\n      canvas.setModelService(service);\n      canvas.setUser(this.user)\n      canvas.setHash(this.$route.query.h);\n\n      var startScreen = null;\n      for(var screenID in model.screens){\n        var screen = model.screens[screenID];\n        if (screen.props && screen.props.start){\n            startScreen = screenID;\n            break;\n        }\n      }\n      /**\n       * controller will render screen\n       */\n      controller.setModel(model, startScreen);\n\n    }\n  },\n  async mounted() {\n    this.logger = new Logger(\"Design\");\n    css.add(win.body(), 'MatcVisualEditor')\n    this.modelService = Services.getModelService(this.$route)\n    this.user = await Services.getUserService().load()\n    this.loadData()\n    this.logger.log(3, 'mounted', 'exit')\n  }\n};\n</script>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Share.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Share.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Share.vue?vue&type=template&id=839541ba\"\nimport script from \"./Share.vue?vue&type=script&lang=js\"\nexport * from \"./Share.vue?vue&type=script&lang=js\"\nimport style0 from \"./Share.vue?vue&type=style&index=0&id=839541ba&prod&class=css&lang=css\"\nimport style1 from \"./Share.vue?vue&type=style&index=1&id=839541ba&prod&lang=scss\"\nimport style2 from \"./Share.vue?vue&type=style&index=2&id=839541ba&prod&lang=sass\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","on","onMouseWheel","selectedViewMode","ref","pub","onVieModeChange","viewport","onViewPortChange","_e","staticRenderFns","CollabSession","constructor","user","collabUsers","initWebsocket","model","canvas","controller","toolbar","Logger","log","websocket","Services","getWebSocketService","id","token","onMessage","msg","dispatchWebSocketMessage","init","success","sendHello","setMouseListener","pos","sendMouse","setModelChangeListener","changeEvent","sendChange","err","error","hasOtherUsers","others","find","u","undefined","send","type","sendBye","sendImHere","addCollabUser","removeCollabUser","setCollabMouse","collabRecieveChanges","found","push","filter","close","style","layerListWidth","$event","stopPropagation","onResizeStart","apply","arguments","modelName","onHomeMenu","class","mode","onNewComment","onChangeViewMode","canvasViewConfig","onChangeCanvasViewConfig","$emit","showSharing","_v","name","mixins","data","x_prefix","components","methods","postCreate","setPopoverFct","setLabel","setMaxMin","setFormTo","onHover","setValue","hist","bar","css","me","to","from","db","lblCntr","mean","mounted","component","_s","_l","i","key","value","onSelect","label","_m","props","selectedTool","tools","icon","computed","items","onHide","animated","m","refInFor","selected","setSelected","highlightWidth","highlightX","modes","tooltip","hasData","setHighlight","nextView","watch","setTimeout","hasSelectAll","hasSessionDetails","renderToolbar","renderScreenProperties","cntr","renderWidgetProperties","renderHeatMapProperties","list","setHeatMapLabel","lbl","renderDropOffProperties","maxLabelLength","content","row","tasks","nodes","renderSessionProperties","updateColor","hasCustomColor","hasPicker","renderSessionSection","onSelectSessionInvert","console","onSelectSesionAll","onSelectSesionsTask","onSortSessionList","renderSessionList","chk","play","hoverSession","showUserJourneyOutlier","selectUserJournyTask","setSelectSessions","selectAllSessions","selectSession","onSessionSelectionChanged","getSelectedSessions","sessions","_getTestList","testSettings","df","isValid","status","taskSuccess","session","taskPerformance","weirdness","duration","date","start","size","screens","renderGestureProperties","renderScreenModes","showProperties","hideProperties","hideAllSections","setController","setCanvas","setModelFactory","setModel","setAnnotation","setTest","setEvents","setMode","onModeChange","setSelectedViewButton","createRing","bgColor","width","backgroundColor","color","color2","color3","ring","createToolBarItem","a","parent","createInput","input","div","createContent","createSection","parentNode","createSectionHeader","span","createBigNumber","onExit","hash","onShare","onWidgetSelected","onScreenSelected","onLineSelected","onMultiSelect","onGroupSelect","onCanvasSelected","updatePropertiesView","showSession","dialog","Promise","_showSession","player","_getSessionAnnotation","appID","reference","onShowSettings","themeList","mouseWheelList","onSaveSettings","canvasTheme","mouseWheelMode","showSignUpDialog","d","_createSignUpForm","f","required","placeholder","min","click","_signUpAndNew","result","form","window","events","analyticMode","analyticHeatMapClicks","setCommentService","onMove","onEdit","showHelpDialog","showHelp","help","setAnalyticMode","reRenderAnalyticMode","setModelService","setPublic","setCanvasViewConfig","setUser","setMouseData","temp","share","right","onStartDND","localStorage","initLayer","setLayerListWidth","showClickHeatMap","numberOfClicks","showFirstClickHeatMap","showMouseHeatMap","_onMouseDataLoaded","showViewMap","showDropOff","showUserJourney","time","tree","task","taskColor","outlier","outlierColor","showGestureMap","showScreenMode","changeScreenMode","showDwellDistribution","showGestureProperties","showWidgetProperties","widgetData","showScreenProperties","times","views","clicks","widgetClicks","screenTests","count","tests","showSessionProperties","selectDropOffTask","showDropOffProperties","showDropOffChart","showDropOffFunnel","funnel","getNiceEventLabel","showHeatMapProperties","cleanUp","unselect","blurWidgetProperties","highlightSession","highlightAnalyticLine","line","divs","_render_global_UserJourney","_renderUserTree","maxCount","maxMeanDuration","x","y","Math","_renderTreeEvent","build","_renderUserSingleLines","_renderUserGraph","match","e","maxDuration","lastDurationEvent","point","matchLines","halo","lineColor","lineOpacity","lineWidth","_renderScreenEvent","onScreenEventClick","_getSessionGraph","_addToGraph","graph","_render_global_DropOff","_render_dropoff_task_time","_render_dropoff_task_success","_getDropOffBoxPosition","_renderDropOffEvent","selectDropOffPoint","getOutlierScores","getGestures","getUserJourney","getTaskPerformance","getOverlayViews","total","counts","getOverlayTest","screenCounts","getScreenViews","getScreenTests","getScreenDwellTime","getOverlayDwellTime","getScreenWidgetClicks","widgetEvents","widgetScreenEvents","getScreenClicksOnBackground","getMissedClicks","passiveScreens","widgets","passiveWidgets","select","as_array","getScreenClicks","getOverlayClicks","getOverlayWidgetClicks","getLineWidgetData","clicksAbs","maxClicksAbs","Object","v","getWidgetData","getFirstNClicksData","DojoWidget","_DragNDrop","_Color","Util","Render","Lines","DnD","Add","Select","Distribute","GridResize","Tools","Zoom","InlineEdit","Scroll","Upload","KeyBoard","Resize","Replicate","Comment","Heat","UserJourney","DropOff","DataProcessing","zoom","resizeEnabled","renderDND","dragNDropMinTimeSpan","wireInheritedWidgets","taskLineOpacity","isBlackAndWhite","dropOffLineWidth","dropOffLineColor","dropOffEventWidth","userJourneyEndColor","w","h","topic","lang","showError","XlineFunction","setToolbar","inlineEditInit","setBW","renderLines","showComments","initAnalyticSVG","cleanUpAnalyticLines","drawLine","drawAnalyticLine","attr","drawStraightAnalyticLine","initWiring","dispatchMouseDownScreen","dispatchMouseDownWidget","afterUpdateDnd","initSettings","storePropView","moveMode","getSettings","setSettings","applySettings","setCanvasTheme","initDarkModeListener","isDarkModeOS","onWidgetDndClick","onScreenDndClick","selectAnalyticDiv","renderLayerList","afterRender","hasSelect","_renderHeatMap","screenEvents","_render_HeatmapMouse","mouseData","_render_HeatmapClick","screenClicks","_filterSelectedSessions","_render_pixel_screen_heatmap","_render_HeatmapScrollView","screen","_render_HeatmapScrollTime","_render_HeatmapViews","ctx","_render_HeatmapDwelTime","drawDurationLine","_render_global_Gesture","_renderGestureStart","cleanUpAnalytics","c","getController","setControllerCallback","setRenderFactory","setSubMode","onKeyPress","getMode","onKeyUp","initMouseTracker","onMouseMove","destroy","logPageView","AnalyticController","Core","super","logger","s","modelService","_canvas","t","factory","screenID","inheritedModel","createInheritedModel","addContainerChildrenToModel","oldModel","clone","debug","setFonts","fonts","setSinglePage","enabled","getZoomFactor","afterRenderCallback","CoreUtil","requestAnimationFrame","moveToScreen","_requestRendering","_zoomedModel","_zoomToScreen","winBox","win","getBox","floor","setZoom","widget","warn","lines","selection","onGroupSelected","groups","group","unSelect","showSuccess","load","loadData","loadAnlyticData","getHashFromInvitation","loadAll","loadTest","loadEvents","loadAnnotations","loadApp","loadCommands","loadInvitations","setCache","buildCanvas","renderFactory","buildAnalyticCanvas","startScreen","getModeFromRoute","beforeDestroy","onDNDLayerClick","zoomLevelPos","closeSVGEditor","onZoomMinusClick","onZoomPlusClick","onTogggleLine","cleanUpGridResize","setHash","initButtons","event","old","onSimulator","startSimilator","_showDesktopSimulator","container","logData","canDestroy","scroller","_showMobileTest","wrapper","QR","img","qrCodeWrapper","_getSimulatorScreen","dispatchMouseDownCanvas","highlightActionWidgets","updateGridRezise","animateToScreen","getLinesForWidget","getLineForGesture","ShareController","countProps"],"sourceRoot":""}