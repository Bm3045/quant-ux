{"version":3,"file":"js/design.d066158f.js","mappings":"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","sources":["webpack://quant-ux/./src/views/apps/Analyze.vue?aee7","webpack://quant-ux/./src/canvas/analytic/AnalyticToolbar.vue?2f58","webpack://quant-ux/./src/dash/Histogram.vue?18c3","webpack://quant-ux/src/dash/Histogram.vue","webpack://quant-ux/./src/dash/Histogram.vue?ce64","webpack://quant-ux/./src/dash/Histogram.vue","webpack://quant-ux/./src/plugins/ToolbarPluginSection.vue?92a0","webpack://quant-ux/src/plugins/ToolbarPluginSection.vue","webpack://quant-ux/./src/plugins/ToolbarPluginSection.vue?2690","webpack://quant-ux/./src/plugins/ToolbarPluginSection.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticHomeMenu.vue?c617","webpack://quant-ux/src/canvas/analytic/AnalyticHomeMenu.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticHomeMenu.vue?6f2f","webpack://quant-ux/./src/canvas/analytic/AnalyticHomeMenu.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticViewModeButton.vue?31cb","webpack://quant-ux/src/canvas/analytic/AnalyticViewModeButton.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticViewModeButton.vue?4488","webpack://quant-ux/./src/canvas/analytic/AnalyticViewModeButton.vue","webpack://quant-ux/src/canvas/analytic/AnalyticToolbar.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticToolbar.vue?898f","webpack://quant-ux/./src/canvas/analytic/AnalyticToolbar.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticCanvas.vue?3ed1","webpack://quant-ux/./src/canvas/analytic/UserJourney.vue?8900","webpack://quant-ux/src/canvas/analytic/UserJourney.vue","webpack://quant-ux/./src/canvas/analytic/UserJourney.vue?0948","webpack://quant-ux/./src/canvas/analytic/UserJourney.vue","webpack://quant-ux/./src/canvas/analytic/DropOff.vue?eb2f","webpack://quant-ux/src/canvas/analytic/DropOff.vue","webpack://quant-ux/./src/canvas/analytic/DropOff.vue?417d","webpack://quant-ux/./src/canvas/analytic/DropOff.vue","webpack://quant-ux/./src/canvas/analytic/DataProcessing.vue?631a","webpack://quant-ux/src/canvas/analytic/DataProcessing.vue","webpack://quant-ux/./src/canvas/analytic/DataProcessing.vue?3605","webpack://quant-ux/./src/canvas/analytic/DataProcessing.vue","webpack://quant-ux/src/canvas/analytic/AnalyticCanvas.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticCanvas.vue?a17d","webpack://quant-ux/./src/canvas/analytic/AnalyticCanvas.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticController.js","webpack://quant-ux/src/views/apps/Analyze.vue","webpack://quant-ux/./src/views/apps/Analyze.vue?6404","webpack://quant-ux/./src/views/apps/Analyze.vue","webpack://quant-ux/./src/views/apps/Design.vue?ad99","webpack://quant-ux/./src/canvas/controller/CollabSession.js","webpack://quant-ux/src/views/apps/Design.vue","webpack://quant-ux/./src/views/apps/Design.vue?ac53","webpack://quant-ux/./src/views/apps/Design.vue","webpack://quant-ux/./src/views/apps/Share.vue?b6a9","webpack://quant-ux/./src/canvas/share/ShareCanvas.vue?7597","webpack://quant-ux/src/canvas/share/ShareCanvas.vue","webpack://quant-ux/./src/canvas/share/ShareCanvas.vue?c138","webpack://quant-ux/./src/canvas/share/ShareCanvas.vue","webpack://quant-ux/./src/canvas/share/ShareController.js","webpack://quant-ux/src/views/apps/Share.vue","webpack://quant-ux/./src/views/apps/Share.vue?0353","webpack://quant-ux/./src/views/apps/Share.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcCanvasPage\",attrs:{\"id\":\"CanvasNode\"}},[_c('AnalyticToolbar',{ref:\"toolbar\"}),_c('AnalyticCanvas',{ref:\"canvas\"})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcToolbar MatcAnalyticsToolbar MatcLayerListVisible\"},[_vm._m(0),_c('div',{staticClass:\"MatcToolbarTop \"},[_c('div',{staticClass:\"MatcToolbarTopHome\"},[_c('HomeMenu',{attrs:{\"name\":_vm.modelName},on:{\"select\":_vm.onHomeMenu}})],1),_c('div',{staticClass:\"MatcToolbarTopCntr\"},[_c('div',{staticClass:\"MatcToolbarSection\"},[_c('div',{class:['MatcToolbarItem MatcToolbarPrimaryItem', {'MatcToolbarItemSelected': _vm.mode === 'addComment'} ],attrs:{\"data-dojo-attach-point\":\"commentBtn\"},on:{\"click\":_vm.onNewComment}},[_c('QIcon',{attrs:{\"icon\":\"Comment\"}})],1)]),_c('div',{staticClass:\"MatcToolbarTopCenterCntr\"},[_c('div',{staticClass:\"MatcToolbarSection\",attrs:{\"data-dojo-attach-point\":\"screenSection\"}},[_c('AnalyticViewModeButton',{on:{\"change\":_vm.onChangeViewMode}})],1)]),_c('div',{staticClass:\"MatcToolbarNotificationSection MatcToolbarSection\",attrs:{\"data-dojo-attach-point\":\"notificationSection\"}},[_c('ToolbarPluginSection',{attrs:{\"events\":_vm.events,\"user\":_vm.user,\"mode\":_vm.model}}),_c('ViewConfig',{attrs:{\"value\":_vm.canvasViewConfig,\"analytic\":true},on:{\"change\":_vm.onChangeCanvasViewConfig}}),(false)?_c('HelpButton',{ref:\"helpBtn\",attrs:{\"hasNotifications\":false,\"hasToolbar\":true}}):_vm._e()],1)])]),_c('div',{staticClass:\"MatcToobarPropertiesSection MatcToolbarSectionHidden\",attrs:{\"data-dojo-attach-point\":\"propertiesCntr\"}})])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcToolbarLayerList MatcToolbarAnalyticList MatcToobarPropertiesSection\"},[_c('div',{staticClass:\"MatcToolbarLayerListCntr\",attrs:{\"data-dojo-attach-point\":\"testListCntr\"}})])}]\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcDashHistogram\"})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n<template>\n     <div class=\"MatcDashHistogram\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n</template>\n<script>\nimport DojoWidget from 'dojo/DojoWidget'\nimport css from 'dojo/css'\nimport Logger from 'common/Logger'\nimport _Color from 'common/_Color'\nimport _Tooltip from 'common/_Tooltip'\nimport DomBuilder from 'common/DomBuilder'\nimport DataFrame from 'common/DataFrame'\n\nexport default {\n    name: 'Histogram',\n    mixins:[_Color, _Tooltip, DojoWidget],\n    data: function () {\n        return {\n            x_prefix: \"\"\n        }\n    },\n    components: {},\n    methods: {\n        postCreate(){\n\t\t\tthis.log = new Logger(\"Histogram\");\t\t\n\t\t\tif(this.counts){\n\t\t\t\tvar values = this.counts.split(\",\");\n\t\t\t\tvar df = new DataFrame(values);\n\t\t\t\tvar hist = df.hist(null, this.bins);\n\t\t\t\tthis.setValue(hist,df.mean());\n\t\t\t}\n\t\t},\t\t\t\t\n\t\t\n\t\tsetPopoverFct(f){\n\t\t\tthis.popoverLabelFct = f;\n\t\t},\n\t\t\n\t\tsetLabel(l){\n\t\t\tthis.label.innerHTML = l;\n\t\t},\n\t\t\n\t\tsetMaxMin(fct){\n\t\t\tthis.minMaxFct = fct;\n\t\t},\n\t\t\n\t\tsetFormTo(fct){\n\t\t\tthis.toFromFct = fct;\n\t\t},\n\t\t\n\t\tonHover(fct){\n\t\t\tthis.hoverFCT = fct;\n\t\t},\n\t\t\n\t\tsetValue(hist, mean){\n\t\t\t\n\t\t\tvar bins = hist.size();\n\t\t\tvar max = hist.max(\"count\");\n\t\t\tvar min = hist.min(\"count\");\n\t\t\tvar from = hist.min(\"from\");\n\t\t\tvar to = hist.max(\"to\");\n\t\t\tvar width  = 100/ (bins *2 -1);\n\t\t\tvar v_mean = (mean - from) / (to - from) ;\n\t\t\t\n\t\t\n\t\t\tvar db = new DomBuilder();\n\t\t\tvar cntr = db.div(\"MatcDashHistogramCntr\").build();\n\t\t\t\n\t\t\tvar me = this;\n\t\t\thist.foreach(function(row, i){\t\n\t\t\t\tvar v = row.count;\n\t\t\t\tvar bar = db.div(\"MatcDashHistogramBar\").build(cntr);\n\t\t\t\tbar.style.height = Math.max(1, v*100 / max) + \"%\";\n\t\t\t\tbar.style.width = width + \"%\";\n\t\t\t\tbar.style.left = width*(i*2) + \"%\";\n\t\t\t\t\n\t\t\t\tif(me.hoverFCT){\n\t\t\t\t\tvar tt = me.hoverFCT(row);\n\t\t\t\t\tcss.add(bar, \"MatcDashHistogramBarHover\");\n\t\t\t\t\tme.addTooltip(bar, tt);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tif(this.toFromFct){\n\t\t\t\tto = this.toFromFct(to);\n\t\t\t\tfrom = this.toFromFct(from);\n\t\t\t}\n\t\t\t\n\t\t\tdb.span(\"MatcDashHistogramLabelMax MatcDashHistogramLabel\", max).build(cntr);\n\t\t\tdb.span(\"MatcDashHistogramLabelMin MatcDashHistogramLabel\", min).build(cntr);\n\t\t\tdb.span(\"MatcDashHistogramLabelFrom MatcDashHistogramLabel\", from + this.x_prefix).build(cntr);\n\t\t\tdb.span(\"MatcDashHistogramLabelTo MatcDashHistogramLabel\", to + this.x_prefix).build(cntr);\n\t\t\t\n\t\t\tthis.domNode.innerHTML == \"\";\n\t\t\tthis.domNode.appendChild(cntr);\n\t\t\t\n\t\t\t\n\n\t\t\t/**\n\t\t\t * Mean of passed\n\t\t\t */\n\t\t\tif(mean != null && mean != undefined){\n\t\t\t\tlet lblCntr = db.div(\"MatcDashHistogramLabelMean\").build(cntr);\n\t\t\t\tlblCntr.style.left = v_mean*100 + \"%\";\n\t\t\t\tif(this.toFromFct){\n\t\t\t\t\tmean = this.toFromFct(mean);\n\t\t\t\t} \n\t\t\t\tdb.span(\"MatcDashHistogramLabel MatcHorizontalMiddle\", mean + this.x_prefix).build(lblCntr);\n\t\t\t\tlet bar = db.div(\"MatcDashHistogramBarMean\").build(cntr);\n\t\t\t\tbar.style.left = v_mean*100 + \"%\";\n\t\t\t}\n\t\t\n\t\t},\n    }, \n    mounted () {\n    }\n}\n</script>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Histogram.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Histogram.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Histogram.vue?vue&type=template&id=a430b102&\"\nimport script from \"./Histogram.vue?vue&type=script&lang=js&\"\nexport * from \"./Histogram.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcToolbarSection\"})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n<template>\n    <div class=\"MatcToolbarSection\">\n    </div>\n</template>\n\n<script>\n\n\nexport default {\n    name: 'PluginSection',\n    props:[\"user\", \"model\", \"events\"],\n    mixins:[],\n    data: function () {\n        return {\n\t\t\tvalue: null\n        }\n    },\n    components: {\n\t},\n    methods: {\n    },\n    mounted () {\n    }\n}\n</script>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ToolbarPluginSection.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ToolbarPluginSection.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ToolbarPluginSection.vue?vue&type=template&id=2814457b&\"\nimport script from \"./ToolbarPluginSection.vue?vue&type=script&lang=js&\"\nexport * from \"./ToolbarPluginSection.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\" MatcToolbarArrowDropDown MatcToolbarDropDownButton MatcToobarHomeSection MatcToobarHomeSectionBlueX\"},[_c('div',{staticClass:\"MatcToolbarItem MatcToolbarPrimaryItem\",attrs:{\"type\":\"button\",\"data-dojo-attach-point\":\"button\"}},[_c('img',{attrs:{\"src\":require(\"../../style/img/QUXLogo5.svg\")}}),_c('span',{staticClass:\"MatcToobarHomeSectionAppNameLabel\"},[_vm._v(_vm._s(_vm.name))]),_c('span',{staticClass:\"caret\"})]),_c('div',{staticClass:\"MatcToolbarPopUp MatcToolbarDropDownButtonPopup\",attrs:{\"role\":\"menu\",\"data-dojo-attach-point\":\"popup\"},on:{\"mousedown\":function($event){$event.stopPropagation();}}},[_c('div',{staticClass:\"MatcToolbarPopUpWrapper\"},[_c('ul',{attrs:{\"role\":\"menu\"}},_vm._l((_vm.items),function(i){return _c('li',{key:i.value,staticClass:\"MatcToolbarMenuItem\",class:i.css,on:{\"click\":function($event){$event.stopPropagation();return _vm.onSelect(i, $event)}}},[_c('label',{staticClass:\"MatcToolbarPopUpLabel\"},[_vm._v(_vm._s(i.label))])])}),0)]),_vm._m(0)])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcToolbarPopUpArrowCntr\"},[_c('div',{staticClass:\"MatcToolbarPopUpArrow\"})])}]\n\nexport { render, staticRenderFns }","\n<template>\n    <div class=\" MatcToolbarArrowDropDown MatcToolbarDropDownButton MatcToobarHomeSection MatcToobarHomeSectionBlueX\">\n\t\t<div class=\"MatcToolbarItem MatcToolbarPrimaryItem\" type=\"button\" data-dojo-attach-point=\"button\">\n\t\t\t<img src=\"../../style/img/QUXLogo5.svg\">\n            <span class=\"MatcToobarHomeSectionAppNameLabel\" >{{name}}</span>\n            <span class=\"caret\"></span>\n\t\t</div>\n        <div class=\"MatcToolbarPopUp MatcToolbarDropDownButtonPopup\" role=\"menu\" data-dojo-attach-point=\"popup\" @mousedown.stop>\n            <div class=\"MatcToolbarPopUpWrapper\">\n                <ul class=\"\" role=\"menu\">\n                    <li v-for=\"i in items\" :key=\"i.value\" @click.stop=\"onSelect(i, $event)\" :class=\"i.css\" class=\"MatcToolbarMenuItem\">\n                    \n                        <label class=\"MatcToolbarPopUpLabel\">{{i.label}}</label>\n\n                    </li>\n                  \n\t\t\t    </ul>\n            </div>\n            <div class=\"MatcToolbarPopUpArrowCntr\">\n                <div class=\"MatcToolbarPopUpArrow\">\n                </div>\n            </div>\n        </div>\n    </div>\n\n</template>\n<script>\nimport DojoWidget from 'dojo/DojoWidget'\nimport css from 'dojo/css'\nimport Util from 'core/Util'\n//import QIcon from 'page/QIcon'\nimport _DropDown from '../toolbar/components/_DropDown'\n\n\nexport default {\n    name: 'CreateBasicButton',\n    mixins:[Util, DojoWidget, _DropDown],\n    props:['name'],\n    data: function () {\n        return {\n            selectedTool: null,\n            tools: [               \n                {value: 'onShowSettings', icon: '', label: this.getNLS('toolbar.menu.settings')},       \n                {value: 'showHelp', icon: '', label: this.getNLS('toolbar.menu.help')},         \n                {value: 3, css:'MatcToolbarPopUpLine'},\n                {value: 'onExit', icon: '', label: this.getNLS('toolbar.menu.exit')},\n            ]\n        }\n    },\n    computed: {\n        items () {       \n            return this.tools\n        }\n    },\n    components: {\n        //'QIcon':QIcon\n    },\n    methods: {\n\n    \n        onSelect (t, e) {        \n            this.$emit('select', t, e)\n        },\n\n\t\tonHide (){   \n\t\t\tcss.remove(this.domNode,\"MatcToolbarItemActive\");\n            this.selectedTool = null\n\t\t},\n\n\t\tasync init (){\n\t\t\t\n\t\t},\n\n    },\n    mounted () {\n    }\n}\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticHomeMenu.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticHomeMenu.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./AnalyticHomeMenu.vue?vue&type=template&id=2fc8f053&\"\nimport script from \"./AnalyticHomeMenu.vue?vue&type=script&lang=js&\"\nexport * from \"./AnalyticHomeMenu.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcToolbarNavButton\"},[_c('div',{ref:\"cntr\",staticClass:\"MatcToolbarEditModeCntr\"},[_c('div',{staticClass:\"MatcToolbarEditModeHighlight\",style:({ 'width': _vm.highlightWidth + 'px', 'left': _vm.highlightX + 'px' })}),_vm._l((_vm.modes),function(m,i){return _c('a',{key:m.value,ref:\"btns\",refInFor:true,class:['MatcToolbarItem', { 'MatcToolbarEditModeActive': m.value === _vm.selected }],on:{\"click\":function($event){return _vm.setSelected(m, i)}}},[_c('span',{ref:\"icons\",refInFor:true,class:'MatcToolbarResponsiveIcon ' + m.icon}),_c('span',{staticClass:\"MatcToolbarResponsiveLabel\"},[_vm._v(\" \"+_vm._s(m.label)+\" \")])])})],2)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n<template>\n    <div class=\"MatcToolbarNavButton\">\n\n        <div class=\"MatcToolbarEditModeCntr\" ref=\"cntr\">\n            <div class=\"MatcToolbarEditModeHighlight\" :style=\"{ 'width': highlightWidth + 'px', 'left': highlightX + 'px' }\">\n            </div>\n            <a v-for=\"(m, i) in modes\" @click=\"setSelected(m, i)\" ref=\"btns\" :key=\"m.value\"\n                :class=\"['MatcToolbarItem', { 'MatcToolbarEditModeActive': m.value === selected }]\">\n                <span :class=\"'MatcToolbarResponsiveIcon ' + m.icon\" ref=\"icons\"/>\n                <span class=\"MatcToolbarResponsiveLabel\">\n                    {{m.label}}\n                </span>\n            </a>\n        </div>\n\n    </div>\n</template>\n<style lang=\"scss\">\n    @import '../../style/toolbar/toolbar_nav_button.scss';\n</style>\n<script>\n\nimport Logger from \"common/Logger\";\nimport _Tooltip from 'common/_Tooltip'\nimport NLS from 'common/NLS'\nimport domGeom from 'dojo/domGeom'\n\nexport default {\n    name: \"EditModeButton\",\n    mixins: [_Tooltip, NLS],\n    props: ['value'],\n    data: function () {\n        return {\n            highlightWidth: 0,\n            highlightX: 0,\n            selected: 'showClickHeatMap',\n            modes: [\n                { label: 'Heatmaps', value: \"showClickHeatMap\", icon: \"mdi mdi-cursor-default\" },\n                // { label: 'Mouse Heatmap', value: \"showMouseHeatMap\", icon: \"mdi mdi-mouse\" },\n                { label: 'User Journey', value: \"showUserJourney\", icon: \"mdi mdi-vector-polyline\" },\n                { label: 'Tasks & Drop Off', value: \"showDropOff\", icon: \"mdi mdi-chart-timeline-variant-shimmer\" },\n                //{ label: 'Views', value: \"showViewMap\", icon: \"mdi mdi-eye\" },\n                { label: 'Dwell Time', value: \"showDwelTimeMap\", icon: \"mdi mdi-timelapse\" },\n                { label: 'Scroll', value: \"showScrollHeatMap\", icon: \"mdi mdi-swap-vertical\" },\n                { label: 'Scroll Time', value: \"showScrollTimeMa\", icon: \"mdi mdi-timer\" },\n            ]\n        };\n    },\n    computed: {\n        hasData() {\n            if (this.value) {\n                return this.value.hasDataView\n            }\n            return true\n        }\n    },\n    components: {},\n    methods: {\n        setSelected(m, i) {\n            this.log.log(1, 'setSelected', 'enter', m)\n            this.selected = m.value\n            this.setHighlight(i)\n            this.$emit(\"change\", m.value)\n        },\n    \n        setHighlight(i) {\n            const node = this.$refs.btns[i]\n            const pos = domGeom.position(node)\n            const cPos = domGeom.position(this.$refs.cntr)\n            this.highlightWidth = pos.w\n            this.highlightX = pos.x - cPos.x - 1\n        },\n        nextView() {\n        }\n    },\n    watch: {\n        value(v) {\n            this.log.log(2, 'watch(value)', 'enter', v)\n            this.value = v\n        }\n    },\n    async mounted() {\n        this.log = new Logger(\"AnalyticViewModeButton\")\n        this.setHighlight(0)\n        setTimeout(() => {\n            this.modes.forEach((mode, i) => {\n                const icon = this.$refs.icons[i]\n                this.addTooltip(icon, mode.label)\n            })\n        }, 100)\n\n \n    }\n};\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticViewModeButton.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticViewModeButton.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./AnalyticViewModeButton.vue?vue&type=template&id=5c4b83a8&\"\nimport script from \"./AnalyticViewModeButton.vue?vue&type=script&lang=js&\"\nexport * from \"./AnalyticViewModeButton.vue?vue&type=script&lang=js&\"\nimport style0 from \"./AnalyticViewModeButton.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\n<template>\n     <div class=\"MatcToolbar MatcAnalyticsToolbar MatcLayerListVisible\">\n\n\t\t<div class=\"MatcToolbarLayerList MatcToolbarAnalyticList MatcToobarPropertiesSection\" >\n\t\t\t<div class=\"MatcToolbarLayerListCntr\" data-dojo-attach-point=\"testListCntr\">\n\t\t\t\t\t\t\t\n\t\t\t</div>\n\t\t\t\n\t\t</div>\n\n\t\t<div class=\"MatcToolbarTop \">\n\t\t\t<div class=\"MatcToolbarTopHome\">\n\t\t\t\t<HomeMenu @select=\"onHomeMenu\"  :name=\"modelName\" />\n\t\t\t</div>\n\n\t\t\t<div class=\"MatcToolbarTopCntr\" >\n\t\t\t\t<div class=\"MatcToolbarSection\">\n\t\t\t\t\t<div :class=\"['MatcToolbarItem MatcToolbarPrimaryItem', {'MatcToolbarItemSelected': mode === 'addComment'} ]\" data-dojo-attach-point=\"commentBtn\"  @click=\"onNewComment\">\n\t\t\t\t\t\t<QIcon icon=\"Comment\" />\n\t\t\t\t\t</div>\t\n\t\t\t\t</div>\n\t\t\n\t\t\t\t<div class=\"MatcToolbarTopCenterCntr\">\n\t\t\t\t\t<div class=\"MatcToolbarSection\" data-dojo-attach-point=\"screenSection\">\n\t\t\t\t\t\t<AnalyticViewModeButton @change=\"onChangeViewMode\" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\n\n\t\t\t\t<div class=\"MatcToolbarNotificationSection MatcToolbarSection\" data-dojo-attach-point=\"notificationSection\">\n\t\t\t\t\t<ToolbarPluginSection :events=\"events\" :user=\"user\" :mode=\"model\" />\n\t\t\t\t\t<ViewConfig :value=\"canvasViewConfig\" @change=\"onChangeCanvasViewConfig\" :analytic=\"true\"/>\n\t\t\t\t\t<HelpButton :hasNotifications=\"false\" :hasToolbar=\"true\" ref=\"helpBtn\" v-if=\"false\"/>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"MatcToobarPropertiesSection MatcToolbarSectionHidden\" data-dojo-attach-point=\"propertiesCntr\">\n\t\t</div>\n\n\t</div>\n</template>\n<script>\nimport DojoWidget from 'dojo/DojoWidget'\nimport css from 'dojo/css'\nimport lang from 'dojo/_base/lang'\n\nimport on from 'dojo/on'\nimport touch from 'dojo/touch'\nimport hash from 'dojo/hash'\n\nimport Util from 'core/Util'\nimport _Color from 'common/_Color'\n\nimport Logger from 'common/Logger'\nimport DomBuilder from 'common/DomBuilder'\nimport ScrollContainer from 'common/ScrollContainer'\nimport Dialog from 'common/Dialog'\nimport _Tooltip from 'common/_Tooltip'\nimport CheckBox from 'common/CheckBox'\nimport RadioBoxList from 'common/RadioBoxList'\nimport Form from 'common/Form'\nimport ToolbarDropDownButton from 'canvas/toolbar/components/ToolbarDropDownButton'\nimport ToolbarColor from 'canvas/toolbar/components/ToolbarColor'\nimport Ring from 'common/Ring'\nimport Histogram from 'dash/Histogram'\nimport Analytics from 'dash/Analytics'\nimport VideoPlayer from 'views/apps/test/VideoPlayer'\nimport DataFrame from 'common/DataFrame'\nimport ViewConfig from 'canvas/toolbar/components/ViewConfig'\nimport ToolbarPluginSection from '../../plugins/ToolbarPluginSection'\nimport HelpButton from 'help/HelpButton'\nimport HomeMenu from './AnalyticHomeMenu.vue'\nimport Help from 'help/Help'\nimport QIcon from 'page/QIcon'\nimport AnalyticViewModeButton from './AnalyticViewModeButton'\n//import SessionList from './SessionList'\n\nexport default {\n    name: 'AnalyticToolbar',\n    mixins:[Util,_Color,  _Tooltip, DojoWidget],\n    data: function () {\n        return {\n\t\t\tmode:'',\n\t\t\tmodelName: 'Loading...',\n\t\t\tevents: null,\n\t\t\tmodel: null,\n\t\t\tuser: null,\n\t\t\tvalue: false,\n\t\t\tanalyticMode: \"HeatmapClick\",\n\t\t\tanalyticHeatMapClicks: -1,\n\t\t\tcanvasViewConfig: {}\n        }\n    },\n    components: {\n\t\t\t'ViewConfig': ViewConfig,\n\t\t\t'HelpButton': HelpButton,\n\t\t\t'ToolbarPluginSection': ToolbarPluginSection,\n\t\t\t'HomeMenu': HomeMenu,\n\t\t\t'QIcon': QIcon,\n\t\t\t'AnalyticViewModeButton': AnalyticViewModeButton,\n\t\t\t//'SessionList': SessionList\n\t\t},\n    methods: {\n        postCreate(){\n\t\t\tthis.logger = new Logger(\"AnalyticToolbar\");\n\t\t\tthis.logger.log(2,\"constructor\", \"entry\");\n\t\t\tthis.renderToolbar()\n\t\t},\n\n\t\n\t\tshowHelpDialog(helpID){\n\t\t\tif (this.$refs.helpBtn) {\n\t\t\t\tthis.$refs.helpBtn.show('analytics.canvas', helpID)\n\t\t\t}\n\t\t},\n\n\t\tonHomeMenu (option, e) {\n\t\t\tthis.logger.log(-1,\"onHomeMenu\", \"entry\", e);\n\t\t\tif (this[option.value]) {\n\t\t\t\tthis[option.value](e)\n\t\t\t}\n\t\t},\n\n\t\tonChangeViewMode (option) {\n\t\t\tthis.logger.log(-1,\"onChangeViewMode\", \"entry\", option);\n\t\t\tif (this[option]) {\n\t\t\t\tthis[option]()\n\t\t\t}\n\t\t},\n\n\t\tshowHelp(e) {\n\t\t\tlet dialog = new Dialog()\n\t\t\tvar db = new DomBuilder();\n\t\t\tlet popup = db.div(\"MatcDialog MatcHelpDialog MatcPadding\").build();\n\t\t\tdialog.popup(popup, e.target);\n\t\t\tlet help = this.$new(Help)\n\t\t\thelp.placeAt(popup)\n\t\t},\n\n\n\t\tonNewComment(e){\n\t\t\tthis.logger.log(2,\"onNewComment\", \"entry\");\n\t\t\tthis.stopEvent(e);\n\t\t\tthis.emit(\"newComment\", {\"type\" : \"comment\", \"event\" : e});\n\t\t},\n\n\t\tsetAnalyticMode(mode, params){\n\t\t\tthis.logger.log(2,\"setAnalyticMode\", \"entry > mode: \" + mode);\n\t\t\tthis.analyticMode = mode;\n\t\t\tif(this.canvas){\n\t\t\t\tthis.canvas.setAnalyticMode(mode, params);\n\t\t\t}\n\t\t\tthis.hideProperties();\n\t\t},\n\n\t\tsetModelService (s) {\n\t\t\tthis.modelService = s\n\t\t\tsetTimeout(lang.hitch(this, \"initMouseData\"), 500);\n\t\t},\n\n\t\tsetPublic(p){\n\t\t\tthis.isPublic = p;\n\t\t\tif(p){\n\t\t\t\t// css.remove(this.signupSection, \"MatcToolbarSectionHidden\");\n\t\t\t}\n\t\t},\n\n\t\tsetCanvasViewConfig (viewConfig) {\n\t\t\tthis.canvasViewConfig = viewConfig\n\t\t},\n\n\t\tonChangeCanvasViewConfig (key, value) {\n\t\t\tif (this.canvas) {\n\t\t\t\tthis.canvas.setCanvasViewConfig(key, value)\n\t\t\t}\n\t\t},\n\n\t\tsetUser(u) {\n\t\t\tthis.user = u\n\t\t},\n\n\t\tasync initMouseData(){\n\t\t\tthis.logger.log(2,\"initMouseData\", \"entry\");\n\t\t\tif(this.isPublic){\n\t\t\t\t//this._doGet(\"/examples/mouse/\" + this.model.id + \".json\", lang.hitch(this,\"setMouseData\"));\n\t\t\t\tlet res = await this.modelService.findPublicMouse(this.model.id)\n\t\t\t\tthis.setMouseData(res)\n\t\t\t} else {\n\t\t\t\tlet res = await this.modelService.findMouse(this.model.id)\n\t\t\t\tthis.setMouseData(res)\n\t\t\t\t//this._doGet(\"rest/mouse/\" + this.model.id + \".json\", lang.hitch(this,\"setMouseData\"));\n\t\t\t}\n\t\t},\n\n\t\tsetMouseData(data){\n\t\t\tthis.logger.log(2,\"setMouseData\", \"entry >\"  +data.length);\n\t\t\tthis.mouseData = data;\n\t\t},\n\n\n\t\t/**********************************************************************\n\t\t * Callbacks to canvas\n\t\t **********************************************************************/\n\n\n\t\tshowClickHeatMap(){\n\t\t\tthis.logger.log(2,\"showClickHeatMap\", \"entry > \" + this.analyticHeatMapClicks);\n\t\t\tthis.setAnalyticMode(\"HeatmapClick\", {numberOfClicks : this.analyticHeatMapClicks} );\n\t\t\tthis.showHeatMapProperties();\n\t\t},\n\n\t\treShowClickHeatMap () {\n\t\t\tthis.logger.log(0,\"reShowClickHeatMap\", \"entry > \" + this.analyticHeatMapClicks);\n\t\t\tthis.hideAllSections()\n\t\t\tthis.showHeatMapProperties();\n\t\t},\n\n\t\tshowFirstClickHeatMap(i){\n\t\t\tthis.logger.log(-1,\"showFirstClickHeatMap\", \"entry > \"+ i);\n\t\t\tthis.analyticHeatMapClicks = i;\n\t\t\tthis.setHeatMapLabel(i)\n\t\t\tif (i === 'mouse') {\n\t\t\t\tthis.showMouseHeatMap()\n\t\t\t\tthis.showHeatMapProperties();\n\t\t\t} else {\t\t\n\t\t\t\tthis.setAnalyticMode(\"HeatmapClick\",{numberOfClicks : this.analyticHeatMapClicks} );\n\t\t\t}\n\t\t},\n\n\t\tshowMouseHeatMap(){\n\t\t\tthis.logger.log(2,\"showMouseHeatMap\", \"entry\");\n\t\t\tif(!this.mouseData){\n\t\t\t\tthis.canvas.showHint(\"Loading data...\");\n\t\t\t\tif(this.isPublic){\n\t\t\t\t\tthis._doGet(\"/examples/mouse/\" + this.model.id + \".json\", lang.hitch(this,\"_onMouseDataLoaded\"))\n\t\t\t\t} else {\n\t\t\t\t\tthis._doGet(\"rest/mouse/\" + this.model.id + \".json\", lang.hitch(this,\"_onMouseDataLoaded\"))\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.canvas.setMouseData(this.mouseData);\n\t\t\t\tthis.setAnalyticMode(\"HeatmapMouse\");\n\t\t\t}\n\n\t\t},\n\n\n\t\t_onMouseDataLoaded(data){\n\t\t\tthis.logger.log(2,\"_onMouseDataLoaded\", \"entry >\"  +data.length);\n\t\t\tthis.mouseData = data;\n\t\t\tthis.canvas.setMouseData(this.mouseData);\n\t\t\tthis.setAnalyticMode(\"HeatmapMouse\");\n\t\t},\n\n\t\tshowScrollHeatMap(){\n\t\t\tthis.logger.log(2,\"showScrollHeatMap\", \"entry\");\n\t\t\tthis.setAnalyticMode(\"HeatmapScrollView\");\n\t\t},\n\n\t\tshowDwelTimeMap(){\n\t\t\tthis.logger.log(2,\"showDwelTimeMap\", \"entry\");\n\t\t\tthis.setAnalyticMode(\"HeatmapDwelTime\");\n\t\t},\n\n\t\tshowDiscoveryTimeMap(){\n\t\t\tthis.logger.log(2,\"showDwelTimeMap\", \"entry\");\n\t\t\tthis.setAnalyticMode(\"HeatmapDiscoryTime\");\n\t\t},\n\n\t\tshowScrollTimeMap(){\n\t\t\tthis.logger.log(2,\"showScrollHeatMap\", \"entry\");\n\t\t\tthis.setAnalyticMode(\"HeatmapScrollTime\");\n\t\t},\n\n\t\tshowViewMap(){\n\t\t\tthis.logger.log(2,\"showViewMap\", \"entry\");\n\t\t\tthis.setAnalyticMode(\"HeatmapViews\");\n\t\t},\n\n\t\tshowDropOff () {\n\t\t\tthis.logger.log(-1,\"showDropOff\", \"entry\");\n\t\t\tthis.showDropOffProperties()\n\t\t},\n\n\t\tshowUserJourney(){\n\t\t\tthis.logger.log(-1,\"showUserJourney\", \"entry > \");\n\t\n\t\t\tconst sessions = {};\n\t\t\tfor(var id in this.sessionCheckBoxes){\n\t\t\t\tsessions[id] = this.sessionCheckBoxes[id].getValue();\n\t\t\t}\n\t\t\tconst params = {\n\t\t\t\tsessions:sessions,\n\t\t\t\ttime: this.sessionTimeCheckBox.getValue(),\n\t\t\t\tcolor : this.sessionLineColor.getValue(),\n\t\t\t\ttree: this.sessionTreeCheckBox.getValue(),\n\t\t\t\ttask: this.sessionTaskBtn.getValue(),\n\t\t\t\ttaskColor: this.sessionTaskLineColor.getValue(),\n\t\t\t\toutlier: this.sessionOutlierCheckbox.getValue(),\n\t\t\t\toutlierColor: this.sessionOutlierColor.getValue()\n\t\t\t};\n\t\t\tthis.setAnalyticMode(\"UserJourney\",params );\n\t\t\tthis.showSessionProperties();\n\t\t},\n\n\t\tshowGestureMap(){\n\t\t\tthis.logger.log(2,\"showGestureMap\", \"entry > \");\t\n\t\t\tvar params = {\n\t\t\t\tcolor: this.gestureLineColor.getValue()\n\t\t\t};\n\t\t\tthis.setAnalyticMode(\"Gesture\", params);\n\t\t\tthis.showGestureProperties();\n\n\n\t\t},\n\n\n\t\t/**********************************************************************\n\t\t * Rending stuff\n\t\t **********************************************************************/\n\n\t\trenderToolbar(){\n\t\t\tthis.logger.log(3,\"renderToolbar\", \"enter\");\n\t\t\tif (this.isRendered) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tthis.isRendered = true\n\t\t\tthis.logger.log(3,\"renderToolbar\", \"exit\");\n\t\t},\n\n\n\n\t\trender(){\n\t\t\tthis.logger.log(3,\"render\", \"entry\");\n\n\t\t\tthis.properties = document.createElement(\"div\");\n\t\t\tcss.add(this.properties, \"MatcToobarPropertiesSectionCntr\")\n\n\t\t\tthis.sections = [];\n\n\t\t\tthis.propertiesStates = {};\n\n\t\t\tthis.renderScreenProperties();\n\n\t\t\tthis.renderWidgetProperties();\n\n\t\t\tthis.renderSessionProperties();\n\n\t\t\tthis.renderSessionSection();\n\n\t\t\tthis.renderDropOffProperties()\n\n\t\t\tthis.renderHeatMapProperties();\n\n\t\t\tthis.renderGestureProperties();\n\n\t\t\tthis.propertiesCntr.appendChild(this.properties);\n\n\n\t\t\t/**\n\t\t\t * Now assemble final ui. hook in properties panel and make toolSection Visible!\n\t\t\t */\n\t\t\tthis.scroller = this.$new(ScrollContainer);\n\t\t\tthis.scroller.placeAt(this.propertiesCntr);\n\t\t\tthis.scroller.wrap(this.properties, 40);\n\n\t\t\tthis.hideAllSections();\n\n\t\t\tthis.showHeatMapProperties();\n\n\t\t\tthis.logger.log(3,\"render\", \"exit\");\n\t\t},\n\n\t\trenderScreenProperties(){\n\t\t\tthis.logger.log(3,\"renderScreenProperties\", \"entry\");\n\n\n\t\t\tvar db = new DomBuilder();\n\t\t\t/**\n\t\t\t * Name\n\t\t\t */\n\t\t\tthis.screenNameDiv = this.createSection(\"Screen Name\", this.properties);\n\t\t\tvar content = this.createContent(this.screenNameDiv);\n\n\t\t\tthis.screenName = this.createInput(content, \"Screen Name\");\n\t\t\tthis.screenName.readOnly = true;\n\n\t\t\tvar ringCntr = db.div(\"MatcCenter\").build(content);\n\n\t\t\t/**\n\t\t\t * Views total\n\t\t\t */\n\t\t\tvar cntr = db.div(\"MatcMarginBottom\").build(ringCntr)\n\t\t\tthis.screenTestRing = this.createRing(\"Test Coverage\", \"analytics.canvas.kpi.coverage\");\n\t\t\tthis.screenTestRing.placeAt(cntr);\n\n\t\t\t/**\n\t\t\t * Dwell\n\t\t\t */\n\t\t\tcntr = db.div(\"MatcMarginBottom\").build(ringCntr)\n\t\t\tthis.screenDwellRing = this.createRing(\"Dwell Time\", \"analytics.canvas.kpi.dwell\");\n\t\t\tthis.screenDwellRing.placeAt(cntr);\n\n\t\t\t/**\n\t\t\t * Views total\n\t\t\t */\n\t\t\tcntr = db.div(\"MatcMarginBottom\").build(ringCntr)\n\t\t\tthis.screenTotalViewRing = this.createRing(\"Screen Views\", \"analytics.canvas.kpi.screen-views\");\n\t\t\tthis.screenTotalViewRing.placeAt(cntr);\n\n\n\t\t\t/**\n\t\t\t * CLicks\n\t\t\t */\n\t\t\tcntr = db.div(\"MatcMarginBottom\").build(ringCntr)\n\t\t\tthis.screenClickRing = this.createRing(\"Screen Clicks\", \"analytics.canvas.kpi.screen-clicks\");\n\t\t\tthis.screenClickRing.placeAt(cntr);\n\n\n\t\t\t/**\n\t\t\t * CLicks\n\t\t\t */\n\t\t\tcntr = db.div(\"MatcMarginBottom\").build(ringCntr)\n\t\t\tthis.screenWidgetClickRing = this.createRing(\"Widget Clicks\", \"analytics.canvas.kpi.screen-widget-clicks\");\n\t\t\tthis.screenWidgetClickRing.placeAt(cntr);\n\n\t\t},\n\n\n\t\trenderWidgetProperties(){\n\t\t\tthis.logger.log(3,\"renderWidgetProperties\", \"entry\");\n\n\t\t\tvar db = new DomBuilder();\n\n\t\t\t/**\n\t\t\t * Name\n\t\t\t */\n\t\t\tthis.widgetNameDiv = this.createSection(\"Widget \", this.properties);\n\t\t\tvar content = this.createContent(this.widgetNameDiv);\n\t\t\tthis.widgetName = this.createInput(content, \"Screen\");\n\t\t\tthis.widgetName.readOnly = true;\n\t\t\tvar ringCntr = db.div(\"MatcCenter\").build(content);\n\n\t\t\t/**\n\t\t\t * CLicks\n\t\t\t */\n\t\t\tlet cntr = db.div(\"MatcMarginBottom\").build(ringCntr)\n\t\t\tthis.widgetClickRing = this.createRing(\"Widget Clicks\", \"analytics.canvas.kpi.clicks\");\n\t\t\tthis.widgetClickRing.placeAt(cntr);\n\n\n\t\t\t/**\n\t\t\t * First Clicks\n\t\t\t */\n\t\t\tcntr = db.div(\"MatcMarginBottom\").build(ringCntr)\n\t\t\tthis.widgetFirstClickRing = this.createRing(\"First Clicks\", \"analytics.canvas.kpi.first-clicks\");\n\t\t\tthis.widgetFirstClickRing.placeAt(cntr);\n\n\t\t\t/**\n\t\t\t * Discovery\n\t\t\t */\n\t\t\tcntr = db.div(\"MatcMarginBottom\").build(ringCntr);\n\t\t\tvar nodes =  this.createBigNumber(db, cntr, \"Time before Click\", \"analytics.canvas.kpi.before-click\");\n\t\t\tthis.widgetDiscoverLabel =nodes[0];\n\t\t\tthis.widgetDiscoverSTDLabel =nodes[1];\n\n\t\t},\n\n\n\t\trenderHeatMapProperties(){\n\t\t\tthis.logger.log(1,\"renderHeatMapProperties\", \"entry\");\n\n\t\t\tvar db = new DomBuilder();\n\n\t\t\tthis.heatmapDiv = this.createSection(\"Heatmap\", this.properties);\n\n\t\t\tlet content = this.createContent(this.heatmapDiv);\n\n\t\t\tvar row = db.div(\"MatcToobarRow MatcMarginBottom\").build(content);\n\n\t\t\tvar list = this.$new(RadioBoxList);\n\t\t\tcss.add(list.domNode, \"MatcToolbarRadioList\");\n\t\t\tlist.setOptions([\n\t\t\t\t{\"value\" : -1,label : \"All Clicks\"},\n\t\t\t\t{\"value\" : 1, label : \"First Click\"},\n\t\t\t\t{\"value\" : 3, label : \"First three Clicks\"},\n\t\t\t\t{\"value\" : \"missedClicks\", label : \"Missed Clicks\"},\n\t\t\t\t{\"value\" : \"mouse\", label : \"Mouse\"}\n\t\t\t]);\n\t\t\tlist.placeAt(db.div().build(row));\n\t\t\tthis.own(list.on(\"change\", lang.hitch(this, \"showFirstClickHeatMap\")));\n\n\n\t\t\tthis.heatmapLabel = db.div('MatcToobarRow').label('MatcToolbarLabel MatcToolbarHelpSection').build(content)\n\n\t\t\tthis.heatmapClickList = list;\n\t\t\tthis.setHeatMapLabel(-1)\n\t\t},\n\n\t\tsetHeatMapLabel (i) {\n\t\t\tlet lbl = ''\n\t\t\tif (i === -1) {\n\t\t\t\tlbl = this.getNLS('analytics.canvas.heatamp.hintAll')\n\t\t\t}\n\t\t\tif (i === 1) {\n\t\t\t\tlbl = this.getNLS('analytics.canvas.heatamp.hintFirst')\n\t\t\t}\n\t\t\tif (i === 3) {\n\t\t\t\tlbl = this.getNLS('analytics.canvas.heatamp.hintFirstThree')\n\t\t\t}\n\t\t\tif (i === 'missedClicks') {\n\t\t\t\tlbl = this.getNLS('analytics.canvas.heatamp.hintMissed')\n\t\t\t}\n\n\t\t\tif (i === 'mouse') {\n\t\t\t\tlbl = this.getNLS('analytics.canvas.heatamp.hintMouse')\n\t\t\t}\n\t\t\tthis.heatmapLabel.textContent = lbl\n\t\t},\n\n\t\trenderDropOffProperties () {\n\t\t\tthis.logger.log(2,\"renderSessionProperties\", \"entry\");\n\n\t\t\tvar db = new DomBuilder();\n\n\n\t\t\tthis.dropOffConfigDiv = this.createSection(\"Show\", this.properties);\n\t\t\tvar content = this.createContent(this.dropOffConfigDiv);\n\t\t\tvar row = db.div(\"MatcToobarRow MatcToolbarRadioList\").build(content);\n\n\t\t\tthis.dropOffTimeCheckBox = this.$new(RadioBoxList, {maxLabelLength:20});\n\t\t\tthis.dropOffTimeCheckBox.setOptions([\n\t\t\t\t{value: false, label: 'Drop Off'},\n\t\t\t\t{value: true, label: 'Time'}\n\t\t\t]);\n\t\t\tthis.dropOffTimeCheckBox.setValue(false);\n\t\t\tthis.dropOffTimeCheckBox.placeAt(row);\n\t\t\tthis.own(on(this.dropOffTimeCheckBox, \"change\", lang.hitch(this, \"selectDropOffTask\")));\n\n\n\t\t\tthis.dropOffOptionsDiv = this.createSection(\"Tasks\", this.properties);\n\t\t\tcontent = this.createContent(this.dropOffOptionsDiv);\n\t\t\trow = db.div(\"MatcToobarRow \").build(content);\n\n\n\t\t\tthis.dropOffTaskBtn = this.$new(RadioBoxList, {maxLabelLength:20});\n\n\t\t\tlet tasks = []\n\n\t\t\tif (this.testSettings.tasks && this.testSettings.tasks.length >= 1) {\n\t\t\t\ttasks = this.testSettings.tasks.map((task,i) => {\n\t\t\t\t\treturn {value: i, label: task.name}\n\t\t\t\t})\t\n\t\t\t} else {\n\t\t\t\tthis.dropOffOptionsLabel = db\n\t\t\t\t\t.span(\n\t\t\t\t\t\t\t\"MatcToolbarLabel MatcToolbarHelpSection\", \n\t\t\t\t\t\t\tthis.getNLS(\"analytics.canvas.dropoff.hintNoTasksDefined\")\n\t\t\t\t\t)\n\t\t\t\t\t.build(row)\n\t\t\t}\n\t\t\t\n\t\t\tthis.dropOffTaskBtn.setOptions(tasks);\n\t\t\tthis.dropOffTaskBtn.setValue(0);\n\t\t\tcss.add(this.dropOffTaskBtn.domNode ,\"MatcToolbarRadioList\");\n\t\t\tthis.dropOffTaskBtn.placeAt(row);\n\t\t\tthis.own(on(this.dropOffTaskBtn, \"change\", lang.hitch(this, \"selectDropOffTask\")));\n\n\t\t\tthis.dropOffChartDivCntr = this.createSection(\"Insights\", this.properties);\n\t\t\tcontent = this.createContent(this.dropOffChartDivCntr);\n\n\t\t\tvar ringCntr = db.div(\"MatcCenter \").build(content);\n\t\t\tthis.dropoffTaskSuccess = this.createRing(\"Success\", \"analytics.canvas.kpi.first-clicks\");\n\t\t\tcss.add(this.dropoffTaskSuccess.domNode, 'MatcMarginBottom')\n\t\t\tthis.dropoffTaskSuccess.placeAt(ringCntr);\n\n\n\t\t\tlet cntr = db.div(\"MatcMarginBottom\").build(ringCntr);\n\t\t\tvar nodes =  this.createBigNumber(db, cntr, \"Duration\", \"analytics.canvas.kpi.before-click\");\n\t\t\tthis.dropOffTaskDuration =nodes[0];\n\t\t\tthis.dropOffTaskDurationLabel = nodes[1];\n\n\n\t\t\tcntr = db.div(\"MatcMarginBottom\").build(ringCntr);\n\t\t\tnodes =  this.createBigNumber(db, cntr, \"Interactions\", \"analytics.canvas.kpi.before-click\");\n\t\t\tthis.dropOffInteractions =nodes[0];\n\t\t\tthis.dropOffInteractionsLabel = nodes[1];\n\n\n\t\t\tthis.dropOffFunnelDivCntr = this.createSection(\"Drop Off\", this.properties);\n\t\t\tcontent = this.createContent(this.dropOffFunnelDivCntr);\n\n\t\t\tthis.dropOffChartDiv = db.div('MatcToolbarDropOffChart', '').build(content)\n\t\t},\n\n\n\t\trenderSessionProperties(){\n\t\t\tthis.logger.log(2,\"renderSessionProperties\", \"entry\");\n\n\t\t\tconst db = new DomBuilder();\n\n\t\t\tthis.sessionOptionsDiv = this.createSection(\"Show\", this.properties);\n\t\t\tlet content = this.createContent(this.sessionOptionsDiv);\n\n\t\t\tlet row = db.div(\"MatcToobarRow \").build(content);\n\t\t\tthis.sessionTreeCheckBox = this.$new(CheckBox);\n\t\t\tcss.add(this.sessionTreeCheckBox.domNode, \"MatcToolbarItem\");\n\t\t\tthis.sessionTreeCheckBox.setValue(true);\n\t\t\tthis.sessionTreeCheckBox.setLabel(\"Merge Graph\");\n\t\t\tthis.sessionTreeCheckBox.placeAt(row);\n\t\t\tthis.own(on(this.sessionTreeCheckBox, \"change\", lang.hitch(this, \"showUserJourney\")));\n\n\t\t\tthis.sessionOutlierCheckbox = this.$new(CheckBox);\n\t\t\tcss.add(this.sessionOutlierCheckbox.domNode, \"MatcToolbarItem\");\n\t\t\tthis.sessionOutlierCheckbox.setValue(false);\n\t\t\tthis.sessionOutlierCheckbox.setLabel(\"Show Outlier\");\n\t\t\tthis.sessionOutlierCheckbox.placeAt(row);\n\t\t\tthis.own(on(this.sessionOutlierCheckbox, \"change\", lang.hitch(this, \"showUserJourneyOutlier\")));\n\n\n\t\t\tthis.sessionOutlierDiv = this.createSection(\"Colors\", this.properties);\n\t\t \tcontent = this.createContent(this.sessionOutlierDiv);\n\t\t\trow = db.div(\"MatcToobarRow \").build(content);\n\t\n\t\n\t\t\tthis.sessionLineColor = this.$new(ToolbarColor, {updateColor :true, hasCustomColor:false, hasPicker:false});\n\t\t\tthis.sessionLineColor.placeAt(row);\n\t\t\tthis.sessionLineColor.setLabel('Graph');\n\t\t\tthis.sessionLineColor.setModel(this.model);\n\t\t\tthis.sessionLineColor.setValue(\"#33b5e5\");\n\t\t\tcss.add(this.sessionLineColor.domNode ,\" hidden\");\n\t\t\tthis.own(on(this.sessionLineColor, \"change\", lang.hitch(this, \"showUserJourney\")));\n\n\t\t\tthis.sessionTaskLineColor = this.$new(ToolbarColor, {updateColor :true, hasCustomColor:false, hasPicker:false});\n\t\t\tthis.sessionTaskLineColor.placeAt(row);\n\t\t\tthis.sessionTaskLineColor.setLabel('Task');\n\t\t\tthis.sessionTaskLineColor.setModel(this.model);\n\t\t\tthis.sessionTaskLineColor.setValue(\"#92c500\");\n\t\t\tcss.add(this.sessionTaskLineColor.domNode ,\"\");\n\t\t\tthis.own(on(this.sessionTaskLineColor, \"change\", lang.hitch(this, \"showUserJourney\")));\n\n\n\t\t\tthis.sessionOutlierColor = this.$new(ToolbarColor, {updateColor :true, hasCustomColor:false, hasPicker:false});\n\t\t\tthis.sessionOutlierColor.placeAt(row);\n\t\t\tthis.sessionOutlierColor.setLabel('Outlier');\n\t\t\tthis.sessionOutlierColor.setModel(this.model);\n\t\t\tthis.sessionOutlierColor.setValue(\"#ffb61c\");\n\t\t\tcss.add(this.sessionOutlierColor.domNode ,\"\");\n\t\t\tthis.own(on(this.sessionOutlierColor, \"change\", lang.hitch(this, \"showUserJourney\")));\n\t\t\n\n\t\t\tthis.sessionShowDiv = this.createSection(\"Options\", this.properties);\n\t\t\tcontent = this.createContent(this.sessionShowDiv);\n\t\t\trow = db.div(\"MatcToobarRow MatcToolbarRadioList\").build(content);\n\t\t\tthis.sessionTimeCheckBox = this.$new(RadioBoxList, {maxLabelLength:20});\n\t\t\tthis.sessionTimeCheckBox.setOptions([\n\t\t\t\t{value: false, label: 'Navigation'},\n\t\t\t\t{value: true, label: 'Time'}\n\t\t\t]);\n\t\t\n\t\t\tthis.sessionTimeCheckBox.setValue(false);\n\t\t\tthis.sessionTimeCheckBox.placeAt(row);\n\t\t\tthis.own(on(this.sessionTimeCheckBox, \"change\", lang.hitch(this, \"showUserJourney\")));\n\n\t\n\t\t\tthis.sessionTaskCntr = this.createSection(\"Tasks\", this.properties);\n\t\t\tcontent = this.createContent(this.sessionTaskCntr);\n\n\t\t\trow = db.div(\"MatcToobarRow \").build(content);\n\n\t\t\tvar tasks = [{value:-1, label: \"No Task\"}];\n\t\t\tif (this.testSettings.tasks){\n\t\t\t\tfor (let i=0; i < this.testSettings.tasks.length; i++){\n\t\t\t\t\tlet task = this.testSettings.tasks[i];\n\t\t\t\t\ttasks.push({value: i, label: task.name});\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.sessionTaskBtn = this.$new(RadioBoxList, {maxLabelLength:20});\n\t\t\tthis.sessionTaskBtn.setOptions(tasks);\n\t\t\tthis.sessionTaskBtn.setValue(-1);\n\t\t\tcss.add(this.sessionTaskBtn.domNode ,\"MatcToolbarRadioList\");\n\t\t\tthis.sessionTaskBtn.placeAt(row);\n\t\t\tthis.own(on(this.sessionTaskBtn, \"change\", lang.hitch(this, \"selectUserJournyTask\")));\n\n\t\t\n\t\t},\n\n\t\trenderSessionSection () {\n\n\n\t\t\tthis.sessionDiv = this.db.div(\"MatcToolbarSection\").build(this.testListCntr)\n\t\t\tlet content = this.createContent(this.sessionDiv);\n\t\t\tcss.add(content, \"MatcMarginBottomXXL\");\n\n\n\t\t\tlet row = this.db.div(\"MatcToobarRow\").build(content);\n\n\t\t\tthis.sessionOrderBrn = this.$new(ToolbarDropDownButton,{maxLabelLength:20});\n\t\t\tthis.sessionOrderBrn.setOptions([\n\t\t\t\t{value: 'duration', label:\"Sort by Duration\"},\n\t\t\t\t{value: 'events', label:\"Sort by Events\"},\n\t\t\t\t{value: 'date', label:\"Sort by Date\"},\n\t\t\t\t{value: 'weirdness', label:\"Sort by Outlier\"}\n\t\t\t]);\n\t\t\tthis.sessionOrderBrn.setPopupCss(\"MatcActionAnimProperties MatcPopupArrowLeft\");\n\t\t\tthis.sessionOrderBrn.updateLabel = true;\n\t\t\tthis.sessionOrderBrn.reposition = true;\n\t\t\tthis.sessionOrderBrn.repositionPosition = 'right';\n\t\t\tthis.sessionOrderBrn.setValue('duration')\n\t\t\tthis.sessionOrderBrn.placeAt(row);\n\t\t\tthis.tempOwn(on(this.sessionOrderBrn, \"change\", (v) => {this.onSortSessionList(v)}));\n\t\t\tthis.addTooltip(this.sessionOrderBrn.domNode, \"Change the sort order of the session list\");\n\n\n\t\t\tthis.sessionListCntr = this.db.div(\"MatcToolbarSessionCntr\").build(content);\n\t\t\tthis.sessionList = this._getTestList(this.events, this.annotation, this.testSettings);\n\t\t\tthis.renderSessionList(this.sessionListCntr, this.sessionList, 'duration')\n\n\t\t},\n\n\t\tonSortSessionList (value) {\n\t\t\tthis.renderSessionList(this.sessionListCntr, this.sessionList, value)\n\t\t\tthis.selectUserJournyTask(this.sessionTaskBtn.getValue())\n\t\t},\n\n\t\trenderSessionList (content, list, order) {\n\n\t\t\tconst db = new DomBuilder();\n\n\t\t\tcontent.innerHTML = \"\"\n\n\t\t\tthis.sessionCheckBoxes = {};\n\t\t\tthis.sessionAllCheckBox = this.$new(CheckBox);\n\t\t\tthis.sessionAllCheckBox.setLabel(\"Show All\");\n\t\t\tthis.sessionAllCheckBox.setValue(true);\n\t\t\tcss.add(this.sessionAllCheckBox.domNode, \"MatcToolbarItem\");\n\t\t\tthis.sessionAllCheckBox.placeAt(db.div(\"MatcToobarRow\").build(content));\n\t\t\tthis.own(on(this.sessionAllCheckBox,\"change\", lang.hitch(this,\"selectAllSessions\")));\n\n\t\t\tlist.sort((a, b) => {\n\t\t\t\tif (order === 'duration') {\n\t\t\t\t\treturn b.duration - a.duration\n\t\t\t\t} \n\t\t\t\tif (order === 'date')  {\n\t\t\t\t\treturn a.start - b.start\n\t\t\t\t}\n\t\t\t\tif (order === 'weirdness') {\n\t\t\t\t\treturn b.weirdness - a.weirdness\n\t\t\t\t}\n\t\t\t\treturn b.size - a.size\n\t\t\t})\n\t\t\n\n\t\t\tconst cntr = db.div(\"MatcToolbarSessionList\").build()\n\n\t\t\tfor(let i=0; i < list.length; i++){\n\t\t\t\tconst session = list[i];\n\t\t\t\tconst row = db.div(\"MatcToobarRow MatcToobarRowIconCntr\").build(cntr);\n\n\t\t\t\tconst chk = this.$new(CheckBox);\n\t\t\t\tcss.add(chk.domNode, \"MatcToolbarItem\");\n\t\t\t\tchk.setValue(true);\n\t\t\t\tif (order === 'duration') {\n\t\t\t\t\tchk.setLabel(\"Test \" + (session.id) + \" (\"  + session.duration + \"s )\"); // + session.taskPerformance +\" Tasks - \"\n\t\t\t\t} \n\t\t\t\tif (order === 'date') {\n\t\t\t\t\tchk.setLabel(\"Test \" + (session.id) + \" (\"  + session.date + \")\"); // + session.taskPerformance +\" Tasks - \"\n\t\t\t\t}\n\t\t\t\tif (order === 'events') {\n\t\t\t\t\tchk.setLabel(\"Test \" + (session.id) + \" (\"  + session.size + \")\"); // + session.taskPerformance +\" Tasks - \"\n\t\t\t\t}\n\n\t\t\t\tif (order === 'weirdness') {\n\t\t\t\t\tchk.setLabel(\"Test \" + (session.id) + \" (\"  + session.weirdness + \")\"); // + session.taskPerformance +\" Tasks - \"\n\t\t\t\t}\n\t\t\t\n\t\t\t\tchk.placeAt(db.div().build(row));\n\n\t\t\t\tthis.sessionCheckBoxes[session.session] = chk;\n\t\t\t\tthis.own(on(chk,\"change\", lang.hitch(this,\"selectSession\")));\n\t\t\t\tthis.own(on(row, \"mouseover\", lang.hitch(this, \"hoverSession\", session)))\n\t\t\t\tthis.own(on(row, \"mouseout\", lang.hitch(this, \"hoverSession\", null)))\n\n\t\t\t\tvar play = db.div(\"MatcToobarRowRightIcon\").span(\"mdi mdi-play\").build(row)\n\t\t\t\tthis.own(on(play,\"click\", lang.hitch(this,\"showSession\", session)));\n\t\t\t}\n\n\t\t\tthis.sessionScroller = this.$new(ScrollContainer);\n\t\t\tthis.sessionScroller.placeAt(content);\n\t\t\tthis.sessionScroller.wrap(cntr, 40);\n\t\t},\n\n\t\thoverSession (session) {\n\t\t\tif (this.analyticMode !== 'UserJourney') {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif(this.canvas){\n\t\t\t\tthis.canvas.highlightSession(session?.session)\n\t\t\t}\n\t\t},\n\n\t\tshowUserJourneyOutlier (showOutlier) {\n\t\t\tif (showOutlier) {\n\t\t\t\tlet outliers = this.canvas.getOutlierScores();\n\t\t\t\tfor (let session in this.sessionCheckBoxes){\n\t\t\t\t\tlet chkBx = this.sessionCheckBoxes[session];\n\t\t\t\t\tif (outliers[session]){\n\t\t\t\t\t\tcss.remove(chkBx.domNode, \"MatcToolbarItemStrikeThrough\");\t\n\t\t\t\t\t} else {\t\t\n\t\t\t\t\t\tcss.add(chkBx.domNode, \"MatcToolbarItemStrikeThrough\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tfor (let session in this.sessionCheckBoxes){\n\t\t\t\t\tlet chkBx = this.sessionCheckBoxes[session];\n\t\t\t\t\tcss.remove(chkBx.domNode, \"MatcToolbarItemPassive\");\n\t\t\t\t\tcss.remove(chkBx.domNode, \"MatcToolbarItemStrikeThrough\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.showUserJourney();\n\t\t},\n\t\t/**\n\t\t * Update the UI according the selected task. Show task color selector\n\t\t * and also fade out not matching sessions\n\t\t */\n\t\tselectUserJournyTask(taskNumber){\n\t\n\t\t\tif (taskNumber >= 0) {\n\t\t\t\t// css.remove(this.sessionTaskLineColor.domNode, \"hidden\");\n\t\t\t\t// css.remove(this.sessionLineColor.domNode, \"hidden\")\n\t\t\t\tlet task = this.testSettings.tasks[taskNumber];\n\t\t\t\tlet taskPerformance = this.canvas.getTaskPerformance();\n\t\t\t\tfor (let session in this.sessionCheckBoxes){\n\t\t\t\t\tlet chkBx = this.sessionCheckBoxes[session];\n\t\t\t\t\tif (taskPerformance[session] && taskPerformance[session][task.id]){\n\t\t\t\t\t\tcss.remove(chkBx.domNode, \"MatcToolbarItemStrikeThrough\");\n\t\t\t\t\t\t//chkBx.setValue(true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//chkBx.setValue(false);\n\t\t\t\t\t\tcss.add(chkBx.domNode, \"MatcToolbarItemStrikeThrough\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// css.add(this.sessionTaskLineColor.domNode, \"hidden\");\n\t\t\t\t// css.add(this.sessionLineColor.domNode, \"hidden\")\n\t\t\t\tfor (let session in this.sessionCheckBoxes){\n\t\t\t\t\tlet chkBx = this.sessionCheckBoxes[session];\n\t\t\t\t\tcss.remove(chkBx.domNode, \"MatcToolbarItemPassive\");\n\t\t\t\t\tcss.remove(chkBx.domNode, \"MatcToolbarItemStrikeThrough\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.showUserJourney();\n\t\t},\n\n\t\tselectAllSessions(value){\n\t\t\tfor(var id in this.sessionCheckBoxes){\n\t\t\t\tthis.sessionCheckBoxes[id].setValue(value);\n\t\t\t}\n\t\t\tthis.showUserJourney();\n\t\t},\n\n\n\t\tsetSelectSessions(ids){\n\t\t\tif (this.sessionCheckBoxes){\n\t\t\t\tfor(var id in this.sessionCheckBoxes){\n\t\t\t\t\tif (ids.indexOf(id) >= 0){\n\t\t\t\t\t\tthis.sessionCheckBoxes[id].setValue(true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.sessionCheckBoxes[id].setValue(false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.sessionAllCheckBox.setValue(false);\n\t\t\t\tthis.showUserJourney();\n\t\t\t}\n\t\t},\n\n\n\t\tselectSession(){\n\t\t\tthis.showUserJourney();\n\t\t},\n\n\n\t\t_getTestList(events, annotatation, testSettings){\n\n\t\t\tconst list =[];\n\t\t\tif(!testSettings.tasks){\n\t\t\t\ttestSettings.tasks = [];\n\t\t\t\tconsole.warn(\"_getTestList() > Added missing task array\")\n\t\t\t}\n\n\t\t\tconst df = new DataFrame(events);\n\t\t\tdf.sortBy(\"time\");\n\t\t\tconst sessionGroup = df.groupBy(\"session\");\n\t\t\tconst sessions = sessionGroup.data;\n\n\t\t\tconst annoSession = new DataFrame(annotatation).groupBy(\"reference\");\n\t\t\tconst analytics  = new Analytics();\n\t\t\tconst taskCount = testSettings.tasks.length;\n\t\t\tconst tasksPerformance = analytics.getMergedTaskPerformance(df, testSettings.tasks, annotatation );\n\t\t\tconst tasksBySession = tasksPerformance.count(\"session\");\n\n\t\t\tconst outliers = this.canvas.getOutlierScores()\n\n\t\t\tlet id = 1;\n\t\t\tfor(let sessionID in sessions){\n\n\t\t\t\tlet session = sessions[sessionID];\n\t\t\t\tlet date = this.formatDate(session.min(\"time\"), true);\n\n\t\t\t\tlet anno = annoSession.get(sessionID);\n\t\t\t\tlet status = '<span class=\"MatchDashStatusSuccess\">Valid</span>';\n\t\t\t\tlet isValid = true;\n\t\t\t\tif(anno){\n\t\t\t\t\tisValid = anno.get(0).get(\"isValid\");\n\t\t\t\t\tif(!isValid){\n\t\t\t\t\t\tstatus = '<span class=\"MatchDashStatusFailure\">Failure</span>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet taskSuccess = tasksBySession.get(sessionID);\n\t\t\t\tif(!taskSuccess){\n\t\t\t\t\ttaskSuccess = 0;\n\t\t\t\t}\n\n\t\t\t\tconst df = new DataFrame(session.data)\n   \t\t\t\t//const actionsEvents = this.getActionEvents(df);\n\t\t\t\tconst clicks = df.select(\"type\", \"in\",[\"ScreenClick\",\"WidgetClick\",\"WidgetChange\", \"ScreenGesture\", \"WidgetGesture\"])\n\n\n\t\t\t\tconst item = {\n\t\t\t\t\tsession : sessionID,\n\t\t\t\t\ttaskPerformance : taskSuccess + \" / \" + taskCount,\n\t\t\t\t\tweirdness: outliers[sessionID],\n\t\t\t\t\tduration : (Math.ceil( (session.max(\"time\") - session.min(\"time\")) / 1000 )),\n\t\t\t\t\tdate : date,\n\t\t\t\t\tstart : session.min(\"time\"),\n\t\t\t\t\tsize : clicks.size(),\n\t\t\t\t\tstatus :status,\n\t\t\t\t\tisValid : isValid,\n\t\t\t\t\tid : id,\n\t\t\t\t\tscreens : session.unique(\"screen\")\n\t\t\t\t};\n\n\t\t\t\tlist.push(item);\n\t\t\t\tid++;\n\t\t\t}\n\n\t\t\tlist.sort((a,b) => {\n\t\t\t\treturn a.id - b.id;\n\t\t\t});\n\n\t\t\treturn list;\n\t\t},\n\n\n\t\trenderGestureProperties(){\n\n\t\t\tvar db = new DomBuilder();\n\n\t\t\tthis.gestureOptionsDiv = this.createSection(\"Options\", this.properties);\n\n\t\t\tlet content = this.createContent(this.gestureOptionsDiv);\n\n\t\t\tvar row = db.div(\"MatcToobarRow MatcMarginBottomXXL\").build(content);\n\t\t\tdb.span(\"MatcToolbarItemLabel\", \"Gesture Color\").build(row);\n\n\t\t\tthis.gestureLineColor = this.$new(ToolbarColor, {updateColor :true, hasCustomColor:false, hasPicker:false});\n\t\t\tthis.gestureLineColor.placeAt(row);\n\t\t\tthis.gestureLineColor.setLabel('Line Color');\n\t\t\tthis.gestureLineColor.setModel(this.model);\n\t\t\tthis.gestureLineColor.setValue(\"#0099cc\");\n\t\t\tthis.own(on(this.gestureLineColor, \"change\", lang.hitch(this, \"showGestureMap\")));\n\n\n\t\t},\n\n\n\t\t/*****************************************************************************************************\n\t\t * Dialogs\n\t\t ****************************************************************************************************/\n\n\n\n\n\t\tshowDwellDistribution(e){\n\t\t\tthis.logger.log(0,\"showDwellDistribution\", \"entry > \" );\n\n\t\t\tif(this._selectedScreen){\n\n\t\t\t\tvar df = new DataFrame(this.events);\n\t\t\t\tvar analytics  = new Analytics();\n\t\t\t\tvar screenTimeGrouping = analytics.getScreenTimeGrouping(df);\n\t\t\t\tvar dwellTimes = screenTimeGrouping.get(this._selectedScreen.id);\n\n\t\t\t\tif(dwellTimes){\n\n\t\t\t\t\tvar db = new DomBuilder();\n\t\t\t\t\tvar dialog = new Dialog();\n\t\t\t\t\tvar d = db.div(\"MatcPadding DashTaskListDetailsDialog\").build();\n\n\t\t\t\t\tdb.h2(\"MatcDialogTitle\", \"Dwell Time Distribution &quot\" + this._selectedScreen.name + \"&quot\").build(d);\n\n\t\t\t\t\tvar cntr = db.div(\"DashTaskListDialogHist\").build(d);\n\n\t\t\t\t\tvar duration_dist = dwellTimes.hist(null, 10);\n\n\t\t\t\t\tvar hist = this.$new(Histogram);\n\t\t\t\t\thist.setFormTo(function(v){\n\t\t\t\t\t\treturn Math.round(v/1000) + \" sec\";\n\t\t\t\t\t});\n\t\t\t\t\thist.onHover(function(bucket){\n\t\t\t\t\t\treturn  Math.round(bucket.from/1000) + \" - \"  + Math.round(bucket.to/1000) + \" sec (\" +bucket.count + \" x)\" ;\n\t\t\t\t\t});\n\t\t\t\t\thist.setValue(duration_dist, dwellTimes.mean());\n\t\t\t\t\thist.placeAt(cntr);\n\n\t\t\t\t\tdialog.popup(d, e.target);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\n\n\t\t/*****************************************************************************************************\n\t\t * properties view\n\t\t ****************************************************************************************************/\n\n\t\tshowGestureProperties(){\n\t\t\tthis.logger.log(1,\"showGestureProperties\", \"entry > \");\n\t\t\tthis.showProperties();\n\t\t\tcss.remove(this.gestureOptionsDiv, \"MatcToolbarSectionHidden\");\n\t\t},\n\n\n\t\tshowWidgetProperties(model){\n\t\t\tthis.logger.log(1,\"showWidgetProperties\", \"entry > \" + model.id + \" \" + model.name);\n\t\t\tthis.showProperties();\n\n\t\t\tcss.remove(this.widgetNameDiv, \"MatcToolbarSectionHidden\");\n\t\t\tthis.widgetName.value = model.name;\n\n\t\t\tvar data = this.canvas.getWidgetData(model);\n\n\t\t\tif(data[model.id]){\n\t\t\t\tvar widgetData = data[model.id];\n\n\n\t\t\t\tthis.widgetClickRing.setPs(widgetData.clicksRel);\n\t\t\t\tthis.widgetClickRing.setValue(widgetData.clicksAbs);\n\n\t\t\t\t// vs firstClicksRelApp\n\t\t\t\tif(isNaN(widgetData.firstClicksRelScreen)){\n\t\t\t\t\twidgetData.firstClicksRelScreen = 0;\n\t\t\t\t}\n\t\t\t\tthis.widgetFirstClickRing.setPs(widgetData.firstClicksRelScreen);\n\t\t\t\tthis.widgetFirstClickRing.setValue(widgetData.firstClicksAbs);\n\n\n\t\t\t\tthis.setTextContent(this.widgetDiscoverSTDLabel, \"+/-\" + Math.round(widgetData.discoverTimeStd / 1000) + \"s\")\n\t\t\t\tthis.setTextContent(this.widgetDiscoverLabel, Math.round(widgetData.discoverTimeAbs / 1000) + \"s\");\n\t\t\t}\n\t\t},\n\n\n\n\t\tshowScreenProperties(model){\n\t\t\tthis.logger.log(0,\"showScreenProperties\", \"entry\");\n\t\t\tthis.showProperties();\n\n\t\t\tcss.remove(this.screenShapeDiv, \"MatcToolbarSectionHidden\");\n\n\n\n\t\t\tthis.screenName.value = model.name;\n\n\t\t\tvar times;\n\t\t\tvar views;\n\t\t\tvar clicks;\n\t\t\tvar widgetClicks;\n\t\t\tvar screenTests;\n\t\t\tif(!model.style.overlay){\n\t\t\t\ttimes = this.canvas.getScreenDwellTime();\n\t\t\t\tviews = this.canvas.getScreenViews();\n\t\t\t\tclicks = this.canvas.getScreenClicks();\n\t\t\t\twidgetClicks = this.canvas.getScreenWidgetClicks();\n\t\t\t\tscreenTests = this.canvas.getScreenTests();\n\t\t\t} else {\n\t\t\t\ttimes = this.canvas.getOverlayDwellTime();\n\t\t\t\tviews = this.canvas.getOverlayViews();\n\t\t\t\tclicks = this.canvas.getOverlayClicks();\n\t\t\t\twidgetClicks = this.canvas.getOverlayWidgetClicks();\n\t\t\t\tscreenTests = this.canvas.getOverlayTest();\n\t\t\t}\n\n\t\t\tvar time =times.times[model.id];\n\t\t\tif(!time){\n\t\t\t\ttime = 0;\n\t\t\t}\n\n\n\t\t\tvar sClick = clicks.clicks[model.id];\n\t\t\tvar wClicks = widgetClicks.clicks[model.id];\n\n\t\t\tvar totalClicksOnScreen = sClick + wClicks;\n\t\t\tvar avgDwell = (time /times.sessions) ;\n\n\t\t\tvar count =views.counts[model.id];\n\t\t\tif(!count){\n\t\t\t\tcount = 0;\n\t\t\t}\n\n\t\t\tvar tests = screenTests.counts[model.id];\n\t\t\tif(!tests){\n\t\t\t\ttests = 0;\n\t\t\t}\n\n\n\t\t\tthis.screenTotalViewRing.setValue(count);\n\t\t\tthis.screenTotalViewRing.setPs((count / views.total));\n\n\t\t\t//(count / times.sessions)\n\t\t\tthis.screenTestRing.setValue(tests);\n\t\t\tthis.screenTestRing.setPs((tests / screenTests.sessions));\n\n\n\t\t\tthis.screenClickRing.setPs(sClick / totalClicksOnScreen);\n\t\t\tthis.screenClickRing.setValue(sClick);\n\n\n\t\t\tthis.screenWidgetClickRing.setPs(wClicks / totalClicksOnScreen);\n\t\t\tthis.screenWidgetClickRing.setValue(wClicks);\n\n\n\t\t\tthis.screenDwellRing.setPs(time / times.total);\n\t\t\tthis.screenDwellRing.setValue(Math.round( avgDwell / 1000) + \"s\");\n\n\n\t\t},\n\n\n\t\tshowSessionProperties(){\n\t\t\tthis.logger.log(-1,\"showSessionProperties\", \"entry\");\n\t\t\tthis.showProperties();\n\n\t\t\t// css.remove(this.sessionDiv, \"MatcToolbarSectionHidden\");\n\t\t\tcss.remove(this.sessionOptionsDiv, \"MatcToolbarSectionHidden\");\n\t\n\n\t\t\tif (this.sessionTreeCheckBox.getValue()){\n\t\t\t\tcss.add(this.sessionTaskCntr, \"MatcToolbarSectionHidden\")\n\t\t\t\tcss.add(this.sessionLineColor.domNode, \"hidden\");\n\t\t\t\tcss.add(this.sessionTaskBtn.domNode, \"hidden\");\n\t\t\t\tcss.remove(this.sessionShowDiv, 'MatcToolbarSectionHidden')\n\t\t\t\t// css.add(this.sessionTaskLineColor.domNode, \"hidden\");\n\t\t\t\tcss.add(this.sessionLineColor.domNode, \"hidden\");\n\t\t\t\tcss.add(this.sessionOutlierDiv, \"MatcToolbarSectionHidden\")\n\t\t\t\tcss.add(this.sessionOutlierCheckbox.domNode, \"hidden\");\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tcss.remove(this.sessionTaskCntr, \"MatcToolbarSectionHidden\")\n\t\t\t\tcss.remove(this.sessionLineColor.domNode, \"hidden\");\n\t\t\t\tcss.remove(this.sessionTaskBtn.domNode, \"hidden\");\n\t\t\t\tcss.add(this.sessionShowDiv, 'MatcToolbarSectionHidden')\n\t\t\t\t// css.remove(this.sessionTaskLineColor.domNode, \"hidden\");\n\t\t\t\tcss.remove(this.sessionLineColor.domNode, \"hidden\");\n\t\t\t\tcss.remove(this.sessionOutlierDiv, \"MatcToolbarSectionHidden\")\n\t\t\t\tcss.remove(this.sessionOutlierCheckbox.domNode, \"hidden\");\n\t\t\t}\n\t\t},\n\n\n\t\t/*****************************************************************************************************\n\t\t * drop off\n\t\t ****************************************************************************************************/\n\t\tselectDropOffTask () {\n\t\t\tthis.showDropOffProperties()\n\t\t},\n\n\t\tshowDropOffProperties(){\n\t\t\tthis.logger.log(0,\"showDropOffProperties\", \"entry\");\n\n\n\t\t\tlet taskNumber = this.dropOffTaskBtn.getValue()\n\t\t\tlet task = this.testSettings.tasks[taskNumber];\n\t\t\tif (task) {\n\t\t\t\tthis.setAnalyticMode(\"DropOff\", {\n\t\t\t\t\ttime: this.dropOffTimeCheckBox.getValue(),\n\t\t\t\t\ttask: task,\n\t\t\t\t\tcolor: '#ccc'\n\t\t\t\t});\n\t\t\t\tcss.remove(this.dropOffConfigDiv, \"MatcToolbarSectionHidden\")\n\t\t\t\tcss.remove(this.dropOffOptionsDiv, \"MatcToolbarSectionHidden\");\n\t\t\t\tcss.remove(this.dropOffChartDivCntr, \"MatcToolbarSectionHidden\")\n\t\t\t\t//css.remove(this.dropOffFunnelDivCntr, \"MatcToolbarSectionHidden\")\n\t\t\t\tthis.showDropOffChart(task)\n\t\t\t\tthis.showProperties();\n\t\t\t} else {\n\t\t\t\tthis.setAnalyticMode(\"DropOff\", {\n\t\t\t\t\ttime: this.dropOffTimeCheckBox.getValue(),\n\t\t\t\t\ttask: null,\n\t\t\t\t\tcolor: '#ccc'\n\t\t\t\t});\n\t\t\t\tcss.remove(this.dropOffConfigDiv, \"MatcToolbarSectionHidden\")\n\t\t\t\tcss.remove(this.dropOffOptionsDiv, \"MatcToolbarSectionHidden\")\n\t\t\t\tthis.showProperties();\n\t\t\t}\n\t\t},\n\n\t\tshowDropOffChart (task) {\n\t\t\tvar df = new DataFrame(this.events);\n\t\t\tvar analytics  = new Analytics();\n\t\t\tlet funnel = analytics.getFunnelSummary(df, task, this.annotation);\n\n\t\t\tlet lastStep = funnel[funnel.length-1]\n\n\t\t\tthis.dropoffTaskSuccess.setPs(lastStep.p)\n\t\t\tthis.dropoffTaskSuccess.setValue(Math.round(lastStep.p * 100) + '%')\n\n\t\t\tthis.dropOffTaskDuration.innerText = Math.round(lastStep.durationMean / 100) / 10 + 's'\n\t\t\tthis.dropOffTaskDurationLabel.innerText = '+/-' + Math.round(lastStep.durationStd / 100) / 10 + 's'\n\n\t\t\tthis.dropOffInteractions.innerText = Math.round(lastStep.interactionsMean)\n\t\t\tthis.dropOffInteractionsLabel.innerText = '+/-' + Math.round(lastStep.interactionsStd)\n\t\t},\n\n\t\tshowDropOffFunnel (funnel) {\n\t\t\tthis.dropOffChartDiv.innerHTML = ''\n\t\t\tlet db = new DomBuilder()\n\t\t\tlet cntr = db.div().build()\n\t\t\tfunnel.forEach((step, i) => {\n\t\t\t\tif(step.event){\n\t\t\t\t\tdb.span('MatcDashLabel', this.getNiceEventLabel(step.event, i)).build(cntr)\n\t\t\t\t\tlet bar = db.div('MatcToolbarDropOffChartBar', Math.round(step.p * 100) + '%').build(cntr)\n\t\t\t\t\tbar.style.background = this.greenToRed(step.p)\n\t\t\t\t\tbar.style.width = step. p * 100 + '%'\n\t\t\t\t}\n\t\t\t})\n\t\t\tthis.dropOffChartDiv.appendChild(cntr)\n\t\t},\n\n\t\tgetNiceEventLabel (event, i){\n\t\t\tif (this.model){\n\t\t\t\tvar row = [];\n\t\t\t\tif(event.widget){\n\t\t\t\t\tif(event.type ==\"WidgetGesture\" && event.gesture){\n\t\t\t\t\t\tlet gesture = event.gesture;\n\t\t\t\t\t\trow = [this.getGestureLabel(gesture.type),  this.getWidgetName(event.widget)];\n\t\t\t\t\t} else if(event.state && (event.type == \"WidgetClick\" || event.type == \"WidgetChange\")  ){\n\t\t\t\t\t\treturn this.getEventStateLabel(event.state) + ` -  ` + this.getWidgetName(event.widget) + ' @ ' + this.getScreenName(event.screen);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this.getEventLabel(event.type) + ` -  ` + this.getWidgetName(event.widget) + ' @ ' + this.getScreenName(event.screen);\n\t\t\t\t\t}\n\t\t\t\t} else if(event.type ==\"ScreenGesture\" && event.gesture){\n\t\t\t\t\tlet gesture = event.gesture;\n\t\t\t\t\trow = [\"Screen \" + this.getGestureLabel(gesture.type), this.getScreenName(event.screen)];\n\t\t\t\t}else {\n\t\t\t\t\trow = [this.getEventLabel(event.type), this.getScreenName(event.screen)];\n\t\t\t\t}\n\t\t\t\treturn row[0] + \" - \" +row[1]+ \"\";\n\t\t\t}\n\t\t\treturn this.getNLS(\"dash.perf.dropoff.step\") + i;\n\t\t},\n\n\n\t\tshowHeatMapProperties(){\n\t\t\tthis.showProperties();\n\n\t\t\tcss.remove(this.heatmapDiv,\"MatcToolbarSectionHidden\" );\n\n\t\t\tthis.heatmapClickList.setValue(this.analyticHeatMapClicks);\n\t\t},\n\n\n\n\t\t/*****************************************************************************************************\n\t\t * show properties section and make sure the scroll bar is moved too!\n\t\t ****************************************************************************************************/\n\n\t\tshowProperties(){\n\t\t\tcss.remove(this.propertiesCntr, \"MatcToolbarSectionHidden\");\n\t\t\tif(this.canvas){\n\t\t\t\tcss.add(this.canvas.scrollRight, \"MatcCanvasScrollBarRightOpen\");\n\t\t\t}\n\t\t},\n\n\t\thideProperties(){\n\t\t\tif (this.analyticMode == \"UserJourney\"){\n\t\t\t\tthis.hideAllSections();\n\t\t\t\tthis.showSessionProperties();\n\t\t\t} else if (this.analyticMode == \"HeatmapClick\"){\n\t\t\t\tthis.hideAllSections();\n\t\t\t\tthis.showHeatMapProperties();\n\t\t\t} else {\n\t\t\t\tcss.add(this.propertiesCntr, \"MatcToolbarSectionHidden\");\n\t\t\t\tif(this.canvas){\n\t\t\t\t\tcss.remove(this.canvas.scrollRight, \"MatcCanvasScrollBarRightOpen\");\n\t\t\t\t}\n\t\t\t\tthis.hideAllSections();\n\t\t\t}\n\t\t},\n\n\n\t\thideAllSections(){\n\t\t\tthis.logger.log(3,\"hideAllSections\", \"entry\");\n\t\t\tfor(var i=0; i< this.sections.length; i++){\n\t\t\t\tvar section = this.sections[i];\n\t\t\t\tcss.add(section, \"MatcToolbarSectionHidden\");\n\t\t\t}\n\t\t},\n\n\n\t\t/**********************************************************************\n\t\t * Canvas Delegates\n\t\t **********************************************************************/\n\n\n\n\t\t/**********************************************************************\n\t\t * DI stuff\n\t\t **********************************************************************/\n\n\n\t\tsetController(c){\n\t\t\tthis.logger.log(3,\"setController\", \"entry\");\n\t\t\tthis.controller = c;\n\t\t},\n\n\t\tsetCanvas(c){\n\t\t\tthis.logger.log(3,\"setCanvas\", \"entry\");\n\t\t\tthis.canvas = c;\n\n\t\t},\n\n\t\tsetModelFactory(f){\n\t\t\tthis.logger.log(3,\"setModelFactory\", \"entry\");\n\t\t\tthis.factory = f;\n\t\t},\n\n\t\tsetModel(m){\n\t\t\tthis.model = this.createInheritedModel(m);\n\t\t\tthis.modelName = m.name\n\t\t\tthis.renderToolbar();\n\t\t\tthis.render();\n\t\t},\n\n\t\tsetAnnotation(a){\n\t\t\tthis.logger.log(-1,\"setAnnotation\", \"enter > # \" );\n\t\t\tthis.annotation = a;\n\t\t},\n\n\t\tsetTest(t){\n\t\t\tthis.logger.log(2,\"setTest\", \"enter > # \" );\n\t\t\tthis.testSettings = t;\n\t\t},\n\n\t\tsetEvents(events){\n\t\t\tthis.logger.log(2,\"setEvents\", \"enter > # \" + events.length);\n\t\t\tthis.events = events;\n\t\t},\n\n\t\tsetMode(mode){\n\t\t\tthis.logger.log(2,\"setMode\", \"entry > '\" + mode + \"'\");\n\t\t\tthis.mode = mode;\n\t\t\tthis.onModeChange();\n\t\t},\n\n\n\t\tonModeChange () {\n\n\t\t},\n\n\n\t\t/********************************************************\n\t\t * Helper\n\t\t ********************************************************/\n\n\t\tsetSelectedViewButton(){\n\t\t},\n\n\t\tcreateRing(lbl, help, distCallBack){\n\n\t\t\tvar bgColor = \"#cecece\";\n\t\t\tvar settings = this.canvas.getSettings();\n\t\t\tif(settings.canvasTheme == \"MatcDark\"){\n\t\t\t\tbgColor = \"#777\";\n\t\t\t}\n\t\t\tvar ring = this.$new(Ring, {size:100, width:5, backgroundColor: bgColor, color:\"#0099cc\", color2:\"#83b600\", color3:\"#ffa713\"});\n\t\t\tring.setDomSize(120,120);\n\t\t\tring.setLabel(lbl);\n\n\t\t\tif(distCallBack){\n\t\t\t\tring.setAction(\"mdi mdi-chart-bar\");\n\t\t\t\tthis.tempOwn(ring.on(\"action\", lang.hitch(this, distCallBack)));\n\t\t\t}\n\n\t\t\tif(help){\n\t\t\t\tring.setHelp(true);\n\t\t\t\tthis.tempOwn(ring.on(\"help\", lang.hitch(this, \"showHelpDialog\", help)));\n\t\t\t}\n\n\t\t\tcss.add(ring.domNode, \"MatcMarginTop\");\n\t\t\treturn ring;\n\t\t},\n\n\t\tcreateToolBarItem(label, callback, icon, parent){\n\t\t\tvar a = document.createElement(\"div\");\n\t\t\tcss.add(a,\"MatcToolbarItem MatcToolbarPrimaryItem\");\n\n\t\t\tif(icon){\n\t\t\t\tvar i = document.createElement(\"span\");\n\t\t\t\tcss.add(i,icon);\n\t\t\t\ta.appendChild(i);\n\t\t\t}\n\n\t\t\t// var lbl = document.createElement(\"label\");\n\t\t\t// css.add(lbl, \"MatcToolbarLabel\");\n\t\t\t// lbl.innerHTML =label;\n\t\t\t// a.appendChild(lbl);\n\n\n\t\t\tif(callback){\n\t\t\t\tthis.tempOwn(on(a, touch.press, lang.hitch(this, callback)));\n\t\t\t}\n\t\t\tif(!parent){\n\t\t\t\tthis.properties.appendChild(a);\n\t\t\t} else {\n\t\t\t\tparent.appendChild(a);\n\t\t\t}\n\n\t\t\treturn a;\n\t\t},\n\n\n\t\tcreateInput(content,placeholder){\n\n\t\t\tvar div = document.createElement(\"div\");\n\t\t\tcss.add(div, \"MatcToolbarItem\");\n\t\t\tcontent.appendChild(div);\n\n\t\t\tlet input = document.createElement(\"input\");\n\t\t\tinput.disabled = true;\n\t\t\tcss.add(input, \"MatcIgnoreOnKeyPress MatcToobarInput  MatcToobarInlineEditDisabled\");\n\t\t\tdiv.appendChild(input);\n\n\t\t\tif(placeholder){\n\t\t\t\tinput.placeholder = placeholder;\n\t\t\t}\n\t\t\treturn input;\n\t\t},\n\n\t\tcreateContent(parent){\n\t\t\tvar content = document.createElement(\"div\");\n\t\t\tcss.add(content, \"MatcToolbarSectionContent\");\n\t\t\tparent.appendChild(content);\n\t\t\treturn content;\n\t\t},\n\n\t\tcreateSection(lbl, parentNode, canBeHidden = true){\n\n\t\t\tconst parent = document.createElement(\"div\");\n\t\t\tcss.add(parent, \"MatcToolbarSection\");\n\n\t\t\tconst header = this.createSectionHeader( parent, lbl);\n\n\t\t\t/**\n\t\t\t * store the value somehow in a cookie? and use it during restore??\n\t\t\t */\n\t\t\tthis.own(on(header, touch.press, () => {\n\t\t\t\tcss.toggle(parent, \"MatcToolbarSectionCollabsed\");\n\t\t\t\treturn false;\n\t\t\t}));\n\n\t\t\tif (canBeHidden) {\n\t\t\t\tthis.sections.push(parent);\n\t\t\t}\n\t\t\tparentNode.appendChild(parent);\n\t\t\treturn parent;\n\t\t},\n\n\t\tcreateSectionHeader(parent, lbl, hasTemplateMarker){\n\t\t\tvar div = document.createElement(\"div\");\n\t\t\tcss.add(div,\"MatcToolbarSectionLabel\");\n\t\t\tparent.appendChild(div);\n\n\t\t\tdiv.innerHTML=lbl;\n\n\t\t\tif(hasTemplateMarker){\n\t\t\t\tvar span = document.createElement(\"span\");\n\t\t\t\tcss.add(span, \"MatcToolbarSectionMarker\");\n\t\t\t\tspan.innerHTML=\" *\";\n\t\t\t\tdiv.appendChild(span);\n\t\t\t}\n\n\t\t\tvar chev = document.createElement(\"span\");\n\t\t\tcss.add(chev, \"MatcToolbarSectionChevron mdi mdi-chevron-down\");\n\t\t\tdiv.appendChild(chev);\n\n\t\t\treturn div;\n\t\t},\n\n\n\n\t\tcreateBigNumber(db, cntr, label, help){\n\t\t\tvar numberCntr = db.div(\"MatcToolBarNumberCntr MatcMarginTop\").build(cntr);\n\t\t\tlet l = db.div(\"MatcDashLabel\", label).build(numberCntr);\n\t\t\tvar main =  db.div(\"MatcToolbarBigLabel\").build(numberCntr);\n\t\t\tvar little =  db.div(\"MatcToolbarDetailLabel\").build(numberCntr);\n\t\t\tif(help){\n\t\t\t\tvar node =  db.span(\"mdi mdi-help-circle MatcHelpIcon\").build(l);\n\t\t\t\tthis.tempOwn(on(node, touch.press, lang.hitch(this, \"showHelpDialog\", help)));\n\t\t\t}\n\n\t\t\treturn [main, little];\n\t\t},\n\n\n\t\t/********************************************************\n\t\t * Main menu handlers\n\t\t ********************************************************/\n\n\t\tonExit(){\n\t\t\tthis.logger.log(0,\"onExit\", \"entry\", this.isPublic);\n\t\t\tif(this.isPublic){\n\t\t\t\thash(\"#/examples/\"+ this.model.id + \"/design.html\");\n\t\t\t} else {\n\t\t\t\thash(\"#/apps/\"+ this.model.id + \"/design.html\");\n\t\t\t}\n\t\t},\n\n\t\tonShare(){\n\t\t\tthis.logger.log(0,\"onShare\", \"entry\");\n\t\t},\n\n\t\t/********************************************************\n\t\t * Selection handlers!\n\t\t ********************************************************/\n\n\t\tonWidgetSelected(widget){\n\t\t\tthis.logger.log(2,\"onWidgetSelected\", \"entry\");\n\n\t\t\t/**\n\t\t\t * We might want to blur some stuff\n\t\t\t */\n\t\t\tif(this._selectedWidget && this._selectedWidget.id != widget.id){\n\t\t\t\tthis.logger.log(3,\"onWidgetSelected\", \"exit > no new selection!\");\n\t\t\t\tthis.blurWidgetProperties();\n\t\t\t}\n\n\n\t\t\tthis.cleanUp();\n\n\n\t\t\tthis._selection = \"widget\";\n\t\t\tthis._selectedWidget = widget;\n\t\t\tthis.showWidgetProperties(widget);\n\n\n\t\t\tthis.logger.log(3,\"onWidgetSelected\", \"exit\");\n\t\t},\n\n\n\t\tonScreenSelected(screen){\n\t\t\tthis.logger.log(-1, \"onScreenSelected\", \"entry\", this._selectedScreen);\n\n\t\t\t/**\n\t\t\t * We don not want to rerender on scroll\n\t\t\t */\n\t\t\tif(this._selectedScreen && this._selectedScreen.id == screen.id){\n\t\t\t\tthis.logger.log(3,\"onScreenSelected\", \"exit > no new selection!\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.cleanUp();\n\t\t\tthis._selection = \"screen\";\n\t\t\tthis._selectedScreen = screen;\n\t\t\tthis.showScreenProperties(screen);\n\n\n\t\t\tthis.logger.log(4,\"onScreenSelected\", \"exit\");\n\t\t},\n\n\n\n\n\t\tonLineSelected(line){\n\t\t\tthis.cleanUp();\n\t\t\tthis._selection = \"line\";\n\t\t\tthis._selectedLine = line;\n\t\t},\n\n\n\n\t\tonMultiSelect(selection){\n\t\t\tthis.cleanUp();\n\n\t\t\tthis._selection = \"multi\";\n\t\t\tthis._selectedMulti = selection;\n\t\t},\n\n\t\tonGroupSelect(group){\n\t\t\tthis.cleanUp();\n\t\t\tthis._selection = \"group\";\n\t\t\tthis._selectedGroup = group;\n\t\t\tthis.showGroupProperties(group);\n\t\t},\n\n\n\n\t\tonCanvasSelected(){\n\t\t\tthis.cleanUp();\n\t\t\tthis.hideProperties();\n\t\t},\n\n\n\t\t/**\n\t\t * method which will update all properties. method is called from controller!\n\t\t */\n\t\tupdatePropertiesView(){\n\n\t\t\tif(this._selectedWidget ){\n\t\t\t\tthis.onWidgetSelected(this._selectedWidget );\n\t\t\t}\n\t\t},\n\n\n\n\t\t/********************************************************\n\t\t * Player\n\t\t ********************************************************/\n\n\t\tshowSession(session,e){\n\t\t\t//console.debug(\"showSession\", session.session, this.events.length);\n\n\t\t\tconst sessionID = session.session;\n\t\t\tconst dialog = new Dialog();\n\t\t\n\t\t\tconst db = new DomBuilder();\n\n\t\t\tconst div = db.div(\"MatcDialog MatcPlayerDialog \").build();\n\t\t\tconst cntr = db.div(\"\").build(div);\n\n\t\t\tdialog.onOpen(() => {\n\t\t\t\tif (this.isPublic){\n\t\t\t\t\tPromise.all([\n\t\t\t\t\t\tthis.modelService.findPublicTagAnnotations(this.model.id),\n\t\t\t\t\t\tthis.modelService.findPublicMouseBySession(this.model.id, sessionID)\n\t\t\t\t\t]).then(values => {\n\t\t\t\t\t\tthis._showSession(sessionID, cntr, dialog, values);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tPromise.all([\n\t\t\t\t\t\tthis.modelService.findTagAnnotations(this.model.id),\n\t\t\t\t\t\tthis.modelService.findMouseBySession(this.model.id, sessionID)\n\t\t\t\t\t]).then(values => {\n\t\t\t\t\t\tthis._showSession(sessionID, cntr, dialog, values);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tdialog.popup(div, e.target);\n\t\t},\n\n\t\t_showSession(sessionID, cntr, dialog, data) {\n\n\t\t\ttry {\n\t\t\t\tconst mouse = data[1];\n\n\t\t\t\tconst df = new DataFrame(this.events);\n\t\t\t\tdf.sortBy(\"time\");\n\t\t\t\tconst sessionGroup = df.groupBy(\"session\");\n\t\t\t\tconst events = sessionGroup.get(sessionID);\n\n\t\t\t\tconst player = this.$new(VideoPlayer);\n\t\t\t\tplayer.setDialog(dialog)\n\t\t\t\tplayer.placeAt(cntr);\n\t\t\t\tplayer.setModel(this.model);\n\t\t\t\tplayer.setTestSettings(this.testSettings)\n\t\t\t\tplayer.setMouse(mouse);\n\t\t\t\tplayer.setMouse(mouse);\n\t\t\t\tplayer.setSession(events, sessionID);\n\t\t\n\n\t\t\t\tdialog.own(on(dialog, \"close\", function () {\n\t\t\t\t\tplayer.destroy();\n\t\t\t\t}));\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e);\n\t\t\t}\n\t\t},\n\n\t\t_getSessionAnnotation(annotations, appID){\n\n\t\t\tif(annotations.length > 1){\n\t\t\t\t/**\n\t\t\t\t * This should not happen, but we have seen it happeing. We delete this now...\n\t\t\t\t */\n\t\t\t\tconsole.warn(\"Too many annotations!\");\n\t\t\t\tfor(var i=1; i< annotations.length; i++){\n\t\t\t\t\tvar a = annotations[i];\n\t\t\t\t\tthis._doDelete(\"rest/annotations/apps/\"+ appID + \"/\" + a.id + \".json\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(annotations.length >= 1){\n\t\t\t\treturn  annotations[0];\n\t\t\t}else {\n\t\t\t\t//console.debug(\"Create Tag annotation...\");\n\t\t\t\treturn {\n\t\t\t\t\tappID : appID,\n\t\t\t\t\ttype : \"tags\",\n\t\t\t\t\treference : \"\",\n\t\t\t\t\tsessions :{}\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\n\t\t/********************************************************\n\t\t * Show Settings\n\t\t ********************************************************/\n\n\n\t\tonShowSettings(e){\n\n\t\t\tvar db = new DomBuilder();\n\n\t\t\tdb = new DomBuilder();\n\t\t\tvar popup = db.div(\"MatcDialog MatcHeaderDialog MatcPadding\").build();\n\n\t\t\tvar cntr = db.div(\"\").build(popup);\n\n\t\t\tvar settings = this.canvas.getSettings();\n\n\n\t\t\t/**\n\t\t\t * Themes\n\t\t\t */\n\t\t\tdb.label(\"\",\"Theme :\").build(cntr);\n\t\t\tvar themeList = this.$new(RadioBoxList);\n\t\t\tthemeList.setOptions([\n\t\t\t\t{value:\"MatcDark\", label:\"Dark\"},\n\t\t\t\t{value:\"MatcLight\", label: \"Light\"}\n\t\t\t]);\n\t\t\tthemeList.setValue(settings.canvasTheme);\n\t\t\tthemeList.placeAt(cntr);\n\n\n\n\t\t\t/**\n\t\t\t * Mouse Wheel\n\t\t\t */\n\t\t\tdb.label(\"MatcMarginTop\",\"Mouse Wheel / Touchpad Scroll :\").build(cntr);\n\t\t\tvar mouseWheelList = this.$new(RadioBoxList);\n\t\t\tmouseWheelList.setOptions([\n\t\t\t\t{value:\"scroll\", label: \"Scroll Canvas\"},\n\t\t\t\t{value:\"zoom\", label:\"Zoom Canvas\"}\n\t\t\t]);\n\t\t\tmouseWheelList.setValue(settings.mouseWheelMode);\n\t\t\tmouseWheelList.placeAt(cntr);\n\n\n\t\t\tvar bar = db.div(\"MatcButtonBar MatcMarginTopXL\").build(popup);\n\t\t\tvar save = db.a(\"MatcButton MatcButtonPrimary\", \"Save\").build(bar);\n\t\t\tvar cancel = db.a(\" MatcLinkButton \", \"Cancel\").build(bar);\n\n\n\n\t\t\tvar dialog = new Dialog();\n\t\t\tdialog.own(on(cancel, touch.press, lang.hitch(dialog, \"close\")));\n\t\t\tdialog.own(on(save, touch.press, lang.hitch(this, \"onSaveSettings\", dialog, themeList, mouseWheelList)));\n\n\t\t\tdialog.popup(popup, e.target);\n\n\t\t\tthis.canvas.enableMouseZoom(false);\n\t\t\tthis.canvas.setState(\"simulate\");\n\n\t\t\tthis.logger.log(0,\"onShowSettings\", \"exit > \");\n\t\t},\n\n\t\tonSaveSettings(dialog, themeList,mouseWheelList){\n\t\t\tvar settings = {\n\t\t\t\tcanvasTheme: themeList.getValue(),\n\t\t\t\tmouseWheelMode : mouseWheelList.getValue()\n\t\t\t};\n\n\t\t\tthis.canvas.setSettings(settings);\n\t\t\tthis.canvas.enableMouseZoom(true);\n\t\t\tdialog.close();\n\t\t},\n\n\n\t\t/********************************************************\n\t\t * SignUp\n\t\t ********************************************************/\n\n\n\t\tshowSignUpDialog(e){\n\n\t\t\tvar d = new Dialog();\n\n\t\t\tvar db = new DomBuilder();\n\n\t\t\tvar div = db.div(\"MatcDialog \").build();\n\n\n\t\t\tthis._createSignUpForm(d, div);\n\n\t\t\td.popup(div, e.target);\n\t\t},\n\n\n\t\t_createSignUpForm(d, div){\n\t\t\tlet f = this.$new(Form);\n\t\t\tf.render([\n\t\t\t\t{\n\t\t\t\t\tlabel: \"Email\",\n\t\t\t\t\tname:\"email\",\n\t\t\t\t\ttype:\"text\",\n\t\t\t\t\trequired:\"true\",\n\t\t\t\t\tplaceholder:\"Your email\",\n\t\t\t\t\tcss:\"input-lg MatcIgnoreOnKeyPress\",\n\t\t\t\t\terror:\"We need your email.\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: \"Password\",\n\t\t\t\t\tname:\"password\",\n\t\t\t\t\ttype:\"password\",\n\t\t\t\t\tmin:6,\n\t\t\t\t\tplaceholder:\"Your password\",\n\t\t\t\t\tcss:\"input-lg MatcIgnoreOnKeyPress\",\n\t\t\t\t\terror:\"The password should have at least six characters.\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'I have read the <a href=\"#/termsofservice.html\" target=\"_blank\">terms of service</a>',\n\t\t\t\t\tname:\"tos\",\n\t\t\t\t\ttype:\"check\",\n\t\t\t\t\trequired:\"true\",\n\t\t\t\t\tcss:\"MatcFormCheckBox MatcIgnoreOnKeyPress\",\n\t\t\t\t\terror:\"You must accept the terms of service!\"\n\t\t\t\t}\n\t\t\t], [\n\t\t\t\t{label : \"Cancel\", css:\"MatcLinkButton\", click: lang.hitch(d, \"close\")},\n\t\t\t\t{label : \"Create Free Account\", css:\"MatcButton MatchButtonGreen\", click: lang.hitch(this, \"_signUpAndNew\",d,f)}\n\t\t\t]);\n\n\t\t\tf.placeAt(div);\n\t\t\tf.startup();\n\n\t\t\treturn f;\n\t\t},\n\n\t\t_signUpAndNew(dialog, form, data){\n\n\t\t\tvar valid = form.validateForm(null, true);\n\n\t\t\tif(valid){\n\n\t\t\t\tresult = this._doPost(\"rest/user\", data);\n\n\t\t\t\tif(result.type==\"error\"){\n\t\t\t\t\tif(result.errors.indexOf(\"user.email.not.unique\") >=0){\n\t\t\t\t\t\tform.showError(\"The email is already taken! Please enter another one!\", \"email\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tform.showError(\"Something went wrong! Please try again!\", \"\");\n\t\t\t\t\t}\n\n\t\t\t\t\tdialog.shake();\n\t\t\t\t} else {\n\t\t\t\t\tdialog.close();\n\n\t\t\t\t\tvar result = this._doPost(\"rest/login/\", data);\n\t\t\t\t\tif(result.type!=\"error\"){\n\n\t\t\t\t\t\twindow.location.href = \"/my-account.html\";\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(\"_signUpAndSave() > Could not sign in user\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdialog.shake();\n\t\t\t}\n\t\t},\n\n\t\t/********************************************************\n\t\t * CleanUp\n\t\t ********************************************************/\n\n\n\t\tcleanUp(){\n\t\t\tthis.hideAllSections();\n\t\t\tthis.unselect()\n\t\t},\n\n\t\tunselect() {\n\t\t\tthis._selectedWidget = null;\n\t\t\tthis._selectedLine  = null;\n\t\t\tthis._selectedScreen = null;\n\t\t\tthis._selectedMulti = null;\n\t\t\tthis._selectedGroup = null;\n\t\t\tthis._selection = null;\n\t\t},\n\n\t\tblurWidgetProperties(){\n\n\t\t}\n    },\n    mounted () {\n\t\tthis.db = new DomBuilder();\n    }\n}\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticToolbar.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticToolbar.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./AnalyticToolbar.vue?vue&type=template&id=14a2a1b6&\"\nimport script from \"./AnalyticToolbar.vue?vue&type=script&lang=js&\"\nexport * from \"./AnalyticToolbar.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcCanvas MatcAnalyticCanvas\"},[_c('div',{staticClass:\"MatcCanvasFrame\",attrs:{\"data-dojo-attach-point\":\"frame\"}},[_c('div',{staticClass:\"MatcCanvasContainer MatcCanvasZoomable\",attrs:{\"data-dojo-attach-point\":\"container\"}},[_c('div',{staticClass:\"MatcCanvasContainer\",attrs:{\"data-dojo-attach-point\":\"zoomContainer\"}},[_c('div',{staticClass:\"MatcCanvasLayer\",attrs:{\"data-dojo-attach-point\":\"screenContainer\"}}),_c('div',{staticClass:\"MatcCanvasLayer\",attrs:{\"data-dojo-attach-point\":\"widgetContainer\"}}),_c('div',{staticClass:\"MatcCanvasLayer MatcCanvasSVGLayer\",attrs:{\"data-dojo-attach-point\":\"svgContainer\"}})]),_c('div',{staticClass:\"MatcDnDLayer\",attrs:{\"data-dojo-attach-point\":\"dndContainer\"}})])]),_c('div',{staticClass:\"MatcCanvasScrollBar MatcCanvasScrollBarRight\",attrs:{\"data-dojo-attach-point\":\"scrollRight\"}},[_c('div',{staticClass:\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrRight\",attrs:{\"data-dojo-attach-point\":\"scrollRightCntr\"}},[_c('div',{staticClass:\"MatchCanvasScrollHandle\",attrs:{\"data-dojo-attach-point\":\"scrollRightHandler\"}})])]),_c('div',{staticClass:\"MatcCanvasScrollBar MatcCanvasScrollBarBottom\",attrs:{\"data-dojo-attach-point\":\"scrollBottom\"}},[_c('div',{staticClass:\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrBottom\",attrs:{\"data-dojo-attach-point\":\"scrollBottomCntr\"}},[_c('div',{staticClass:\"MatchCanvasScrollHandle\",attrs:{\"data-dojo-attach-point\":\"scrollBottomHandler\"}})])]),_c('div',{staticClass:\"MatcMessage\",attrs:{\"data-dojo-attach-point\":\"message\"}})])}]\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcCanvas MatcAnalyticCanvas\"})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n<template>\n    <div class=\"MatcCanvas MatcAnalyticCanvas\">\n    </div>\n  </template>\n  \n\n  <script>\n \n  import css from \"dojo/css\";\n  import on from \"dojo/on\";\n  import lang from \"dojo/_base/lang\";\n  import DomBuilder from \"common/DomBuilder\"; \n  \n  export default {\n    name: \"UserJourney\",\n    mixins: [],\n    data: function () {\n      return {\n      };\n    },\n    components: {},\n    methods: {\n\n      highlightSession (sessionID = false) {\n        if (!this.analyticParams.tree) {\n          this.highlightAnalyticLine(sessionID)\n        }\n      },\n\n\n      highlightAnalyticLine(sessionID) {\n        this.logger.log(1, \"highlightAnalyticLine\", \"entry > \", sessionID);\n          if (this.analyticLines) {\n            for (let id in this.analyticLines) {\n              let line = this.analyticLines[id]\n              if (!sessionID || sessionID === id) {\n                // somebug when tasks are selected\n                line.style('opacity', 1)\n              } else {\n                line.style('opacity', 0)\n              }\n\n              if (this.analyticCircles[id]) {\n                let divs = this.analyticCircles[id]             \n                divs.forEach(div => {\n                  if (!sessionID || sessionID === id) {\n                    div.style.opacity = 1                  \n                  } else {\n                    div.style.opacity = 0\n                  }\n                })   \n              }\n            }\n          }\n      },\n    \n  \n      _render_global_UserJourney(screenEvents, screen, ctx, div) {\n        this.logger.log(1, \"_render_global_UserJourney\", \"entry > \");\n        this.setBW(true);\n        this.cleanUpAnalytics()\n        if (!this.analyticParams.tree) {\n          this._renderUserSingleLines(screenEvents, screen, ctx, div);\n        } else {\n          this._renderUserTree(screenEvents, screen, ctx, div);\n        }\n      },\n  \n      _renderUserTree() {\n        let sessions = this.getUserJourney();\n        let db = new DomBuilder();\n        let time = this.analyticParams.time\n        \n        let selectedSessions = this.analyticParams.sessions;\n        let graph = {};\n        let maxCount = 0;\n        let maxMeanDuration = 0\n      \n        for (let sessionID in selectedSessions) {\n          if (selectedSessions[sessionID] === true) {\n            let session = sessions[sessionID];\n            if (session) {\n              this._getSessionGraph(session, graph, time);\n              maxCount++;\n            } else {\n              console.debug(\"_renderUserTree() > No session for \", sessionID);\n            }\n          }\n        }\n  \n        /**\n         * We might have the situation that the users creates loopes\n         * in one session. This will cause the count to be bigger than the\n         * session count (maxCount). This messes up the graph. To make it\n         * nice again, we update maxCount\n         */\n    \n        for (let id in graph) {\n          const l = graph[id]\n          if (l.count > maxCount) {\n            console.warn(\"_renderUserTree() > Update maxcount, because l.count bigger than max count\", )\n            maxCount = l.count\n          }\n          const meanDuration = l.duration / l.count\n          maxMeanDuration = Math.max(meanDuration, maxMeanDuration)\n        }\n  \n        const divs = {};\n        for (let id in graph) {\n          const l = graph[id];\n          const line = [];\n          line.push({\n            x: l.from.x,\n            y: l.from.y,\n            d: \"right\",\n          });\n          line.push({\n            x: l.to.x,\n            y: l.to.y,\n            d: \"right\",\n          });\n  \n          const meanDuration = l.duration / l.count\n          const p = time ?\n              Math.min(1, meanDuration / maxMeanDuration):\n              Math.min(1, l.count / maxCount)\n  \n          const width = Math.min(15, Math.max(1, Math.round(p * 25))) + 1;\n          const color = this.mixColor(Math.min(1, p));\n          const toID = l.to.x + \",\" + l.to.y;\n          const fromID = l.from.x + \",\" + l.from.y;\n          \n          if (!divs[toID]) {\n            divs[toID] = this._renderTreeEvent(l.to.x, l.to.y, width, color, db);\n          }\n        \n          if (!divs[fromID]) {\n            divs[fromID] = this._renderTreeEvent(l.from.x,l.from.y,width,color,db);\n          }\n  \n          this.drawAnalyticLine(id, line, color, width, this.taskLineOpacity);\n        }\n      },\n  \n  \n  \n      _renderTreeEvent(x, y, width, color, db) {\n        const cntr = db\n          .div(\"MatcAnalyticCanvasEventCntr\")\n          .build(this.widgetContainer);\n\n        cntr.style.left = Math.round(x) + \"px\";\n        cntr.style.top = Math.round(y) + \"px\";\n  \n        const div = db\n          .div(\"MatcAnalyticCanvasEvent MatcAnalyticCanvasEvent\")\n          .build(cntr);\n  \n        const r = Math.round(width * 2);\n        div.style.width = r + \"px\";\n        div.style.height = r + \"px\";\n        div.style.top = -1 * Math.round(r / 2) + \"px\";\n        div.style.left = -1 * Math.round(r / 2) + \"px\";\n        div.style.background = color;\n      },\n  \n      _renderUserSingleLines() {\n        const sessions = this.getUserJourney();\n        const outlierScores = this.getOutlierScores()\n\n        const taskPerformance = this.getTaskPerformance();\n        const db = new DomBuilder();\n  \n        let task = null;\n        if (this.analyticParams.task !== false && this.analyticParams.task >= 0) {\n          task = this.testSettings.tasks[this.analyticParams.task];\n        }\n\n        const selectedSessions = this.analyticParams.sessions;\n        for (let sessionID in selectedSessions) {\n          if (selectedSessions[sessionID] === true) {\n            const session = sessions[sessionID];\n            const matches = taskPerformance[sessionID];\n            const outlierScore = outlierScores[sessionID]\n            if (session) {\n              this._renderUserGraph(sessionID, session, db, task, matches, outlierScore);\n            } else {\n              console.debug( \"_render_global_UserJourney() > No session for \", sessionID   );\n            }\n          }\n        }\n\n        if (this.analyticParams.outlier) {\n          this.showHint(`Found ${Object.values(outlierScores).filter(v => v ===1).length} outliers`)\n        }\n      },\n  \n      \n  \n      _renderUserGraph(sessionID, session, db, task, matches, isOutlier) {\n    \n        const sessionEvents = session.data;\n        const line = [];\n        const sessionLength = sessionEvents.length\n        const matchLines = [];\n  \n        let e = null;\n        let lastDurationEvent\n        let duration = 0\n        let maxDuration = 0\n        let match;\n        if (task && matches) {\n          match = matches[task.id];\n        }\n  \n        // compute line\n        for (let i = 0; i < sessionLength; i++) {\n          e = sessionEvents[i];\n          if (lastDurationEvent) {\n            duration = e.time - lastDurationEvent.time\n            maxDuration = Math.max(duration, maxDuration)\n          }\n          \n          const screenID = this.getEventScreenId(e);\n          const sourceScreen = this.sourceModel.screens[screenID];\n                  const zoomedScreen = this.model.screens[screenID];\n          if (sourceScreen && zoomedScreen) {\n            if (e.type == \"SessionStart\") {\n              const x = sourceScreen.x - Math.max(10, Math.round(30 * this.zoom));\n              const y = sourceScreen.y + Math.max(10, Math.round(30 * this.zoom));\n              line.push({ x: x, y: y, d: \"right\", duration:duration, type: e.type, session: e.session });\n            } else if (e.x >= 0 && e.y >= 0 && !e.noheat) {\n              const x = e.x * sourceScreen.w + sourceScreen.x;\n              const y = e.y * sourceScreen.h + sourceScreen.y;\n              line.push({ x: x, y: y, d: \"right\", duration: duration , type: e.type, session: e.session});\n              lastDurationEvent = e\n            }\n            if (match && match.startPosition <= i && match.endPosition >= i) {\n              const point = line[line.length - 1];\n              point.match = true\n              matchLines.push(point);\n            }\n          } else {\n            console.warn(\"_renderUserGraph()\", \"Screen is not there\", e.screen);\n          }\n        }\n        \n        /** Since 4.0.60 we add a last node, if it was screen load */\n        if (e && e.type === 'ScreenLoaded') {\n          const screenID = this.getEventScreenId(e);\n          const sourceScreen = this.sourceModel.screens[screenID];\n          let x = Math.round(sourceScreen.x + sourceScreen.w / 2);\n          let y = Math.round(sourceScreen.y + sourceScreen.h / 2);\n          line.push({ x: x, y: y, d: \"right\", duration:duration, type: e.type, session: e.session});\n          if (match && match.startPosition <=  sessionLength-1 && match.endPosition >= sessionLength-1) {\n              const point = line[line.length - 1];\n              point.match = true\n              matchLines.push(point);\n            }\n        }\n  \n        this.analyticCircles[sessionID] = []\n        // draw all points\n        for (let i = 0; i < line.length; i++) {\n          const p = line[i]\n          const width = Math.round(40 * (p.duration / maxDuration)) + 25\n          const [div, halo, cntr] = this._renderScreenEvent(p.x,p.y, p.type, \"\",db, p.session, width);\n          if (i == line.length -1) {\n            css.add(cntr, \"MatcAnalyticCanvasEventSessionEnd\");\n            div.style.background = this.userJourneyEndColor\n            halo.style.background = this.userJourneyEndColor + 28;\n            halo.style.borderColor = this.userJourneyEndColor;\n          } else if (i > 0) {\n            if (p.match) {\n              div.style.background = this.analyticParams.taskColor;\n              halo.style.background = this.analyticParams.taskColor + 28;\n              halo.style.borderColor = this.analyticParams.taskColor;\n            } else if (isOutlier && this.analyticParams.outlier) {\n            \n              div.style.background = this.analyticParams.outlierColor\n              halo.style.background = this.analyticParams.outlierColor + 28;\n              halo.style.borderColor = this.analyticParams.outlierColor;\n\n            } else {\n              div.style.background = this.analyticParams.color\n              halo.style.background = this.analyticParams.color + 28;\n              halo.style.borderColor = this.analyticParams.color;\n            }\n          }\n          this.analyticCircles[sessionID].push(cntr)\n      \n\n\n        }\n    \n        /**\n         * Render successful lines on top\n         */\n        let lineColor = this.analyticParams.color\n        let lineOpacity = this.taskLineOpacity\n        let lineWidth = 2\n\n        if (this.analyticParams.outlier) {\n          if (isOutlier) {\n            lineColor = this.analyticParams.outlierColor\n            lineOpacity = this.taskLineOpacity\n            lineWidth = 4\n          } else {\n            lineOpacity = this.taskLineOpacity * 0.5\n          }\n        }\n        \n        if (task) {\n          lineOpacity = this.taskLineOpacity * 0.5\n          this.drawStraightAnalyticLine(sessionID, line, lineColor, lineWidth, lineOpacity);\n          this.drawStraightAnalyticLine(sessionID, matchLines,this.analyticParams.taskColor, 4 ,this.taskLineOpacity);\n        } else {\n          this.drawStraightAnalyticLine(sessionID,line, lineColor, lineWidth, lineOpacity);\n        }\n  \n        return false;\n      },\n  \n     \n      _renderScreenEvent(x, y, type, label, db, screenID, width, r = 15) {\n        const cntr = db\n          .div(\"MatcAnalyticCanvasEventCntr\")\n          .build(this.widgetContainer);\n        cntr.style.left = Math.round(x) + \"px\";\n        cntr.style.top = Math.round(y) + \"px\";\n  \n  \n        const halo = db\n          .div(\"MatcAnalyticCanvasEventHalo\")\n          .build(cntr);\n  \n        halo.style.width = width + \"px\";\n        halo.style.height = width + \"px\";\n        halo.style.top = -1 * Math.round(width / 2) + \"px\";\n        halo.style.left = -1 * Math.round(width / 2) + \"px\";\n   \n        const div = db\n          .div(\"MatcAnalyticCanvasEvent MatcAnalyticCanvasClickableEvent MatcAnalyticCanvasEvent\" + type)\n          .build(cntr);\n  \n        div.style.width = r + \"px\";\n        div.style.height = r + \"px\";\n        div.style.top = -1 * Math.round(r / 2) + \"px\";\n        div.style.left = -1 * Math.round(r / 2) + \"px\";\n  \n        this.tempOwn(on(div, \"click\", lang.hitch(this, \"onScreenEventClick\", screenID)));\n  \n        return [div, halo, cntr];\n      },\n  \n      onScreenEventClick(id, e) {\n        this.stopEvent(e);\n        if (this.toolbar) {\n          this.toolbar.setSelectSessions([id]);\n        }\n      },\n  \n      _getSessionGraph(session, graph) {\n    \n        const sessionEvents = session.data;\n        let from;\n        let e = null\n        let lastDurationEvent// = sessionEvents[0]\n        let duration = 0\n        for (let i = 0; i < sessionEvents.length; i++) {\n          e = sessionEvents[i];\n          // we start only counting durations once there\n          // was an click event\n          if (lastDurationEvent) {\n            duration = e.time - lastDurationEvent.time\n          }\n          \n        /**\n           * Be aware of the overlay...\n           */\n          const screenID = this.getEventScreenId(e);\n          const screen = this.sourceModel.screens[screenID];\n          if (screen) {\n            const to = {};\n            if (e.type == \"SessionStart\") {\n              to.x = screen.x - Math.max(10, Math.round(30));\n              to.y = screen.y + Math.max(10, Math.round(30));\n              from = this._addToGraph(from, to, graph, 0);\n            } else if (e.x >= 0 && e.y >= 0 && !e.noheat) { // some click\n              if (e.widget && this.sourceModel.widgets[e.widget]) {\n                const widget = this.sourceModel.widgets[e.widget];\n                to.x = Math.round(widget.x + widget.w / 2);\n                to.y = Math.round(widget.y + widget.h / 2);\n                from = this._addToGraph(from, to, graph, duration);\n                lastDurationEvent = e\n              } else {\n                to.x = Math.round(Math.min(1, e.x) * screen.w + screen.x);\n                to.y = Math.round(Math.min(1, e.y) * screen.h + screen.y);\n                from = this._addToGraph(from, to, graph, duration);\n                lastDurationEvent = e\n              }\n            }\n          } else {\n            console.warn(\"_getSessionGraph()\", \"Screen is not there\", e.screen);\n          }\n        }\n  \n          /** Since 4.0.60 we add a last node, if it was screen load */\n        if (e && e.type === 'ScreenLoaded') {\n          const screenID = this.getEventScreenId(e);\n          const screen = this.sourceModel.screens[screenID];\n          const to = {\n            x: Math.round(screen.x + screen.w / 2),\n            y: Math.round(screen.y + screen.h / 2)\n          }\n          from = this._addToGraph(from, to, graph, duration);\n        }\n  \n  \n      },\n  \n      _addToGraph(from, to, graph, duration) {\n        if (from) {\n          const id = from.x + \";\" + from.y + \"-\" + to.x + \";\" + to.y;\n          if (!graph[id]) {\n            graph[id] = {\n              from: from,\n              to: to,\n              count: 0,\n              duration: 0\n            };\n          }\n          graph[id].count++;\n          graph[id].duration += duration * 1;\n          return to;\n        }\n        return to;\n      }\n    },\n    mounted() {},\n  };\n  </script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./UserJourney.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./UserJourney.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./UserJourney.vue?vue&type=template&id=790412f8&\"\nimport script from \"./UserJourney.vue?vue&type=script&lang=js&\"\nexport * from \"./UserJourney.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcCanvas MatcAnalyticCanvas\"})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n<template>\n    <div class=\"MatcCanvas MatcAnalyticCanvas\">\n     \n    </div>\n  </template>\n  \n  \n  <script>\n  \n  import on from \"dojo/on\";\n  import DomBuilder from \"common/DomBuilder\";\n  import DataFrame from \"common/DataFrame\";\n  import Analytics from \"dash/Analytics\";\n \n  export default {\n    name: \"DropOff\",\n    mixins: [],\n    data: function () {\n      return {\n      };\n    },\n    components: {},\n    methods: {\n     \n  \n      /**********************************************************************\n       * DropOff\n       **********************************************************************/\n  \n      _render_global_DropOff(screenEvents, screen, ctx, div) {\n        this.logger.log(1, \"_render_global_DropOff\", \"entry > \", this.analyticParams.task);\n        this.setBW(true);\n        if (this.analyticParams.task) {\n          if (this.analyticParams.time) {\n            this._render_dropoff_task_time(screenEvents, screen, ctx, div, this.analyticParams.task);\n          } else {\n            this._render_dropoff_task_success(screenEvents, screen, ctx, div, this.analyticParams.task);\n          }\n        } else {\n          this.showError('No task selected')\n        }\n      },\n  \n       _render_dropoff_task_time (screenEvents, screen, ctx, div, task) {\n  \n        const db = new DomBuilder()\n  \n        const df = new DataFrame(this.events);\n        const analytics  = new Analytics();\n        const funnel = analytics.getFunnelSummary(df, task, this.annotation);\n  \n\n  \n        const length = task.flow.length\n        if (task.flow && task.flow.length > 1) {\n  \n          /**\n           * We take here to total task time...\n           */\n          const maxTime = Math.max(1,funnel[funnel.length-1].durationMean)\n  \n          for (let i=0; i < task.flow.length - 1; i++){\n            const startSummary = funnel[i+1]\n            const endSummary = funnel[i+2]\n            const start = task.flow[i]\n            const end = task.flow[i+1]\n  \n  \n            const time = endSummary.durationMean - startSummary.durationMean\n            const p = Math.min(1, time  / maxTime)\n  \n  \n            const startPos = this._getDropOffBoxPosition(start, i , length)\n            const endPos = this._getDropOffBoxPosition(end, i+ 1, length)\n            const line = [startPos, endPos]\n  \n            let color = this.mixColor(p)\n            let width = Math.max(3, Math.round(this.dropOffLineWidth * p))\n            this.drawAnalyticLine('dropOffLine'+i,line, color , width, this.taskLineOpacity);\n  \n            /**\n             * Render Points\n             */\n            this._renderDropOffEvent(endPos.x, endPos.y, 'FlowStep', db, color, width + this.dropOffEventWidth, Math.round(time / 100) / 10, 's')\n            if (i === 0) {\n                color = this.mixColor(p)\n                width = Math.max(3, Math.round(this.dropOffLineWidth * p))\n                this._renderDropOffEvent(startPos.x, startPos.y, 'FlowStep', db, color, width + this.dropOffEventWidth, '0', 's')\n            }\n  \n          }\n        } else {\n          this.showError('Cannot show task times. The selected task has only one step.')\n        }\n      },\n  \n      _render_dropoff_task_success (screenEvents, screen, ctx, div, task) {\n  \n        const db = new DomBuilder()\n  \n        const df = new DataFrame(this.events);\n        const analytics  = new Analytics();\n        const funnel = analytics.getFunnelSummary(df, task, this.annotation);\n  \n        const length = task.flow.length\n        if (task.flow && task.flow.length > 1) {\n          for (let i=0; i < task.flow.length - 1; i++){\n  \n            const startSummary = funnel[i+1]\n            const endSummary = funnel[i+2]\n            const start = task.flow[i]\n            const end = task.flow[i+1]\n  \n            const startPos = this._getDropOffBoxPosition(start, i, length)\n            const endPos = this._getDropOffBoxPosition(end, i + 1, length)\n            const line = [startPos, endPos]\n  \n            let color = this.greenToRed(endSummary.p)\n            let width = Math.max(3, Math.round(this.dropOffLineWidth * endSummary.p))\n            this.drawAnalyticLine('dropOffLine'+i,line, color , width, this.taskLineOpacity);\n  \n            /**\n             * Render drop off\n             */\n            if (startSummary && endSummary) {\n                const p = startSummary.p - endSummary.p\n                const dropOffPos = {\n                  x: startPos.x + 100,\n                  y: startPos.y + 100\n                }\n                const dropOffLine = [startPos, dropOffPos]\n                width = Math.max(3, Math.round(this.dropOffLineWidth * p))\n                this.drawAnalyticLine('dropOffLineDrop'+i,dropOffLine, this.dropOffLineColor , width, this.taskLineOpacity);\n                this._renderDropOffEvent(dropOffPos.x, dropOffPos.y, 'FlowStep', db, this.dropOffLineColor, width + this.dropOffEventWidth, Math.round(-100 * p))\n            }\n  \n            /**\n             * Render points\n             */\n            this._renderDropOffEvent(endPos.x, endPos.y, 'FlowStep', db, color, width + this.dropOffEventWidth, Math.round(endSummary.p * 100))\n            if (i === 0) {\n                color = this.greenToRed(startSummary.p)\n                width = Math.max(3, Math.round(this.dropOffLineWidth * startSummary.p))\n                this._renderDropOffEvent(startPos.x, startPos.y, 'FlowStep', db, color, width + this.dropOffEventWidth, Math.round(startSummary.p * 100))\n            }\n  \n          }\n        } else {\n          this.showError('Cannot show task times. The selected task has only one step.')\n        }\n      },\n  \n      _getDropOffBoxPosition (e, i = 0, l = 1) {\n  \n        if (e.widget) {\n          let widget = this.sourceModel.widgets[e.widget]\n          if (widget) {\n              let pos = {}\n              pos.x = Math.round(widget.x + widget.w / 2);\n              pos.y = Math.round(widget.y + widget.h / 2);\n              return pos\n          } else {\n             this.logger.warn(\"_geDropOffBoxPosition\", \"no widget > \", e.widget);\n          }\n  \n        }\n        if (e.screen) {\n          let sourceScreen = this.sourceModel.screens[e.screen]\n          if (sourceScreen) {\n              let pos = {}\n              pos.x = Math.round(sourceScreen.x + sourceScreen.w / 2);\n              pos.y = Math.min(sourceScreen.y + sourceScreen.h, Math.round(sourceScreen.y + sourceScreen.h / 3) + (sourceScreen.h * i / (l * 2)));\n              return pos\n          } else {\n             this.logger.warn(\"_geDropOffBoxPosition\", \"no screen > \", e.screen);\n          }\n        }\n      },\n  \n      _renderDropOffEvent(x, y, type, db, color, width, p, unit='%') {\n        var cntr = db\n          .div(\"MatcAnalyticCanvasEventCntr\")\n          .build(this.widgetContainer);\n        cntr.style.left = Math.round(x) + \"px\";\n        cntr.style.top = Math.round(y) + \"px\";\n  \n        var div = db\n          .div(\"MatcAnalyticCanvasEvent MatcAnalyticCanvasEvent\" + type,)\n          .build(cntr);\n  \n        var r = Math.max(5, Math.round(width));\n        div.style.width = r + \"px\";\n        div.style.height = r + \"px\";\n        div.style.top = -1 * Math.round(r / 2) + \"px\";\n        div.style.left = -1 * Math.round(r / 2) + \"px\";\n        div.style.background = color\n        this.tempOwn(on(div, 'click', (e) => this.selectDropOffPoint(e)))\n      \n        if (unit) {\n          db.span('MatcAnalyticCanvasEventLabel', p + unit).build(div)\n        }\n  \n        return div;\n      },\n  \n      selectDropOffPoint () {\n  \n      }\n    },\n    mounted() {},\n  };\n  </script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DropOff.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DropOff.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DropOff.vue?vue&type=template&id=4e78cd24&\"\nimport script from \"./DropOff.vue?vue&type=script&lang=js&\"\nexport * from \"./DropOff.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcCanvas MatcAnalyticCanvas\"})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n<template>\n  <div class=\"MatcCanvas MatcAnalyticCanvas\">\n\n  </div>\n</template>\n  \n  \n<script>\n\nimport DataFrame from \"common/DataFrame\";\nimport Analytics from \"dash/Analytics\";\nimport * as Outlier from 'dash/Outlier'\n\nexport default {\n  name: \"DataProcessing\",\n  mixins: [],\n  data: function () {\n    return {\n    };\n  },\n  components: {},\n  methods: {\n\n\n    getOutlierScores() {\n      if (!this.cache[\"outliers\"]) {\n        const df = new DataFrame(this.events);\n        //const outliers = Outlier.computeOutliersIRQ(df);\n        const outliers = Outlier.computeOutliersMAD(df, 2)\n        this.cache[\"outliers\"] = outliers\n      }\n      return this.cache[\"outliers\"];\n    },\n\n    getGestures() {\n      if (!this.cache[\"gestures\"]) {\n        var df = new DataFrame(this.events);\n        var gestures = df.select(\"type\", \"in\", [\n          \"ScreenGesture\",\n          \"WidgetGesture\",\n        ]);\n        this.cache[\"gestures\"] = gestures.data;\n      }\n\n      return this.cache[\"gestures\"];\n    },\n\n    getUserJourney() {\n      if (!this.cache[\"userJourney\"]) {\n        var df = new DataFrame(this.events);\n        df.sortBy(\"time\");\n        var sessionGroup = df.groupBy(\"session\");\n        let sessions = sessionGroup.data;\n        this.cache[\"userJourney\"] = sessions;\n      }\n      return this.cache[\"userJourney\"];\n    },\n\n    getTaskPerformance() {\n      if (!this.cache[\"taskPerformance\"]) {\n        const analytics = new Analytics();\n        const df = new DataFrame(this.events);\n        df.sortBy(\"time\");\n\n        const temp = analytics.getTaskPerformance(\n          df, this.testSettings.tasks, false, false\n        );\n        const sessions = {};\n        for (let i = 0; i < temp.data.length; i++) {\n          const match = temp.data[i];\n          if (!sessions[match.session]) {\n            sessions[match.session] = {};\n          }\n          if (!sessions[match.session][match.task]) {\n            sessions[match.session][match.task] = match;\n          } else {\n            console.warn(\"getTaskPerformance() Double mactch\", match);\n          }\n        }\n        this.cache[\"taskPerformance\"] = sessions;\n      }\n      return this.cache[\"taskPerformance\"];\n    },\n\n    getOverlayViews() {\n      if (!this.cache[\"overlayViews\"]) {\n        var screenLoads = this.df.select(\"type\", \"==\", \"OverlayLoaded\");\n\n        var screenLoadCounts = screenLoads.count(\"overlay\");\n        var totalScreenLoads = screenLoads.size();\n\n        var views = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          views[screen.id] = screenLoadCounts.get(screen.id, null, 0);\n        }\n\n        this.cache[\"overlayViews\"] = {\n          total: totalScreenLoads,\n          counts: views,\n        };\n      }\n      return this.cache[\"overlayViews\"];\n    },\n\n    getOverlayTest() {\n      if (!this.cache[\"overlayTests\"]) {\n        var sessions = this.df.groupBy(\"session\");\n        var sessionCount = sessions.size().size();\n\n        var tests = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          tests[screen.id] = 0;\n        }\n\n        sessions.foreach(function (df) {\n          var screenCounts = df.count(\"overlay\"); // diference to screenTest\n          screenCounts.foreach(function (row, id) {\n            tests[id] += 1;\n          });\n        });\n\n        this.cache[\"overlayTests\"] = {\n          sessions: sessionCount,\n          counts: tests,\n        };\n      }\n      return this.cache[\"overlayTests\"];\n    },\n\n    getScreenViews() {\n      if (!this.cache[\"screenViews\"]) {\n        var screenLoads = this.df.select(\"type\", \"==\", \"ScreenLoaded\");\n        var screenLoadCounts = screenLoads.count(\"screen\");\n        var totalScreenLoads = screenLoads.size();\n\n        var views = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          views[screen.id] = screenLoadCounts.get(screen.id, null, 0);\n        }\n\n        this.cache[\"screenViews\"] = {\n          total: totalScreenLoads,\n          counts: views,\n        };\n      }\n      return this.cache[\"screenViews\"];\n    },\n\n    getScreenTests() {\n      if (!this.cache[\"screenTests\"]) {\n        var sessions = this.df.groupBy(\"session\");\n        var sessionCount = sessions.size().size();\n\n        var tests = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          tests[screen.id] = 0;\n        }\n\n        sessions.foreach(function (df) {\n          var screenCounts = df.count(\"screen\");\n          screenCounts.foreach(function (row, id) {\n            tests[id] += 1;\n          });\n        });\n\n        this.cache[\"screenTests\"] = {\n          sessions: sessionCount,\n          counts: tests,\n        };\n      }\n      return this.cache[\"screenTests\"];\n    },\n\n    getScreenDwellTime() {\n      if (!this.cache[\"screenDwell\"]) {\n        var count = this.df.count(\"session\");\n        var sessionCount = count.size();\n\n        var analytics = new Analytics();\n        var screenTimeGrouping = analytics.getScreenTimeGrouping(this.df);\n        var totalTime = screenTimeGrouping.sum().sum();\n\n        var times = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          var screenTimeDF = screenTimeGrouping.get(screen.id);\n          if (screenTimeDF) {\n            times[screen.id] = screenTimeDF.sum();\n          } else {\n            times[screen.id] = 0;\n          }\n        }\n\n        this.cache[\"screenDwell\"] = {\n          total: totalTime,\n          times: times,\n          sessions: sessionCount,\n        };\n      }\n      return this.cache[\"screenDwell\"];\n    },\n\n    getOverlayDwellTime() {\n      if (!this.cache[\"overlayDwell\"]) {\n        var count = this.df.count(\"session\");\n        var sessionCount = count.size();\n\n        var analytics = new Analytics();\n\n        /**\n         * We calculate the overlay time relative to the absolute screen time...\n         */\n        var screenTimeGrouping = analytics.getScreenTimeGrouping(this.df);\n        var totalTime = screenTimeGrouping.sum().sum();\n\n        var overlayGrouping = analytics.getOverlayTimeGrouping(this.df);\n\n        var times = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          var screenTimeDF = overlayGrouping.get(screen.id);\n          if (screenTimeDF) {\n            times[screen.id] = screenTimeDF.sum();\n          } else {\n            times[screen.id] = 0;\n          }\n        }\n\n        this.cache[\"overlayDwell\"] = {\n          total: totalTime,\n          times: times,\n          sessions: sessionCount,\n        };\n      }\n      return this.cache[\"overlayDwell\"];\n    },\n\n    getScreenWidgetClicks() {\n      if (!this.cache[\"screenWidgetClicks\"]) {\n        /**\n         * FIXME: This could be nice with regards to the overlays....\n         *\n         * Some clicks should be attributed the to overlay, nit the clicks, or?\n         */\n        var widgetEvents = this.df.select(\"type\", \"==\", \"WidgetClick\");\n        var widgetScreenEvents = widgetEvents.count(\"screen\");\n        var totalWidgetEvents = widgetScreenEvents.sum();\n\n        /**\n         * Now filter out overlay events\n         */\n        widgetEvents = widgetEvents.select(\"overlay\", \"==\", null);\n        widgetScreenEvents = widgetEvents.count(\"screen\");\n\n        var clicks = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          clicks[screen.id] = widgetScreenEvents.get(screen.id, null, 0);\n        }\n\n        this.cache[\"screenWidgetClicks\"] = {\n          clicks: clicks,\n          total: totalWidgetEvents,\n        };\n      }\n\n      return this.cache[\"screenWidgetClicks\"];\n    },\n\n\n    getScreenClicksOnBackground() {\n      if (!this.cache[\"screenClicksOnBackground\"]) {\n        var screenClicks = this.df.select(\"type\", \"==\", \"ScreenClick\");\n        this.cache[\"screenClicksOnBackground\"] = screenClicks\n      }\n\n      return this.cache[\"screenClicksOnBackground\"];\n    },\n\n    getMissedClicks() {\n      if (!this.cache[\"missedClicks\"]) {\n        /** \n         * Get all screens that do not have a line\n         */\n        var screens = Object.values(this.sourceModel.screens);\n        let passiveScreens = {}\n        screens.forEach(s => {\n          let linesFrom = this.getFromLines(s)\n          if (linesFrom.length === 0) {\n            passiveScreens[s.id] = true\n          }\n        })\n\n\n        /**\n         * Get all the widgets that do not have a line\n         * AND that are not inputs \n         */\n        let passiveWidgets = []\n        let widgets = Object.values(this.sourceModel.widgets)\n        widgets.forEach(w => {\n          if (w.type === \"Box\" || w.type === \"Button\" || w.type === \"HotSpot\") {\n            let linesFrom = this.getFromLines(w)\n            if (linesFrom.length === 0) {\n              passiveWidgets[w.id] = true\n            }\n          }\n        })\n\n        /**\n         * Filter screenclicks for these screens\n         */\n        let clickEvents = this.df\n          .select(\"type\", \"in\", [\"ScreenClick\", \"WidgetClick\"])\n          .as_array();\n\n\n        let missedClicks = clickEvents.filter(e => {\n          if (e.type === \"ScreenClick\" && passiveScreens[e.screen] === true) {\n            return true\n          }\n          if (e.type === \"WidgetClick\" && passiveWidgets[e.widget] === true) {\n            return true\n          }\n\n          return false\n        })\n\n        this.cache[\"missedClicks\"] = missedClicks;\n      }\n\n      return this.cache[\"missedClicks\"];\n    },\n\n\n    getScreenClicks() {\n      if (!this.cache[\"screenClicks\"]) {\n        /**\n         * FIXME: This could be nice with regards to the overlays....\n         *\n         * Some clicks should be attributed the to overlay, nit the clicks, or?\n         */\n        var clickEvents = this.df.select(\"type\", \"in\", [\n          \"ScreenClick\",\n          \"WidgetClick\",\n        ]);\n        var clickEventsCount = clickEvents.count(\"screen\");\n        var totalWidgetEvents = clickEventsCount.sum();\n\n        var widgetEvents = this.df.select(\"type\", \"==\", \"ScreenClick\");\n        var widgetScreenEvents = widgetEvents.count(\"screen\");\n\n        var clicks = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          clicks[screen.id] = widgetScreenEvents.get(screen.id, null, 0);\n        }\n\n        this.cache[\"screenClicks\"] = {\n          clicks: clicks,\n          total: totalWidgetEvents,\n        };\n      }\n\n      return this.cache[\"screenClicks\"];\n    },\n\n    getOverlayClicks() {\n      if (!this.cache[\"overlayCicks\"]) {\n        /**\n         * FIXME: This could be nice with regards to the overlays....\n         *\n         * Some clicks should be attributed the to overlay, nit the clicks, or?\n         */\n        var widgetEvents = this.df.select(\"type\", \"==\", \"ScreenClick\");\n        var widgetScreenEvents = widgetEvents.count(\"overlay\");\n        var totalWidgetEvents = widgetScreenEvents.sum();\n\n        var clicks = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          clicks[screen.id] = widgetScreenEvents.get(screen.id, null, 0);\n        }\n\n        this.cache[\"overlayCicks\"] = {\n          clicks: clicks,\n          total: totalWidgetEvents,\n        };\n      }\n\n      return this.cache[\"overlayCicks\"];\n    },\n\n    getOverlayWidgetClicks() {\n      if (!this.cache[\"overlayWidgetCicks\"]) {\n        /**\n         * FIXME: This could be nice with regards to the overlays....\n         *\n         * Some clicks should be attributed the to overlay, nit the clicks, or?\n         */\n        var widgetEvents = this.df.select(\"type\", \"==\", \"WidgetClick\");\n        var widgetScreenEvents = widgetEvents.count(\"overlay\");\n        var totalWidgetEvents = widgetScreenEvents.sum();\n\n        var clicks = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          clicks[screen.id] = widgetScreenEvents.get(screen.id, null, 0);\n        }\n\n        this.cache[\"overlayWidgetCicks\"] = {\n          clicks: clicks,\n          total: totalWidgetEvents,\n        };\n      }\n\n      return this.cache[\"overlayWidgetCicks\"];\n    },\n\n    getLineWidgetData() {\n      if (!this.cache[\"lineWidgetData\"]) {\n        let result = {}\n        let allWidetData = this.getWidgetData()\n        let maxClicksAbs = 0\n        // filter only for clicks on lines, and calcuate the clicksRel\n        for (let id in this.model.lines) {\n          let from = this.model.lines[id].from\n          if (allWidetData[from]) {\n            const clicksAbs = allWidetData[from].clicksAbs\n            result[from] = {\n              clicksAbs: clicksAbs\n            }\n            maxClicksAbs = Math.max(maxClicksAbs, clicksAbs)\n          }\n          Object.values(result).forEach(v => {\n            v.clicksRel = v.clicksAbs / maxClicksAbs\n          })\n        }\n        this.cache[\"lineWidgetData\"] = result\n      }\n      return this.cache[\"lineWidgetData\"]\n    },\n\n    getWidgetData() {\n      if (!this.cache[\"widgetData\"]) {\n        var analytics = new Analytics();\n        var widgets = {};\n        var data = analytics.getWidgetStatistics(this.sourceModel, this.df);\n        for (var id in data) {\n          widgets[id] = data[id];\n        }\n        this.cache[\"widgetData\"] = widgets;\n      }\n      return this.cache[\"widgetData\"];\n    },\n\n    getFirstNClicksData(n) {\n      var key = \"firstClicks\" + n;\n      if (!this.cache[key]) {\n        var analytics = new Analytics();\n        this.cache[key] = analytics.getFirstNClicks(this.events, n);\n      }\n      return this.cache[key];\n    },\n\n\n  },\n  mounted() { },\n};\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DataProcessing.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DataProcessing.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DataProcessing.vue?vue&type=template&id=c87f1326&\"\nimport script from \"./DataProcessing.vue?vue&type=script&lang=js&\"\nexport * from \"./DataProcessing.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\n<template>\n  <div class=\"MatcCanvas MatcAnalyticCanvas\">\n    <div class=\"MatcCanvasFrame\" data-dojo-attach-point=\"frame\">\n      <div class=\"MatcCanvasContainer MatcCanvasZoomable\"  data-dojo-attach-point=\"container\" >\n        <div class=\"MatcCanvasContainer\" data-dojo-attach-point=\"zoomContainer\">\n          <div  data-dojo-attach-point=\"screenContainer\" class=\"MatcCanvasLayer\" ></div>\n          <div data-dojo-attach-point=\"widgetContainer\" class=\"MatcCanvasLayer\"></div>\n\t\t\t\t\t<div data-dojo-attach-point=\"svgContainer\" class=\"MatcCanvasLayer MatcCanvasSVGLayer\"></div>\n        </div>\n        <div data-dojo-attach-point=\"dndContainer\" class=\"MatcDnDLayer\"></div>\n      </div>\n    </div>\n    <div class=\"MatcCanvasScrollBar MatcCanvasScrollBarRight\" data-dojo-attach-point=\"scrollRight\">\n      <div class=\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrRight\" data-dojo-attach-point=\"scrollRightCntr\" >\n        <div class=\"MatchCanvasScrollHandle\" data-dojo-attach-point=\"scrollRightHandler\"\n        ></div>\n      </div>\n    </div>\n    <div class=\"MatcCanvasScrollBar MatcCanvasScrollBarBottom\" data-dojo-attach-point=\"scrollBottom\" >\n      <div class=\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrBottom\" data-dojo-attach-point=\"scrollBottomCntr\" >\n        <div class=\"MatchCanvasScrollHandle\" data-dojo-attach-point=\"scrollBottomHandler\"\n        ></div>\n      </div>\n    </div>\n    <div class=\"MatcMessage\" data-dojo-attach-point=\"message\"></div>\n  </div>\n</template>\n\n<style lang=\"css\">\n  @import url(\"../../style/css/legacy.css\");\n</style>\n<style lang=\"scss\">\n  @import \"../../style/matc.scss\";\n  @import \"../../style/canvas/all.scss\";\n  @import '../../style/toolbar/all.scss';\n</style>\n\n<script>\nimport DojoWidget from \"dojo/DojoWidget\";\nimport css from \"dojo/css\";\n\nimport Logger from \"common/Logger\";\nimport on from \"dojo/on\";\nimport touch from \"dojo/touch\";\nimport lang from \"dojo/_base/lang\";\n\nimport win from \"dojo/_base/win\";\nimport topic from \"dojo/topic\";\n\nimport DomBuilder from \"common/DomBuilder\";\nimport DataFrame from \"common/DataFrame\";\nimport _DragNDrop from \"common/_DragNDrop\";\n\nimport Heat from \"dash/Heat\";\nimport Render from \"canvas/Render\";\nimport Lines from \"canvas/Lines\";\nimport DnD from \"canvas/DnD\";\nimport Add from \"canvas/Add\";\nimport Select from \"canvas/Select\";\nimport Distribute from \"canvas/Distribute\";\nimport Tools from \"canvas/Tools\";\nimport Zoom from \"canvas/Zoom\";\nimport Util from \"core/Util\";\nimport InlineEdit from \"canvas/InlineEdit\";\nimport Scroll from \"canvas/Scroll\";\nimport Upload from \"canvas/Upload\";\nimport Comment from \"canvas/Comment\";\nimport KeyBoard from \"canvas/KeyBoard\";\nimport Resize from \"canvas/Resize\";\nimport Replicate from \"canvas/Replicate\";\nimport Analytics from \"dash/Analytics\";\nimport FastDomUtil from \"core/FastDomUtil\";\nimport * as d3 from \"d3\";\nimport _Color from 'common/_Color'\n\nimport UserJourney from './UserJourney'\nimport DropOff from './DropOff'\nimport DataProcessing from './DataProcessing'\n\nexport default {\n  name: \"AnalyticCanvas\",\n  mixins: [\n    DojoWidget,\n    _DragNDrop,\n    _Color,\n    Util,\n    Render,\n    Lines,\n    DnD,\n    Add,\n    Select,\n    Distribute,\n    Tools,\n    Zoom,\n    InlineEdit,\n    Scroll,\n    Upload,\n    KeyBoard,\n    Resize,\n    Replicate,\n    Comment,\n    Heat,\n    UserJourney,\n    DropOff,\n    DataProcessing\n  ],\n  data: function () {\n    return {\n      mode: \"view\",\n      zoom: 0.5,\n      analyticMode: \"HeatmapClick\",\n      resizeEnabled: false,\n      renderDND: true,\n      dragNDropMinTimeSpan: 0,\n      wireInheritedWidgets: true,\n      taskLineOpacity: 1,\n      isBlackAndWhite: false,\n      dropOffLineWidth: 25,\n      dropOffLineColor: '#555',\n      dropOffEventWidth: 40,\n      userJourneyEndColor: '#f03131'\n    };\n  },\n  components: {},\n  methods: {\n    postCreate() {\n      this.logger = new Logger(\"AnalyticCanvas\");\n      this.logger.log(2, \"constructor\", \"entry\");\n      this.cache = {};\n      this.moveMode = \"classic\";\n      this.domUtil = new FastDomUtil();\n\t\t\tthis.analyticLines = {}\n      this.analyticCircles = {}\n\n      this.logger.log(2, \"postCreate\", \"entry\");\n      this.initSize();\n\n      /**\n       * init container size and position\n       */\n      this.canvasPos = {\n        x: this.canvasStartX,\n        y: this.canvasStartY,\n        w: this.canvasFlowWidth,\n        h: this.canvasFlowHeight,\n      };\n      this.initContainerSize();\n      this.setContainerPos();\n\n      /**\n       * Init remaining sub components\n       */\n      this.initSelection()\n      this.initRender();\n\t\t\tthis.initAnalyticSVG()\n      this.initZoom();\n      this.initScrollBars();\n      this.initComment();\n      this.initSettings();\n      this.initWiring();\n      this.initKeys();\n      this.initMouseTracker()\n\n      this.db = new DomBuilder();\n\n      /**\n       * Init Listeners\n       */\n      this.own(\n        topic.subscribe(\n          \"matc/toolbar/click\",\n          lang.hitch(this, \"onToolbarClick\")\n        )\n      );\n      this.own(on(win.body(), \"keydown\", lang.hitch(this, \"onKeyPress\")));\n      this.own(on(win.body(), \"keyup\", lang.hitch(this, \"onKeyUp\")));\n\n      this.logger.log(2, \"postCreate\", \"exit!!!\");\n    },\n\n    showError (msg){\n\t\t\tif(this.message){\n\t\t\t\tcss.add(this.message, \"MatcMessageError\");\n\t\t\t\tcss.remove(this.message, \"MatcMessageSuccess MatcMessageHint\");\n\t\t\t\tthis.message.textContent = msg;\n\t\t\t\tsetTimeout(lang.hitch(this,\"hideMessage\"), 3000);\n\t\t\t}\n\t\t},\n\n\n    XlineFunction (line) {\n    \treturn this.straightLineFunction(line)\n    },\n\n    setPublic(isPublic) {\n      this.isPublic = isPublic;\n    },\n\n    setModelService(s) {\n      this.sourceModelService = s;\n    },\n\n    setCommentService(s) {\n      this.commentService = s;\n    },\n\n    setToolbar(t) {\n      this.toolbar = t;\n      this.onChangeCanvasViewConfig();\n    },\n\n\t\tsetMouseListener (callback) {\n\t\t\tthis.mouseListenerCallback = callback\n\t\t},\n\n    inlineEditInit() {\n      this.logger.log(2, \"inlineEditInit\", \"enter\");\n    },\n\n    setMouseData(data) {\n      this.logger.log(0, \"setMouseData\", \"enter > \" + data.length);\n      // this.mouseData = this.computeMouseDistribution(data, this.sourceModel);\n      this.mouseData = data;\n      if (data.length == 0) {\n        this.showError(\"No Mouse data was recorded\");\n      }\n    },\n\n    setBW(isBW) {\n      this.logger.log(1, \"setBW\", \"enter > \" + isBW);\n      if (isBW) {\n        css.add(this.container, \"MatcCanvasBW\");\n      } else {\n        css.remove(this.container, \"MatcCanvasBW\");\n      }\n    },\n\n    onChangeCanvasViewConfig() {\n      if (this.toolbar) {\n        this.toolbar.setCanvasViewConfig({\n          zoom: this.zoom,\n          renderLines: this.renderLines,\n          showComments: this.showComments,\n          isBlackAndWhite: this.isBlackAndWhite,\n        });\n      }\n    },\n\n    setCanvasViewConfig(key, value) {\n      this.logger.log(-1, \"setCanvasViewConfig\", \"enter > \" + key, value);\n      if (key === \"zoom\") {\n        this.setZoomFactor(value);\n      }\n\n      if (key === \"renderLines\") {\n        this.setViewLines(value);\n      }\n\n      if (key === \"showComments\") {\n        this.setCommentView(value);\n      }\n\n      if (key === \"isBlackAndWhite\") {\n        this.isBlackAndWhite = value;\n        this.setBW(value);\n      }\n    },\n\n\t\t/**********************************************************************\n     * Lines\n     **********************************************************************/\n\n\t\tinitAnalyticSVG (){\n\t\t\tthis.logger.log(3, \"initAnalyticSVG\", \"entry\");\n\t\t\tlet bodySelection = d3.select(this.svgContainer);\n\t\t\tthis.analyticSVG = bodySelection.append(\"svg\").attr(\"width\", this.canvasPos.h).attr(\"height\",this.canvasPos.w);\n\t  },\n\n\t\tcleanUpAnalyticLines () {\n\t\t\tif (this.analyticSVG) {\n\t\t\t\tthis.analyticSVG.selectAll(\"*\").remove();\n\t\t\t}\n\t\t\tthis.analyticLines = {}\n      this.analyticCircles = {}\n\t\t},\n\n    drawLine (id, line){\n      let color = this.defaultLineColor\n      let width = this.defaultLineWidth\n      if (this.model && this.model.lines && this.model.lines[id]) {\n        let modelLine = this.model.lines[id]\n        let widgetData = this.getLineWidgetData()\n        if (widgetData[modelLine.from]) {\n          let data = widgetData[modelLine.from]\n          let p = data.clicksRel\n          //width = Math.max(0.3, Math.round(1 * p))\n          color = this.mixColor(p)\n        }\n      }\n\t\t\treturn this.drawSVGLine(id, line, color, width, 1);\n\t\t},\n\n\t\tdrawAnalyticLine(id, line, color, width, opacity) {\n\t\t\tconst svg = this.analyticSVG.append(\"path\")\n\t\t\t\t\t\t\t.attr(\"d\", this.lineFunction(line))\n\t\t\t\t\t\t\t.attr(\"stroke\", color)\n\t\t\t\t\t\t\t.attr(\"stroke-width\", width )\n\t\t\t\t\t\t\t.attr(\"fill\", \"none\")\n\t\t\t\t\t\t\t.style(\"opacity\", opacity);\n\n\t\t\tthis.analyticLines[id] = svg\n\t\t},\n\n\n\t\tdrawStraightAnalyticLine(id, line, color, width, opacity) {\n\t\t\tconst svg = this.analyticSVG.append(\"path\")\n\t\t\t\t\t\t\t.attr(\"d\", this.straightLineFunction(line))\n\t\t\t\t\t\t\t.attr(\"stroke\", color)\n\t\t\t\t\t\t\t.attr(\"stroke-width\", width )\n\t\t\t\t\t\t\t.attr(\"fill\", \"none\")\n\t\t\t\t\t\t\t.style(\"opacity\", opacity);\n\n\t\t\tthis.analyticLines[id] = svg\n\t\t},\n\n    \n\n    /**********************************************************************\n     * Wiring\n     **********************************************************************/\n\n    initWiring() {\n      this.logger.log(-1, \"initWiring\", \"enter\");\n      this.own(on(this.dndContainer, \"mousedown\", (e) => this.dispatchMouseDown(e)));\n    },\n\n    dispatchMouseDownScreen(e, id) {\n      this.logger.log(-1, \"dispatchMouseDownScreen\", \"enter\", id);\n      let dndDiv = this.screenDivs[id];\n      let screen = this.model.screens[id];\n      this.onScreenDndClick(screen.id, dndDiv, null);\n    },\n\n    dispatchMouseDownWidget(e, id) {\n      this.logger.log(-1, \"dispatchMouseDownWidget\", \"enter\", id);\n      let div = this.widgetDivs[id];\n      this.onWidgetDndClick(id, div);\n    },\n\n    /**********************************************************************\n     * Settings\n     **********************************************************************/\n\n\t\tafterUpdateDnd (zoomedModel) {\n      this.logger.log(1, \"afterUpdateDnd\", \"enter > \", zoomedModel);\n\t\t},\n\n    initSettings() {\n      this.logger.log(1, \"initSettings\", \"enter > \");\n      /**\n       * default settings\n       */\n      this.settings = {\n        canvasTheme: \"MatcLight\",\n        lineColor: \"#333\",\n        lineWidth: 1,\n        storePropView: true,\n        moveMode: \"ps\",\n        mouseWheelMode: \"scroll\",\n      };\n\n      var s = this._getStatus(\"matcSettings\");\n      if (s) {\n        if (s.canvasTheme) {\n          this.settings.canvasTheme = s.canvasTheme;\n        }\n        if (s.lineColor) {\n          this.settings.lineColor = s.lineColor;\n        }\n        if (s.lineWidth) {\n          this.settings.lineWidth = s.lineWidth;\n        }\n      } else {\n        this.logger.log(2, \"initSettings\", \"exit>  no saved settings\");\n      }\n\n      this.applySettings(this.settings);\n    },\n\n    getSettings() {\n      return this.settings;\n    },\n\n    setSettings(s) {\n      /**\n       * Mixin values\n       */\n      if (s.canvasTheme) {\n        this.settings.canvasTheme = s.canvasTheme;\n      }\n      if (s.lineColor) {\n        this.settings.lineColor = s.lineColor;\n      }\n      if (s.lineWidth) {\n        this.settings.lineWidth = s.lineWidth;\n      }\n      if (s.storePropView != null) {\n        this.settings.storePropView = s.storePropView;\n      }\n\n      if (s.mouseWheelMode != null) {\n        this.settings.mouseWheelMode = s.mouseWheelMode;\n      }\n\n      this._setStatus(\"matcSettings\", this.settings);\n\n      this.applySettings(this.settings);\n      this.rerender();\n    },\n\n    applySettings(s) {\n      this.logger.log(\n        2,\n        \"applySettings\",\n        \"enter > \" + s.canvasTheme + \" &> \" + s.moveMode\n      );\n\n      if (s.lineColor) {\n        this.defaultLineColor = s.lineColor;\n      }\n      if (s.lineWidth) {\n        this.defaultLineWidth = s.lineWidth;\n      }\n      if (s.canvasTheme) {\n        if (this._lastCanvasTheme) {\n          css.remove(win.body(), this._lastCanvasTheme);\n        }\n        css.add(win.body(), s.canvasTheme);\n        this._lastCanvasTheme = s.canvasTheme;\n\n        /**\n         * FIXME: Kind of hack\n         */\n        if (s.canvasTheme == \"MatcLight\") {\n          this.defaultLineColor = \"#777\";\n        } else {\n          this.defaultLineColor = \"#333\";\n        }\n      }\n\n      if (s.mouseWheelMode) {\n        this._mouseWheelMode = s.mouseWheelMode;\n      }\n\n      this.settings = s;\n    },\n\n    /**********************************************************************\n     * DnD.js overwrites\n     **********************************************************************/\n\n    onWidgetDndClick(id, div, pos, e) {\n      this.logger.log(2, \"onWidgetDndClick\", \"enter > \" + id);\n      this.stopEvent(e);\n      this.onWidgetSelected(id);\n      this.selectAnalyticDiv(id);\n      this.setState(0);\n    },\n\n    onScreenDndClick(id, div, pos, e) {\n      this.logger.log(2, \"onScreenDndClick\", \"entry > \" + id);\n      this.stopEvent(e);\n      this.setSelectedScreens([id]);\n      this.selectAnalyticDiv(id);\n      this.setState(0);\n    },\n\n    onCanvasSelected() {\n      this.logger.log(2, \"onCanvasSelected\", \"entry > \");\n      this.selectAnalyticDiv(null);\n      if (this.toolbar) {\n        this.toolbar.unselect();\n        if (this.analyticMode === \"HeatmapClick\") {\n          this.toolbar.reShowClickHeatMap();\n        }\n      }\n    },\n\n    selectAnalyticDiv(id) {\n      if (this._analyticLastSelectedDiv) {\n        css.remove(this._analyticLastSelectedDiv, \"MatcHeapMapWidgetSelected\");\n        delete this._analyticLastSelectedDiv;\n      }\n      if (this.analyticsDivs && this.analyticsDivs[id]) {\n        let div = this.analyticsDivs[id];\n        css.add(div, \"MatcHeapMapWidgetSelected\");\n        this._analyticLastSelectedDiv = div;\n      }\n\n      if (this.widgetDivs && this.widgetDivs[id]) {\n        let div = this.widgetDivs[id];\n        css.add(div, \"MatcHeapMapWidgetSelected\");\n        this._analyticLastSelectedDiv = div;\n      }\n    },\n\n    /**********************************************************************\n     * Rendering\n     **********************************************************************/\n\n    renderLayerList() {\n      this.logger.log(1, \"renderLayerList\", \"entry > \");\n    },\n\n    afterRender() {\n      this.logger.log(1, \"afterRender\", \"entry > \" + this.analyticMode);\n      this.cleanUpAnalytics();\n \n      try {\n        this._renderHeatMap();\n      } catch (e) {\n        this.logger.error(\"afterRender\", \"Could not render heatmaps \", e);\n        this.logger.sendError(e);\n      }\n    },\n\n    hasSelect() {\n      return this.mode != \"addComment\";\n    },\n\n    _renderHeatMap() {\n      this.logPageView(\"/analytics/workspace/\" + this.analyticMode + \".html\");\n\n      this.setBW(this.isBlackAndWhite);\n\n      /**\n       * Init everything so the _Heat.js code works correctly\n       */\n      this.cleanUpHeat();\n\n      /**\n       * FIXME: Make this customisable\n       */\n      if (\n        this.sourceModel.type == \"smartphone\" ||\n        this.sourceModel.type == \"tablet\"\n      ) {\n        this.defaultRadius = this.sourceModel.screenSize.w / 20;\n        this.defaultBlur = this.sourceModel.screenSize.w / 15;\n      } else {\n        this.defaultRadius = this.sourceModel.screenSize.w / 120;\n        this.defaultBlur = this.sourceModel.screenSize.w / 100;\n      }\n\n      this.logger.log(0,\"onScreenRendered\", \"adjust radios to \" + this.defaultRadius);\n\n      var screenGrouping = this.df.groupBy(\"screen\");\n\n      this.heatmapDivs = {};\n      for (var id in this.sourceModel.screens) {\n        var screen = this.sourceModel.screens[id];\n\n        var screenDF = screenGrouping.get(id);\n        var screenEvents = [];\n        if (screenDF) {\n          screenEvents = screenDF.as_array();\n        }\n\n        if (this[\"_render_\" + this.analyticMode]) {\n          /**\n           * create canvas\n           */\n          var div = this.createBox(screen);\n          css.add(div, \"MatcHeatMapScreen\");\n          var cntr = this.db.div(\"MatcHeapMapContainer\").build(div);\n\n          var canvas = this.db.canvas(screen.w, screen.h).build(cntr);\n          var ctx = canvas.getContext(\"2d\");\n\n          this[\"_render_\" + this.analyticMode](screenEvents, screen, ctx, div);\n\n          if (this.hasSelect()) {\n            this.tempOwn(on(div,touch.press,lang.hitch(this, \"onScreenDndClick\", screen.id, div, null)));\n          }\n\n          this.widgetContainer.appendChild(div);\n\n          this.heatmapDivs[screen.id] = div;\n          this.analyticsDivs[screen.id] = div;\n        }\n      }\n\n      /**\n       * now draw a div for every widgert so we can also select them.\n       * A little hack but I dunno have a better way...\n       */\n      if (\"UserJourney\" != this.analyticMode && \"Gesture\" != this.analyticMode && 'DropOff' != this.analyticMode) {\n        this.hideWidgetDND = true;\n      } else {\n        this.hideWidgetDND = false;\n      }\n\n      if (this[\"_render_global_\" + this.analyticMode]) {\n        this[\"_render_global_\" + this.analyticMode](screenEvents,screen, ctx, div);\n      }\n    },\n\n    _render_HeatmapMouse(screenEvents, screen, ctx) {\n      this.logger.log(0, \"_render_HeatmapMouse\", \"entry > \" + screen.name);\n      /**\n       * FIXME: we could make this fastter by caching some stuff,\n       * or at least soft the events by screen\n       */\n      let mouseData = this.mouseData.filter((m) => m.screen === screen.id);\n      let data = this.computeMouseDistribution(mouseData, this.sourceModel);\n      if (data[screen.id]) {\n        let d = data[screen.id];\n        this.draw(ctx, d.values, d.max, screen.w, screen.h);\n      }\n    },\n\n    _render_HeatmapClick(screenEvents, screen, ctx, div) {\n      this.logger.log(2, \"_render_HeatmapClick\", \"entry > \");\n\n      var numberOfClicks = -1;\n      if (this.analyticParams) {\n        numberOfClicks = this.analyticParams.numberOfClicks;\n      }\n\n      if (numberOfClicks === \"screenClicks\") {\n\n        let screenClicks = this.getScreenClicksOnBackground();\n        screenClicks = screenClicks.as_array();\n        this._render_pixel_screen_heatmap(screenClicks, screen, ctx, div);\n\n      } else if (numberOfClicks === \"missedClicks\") {\n\n        let missedClicks = this.getMissedClicks();\n        this._render_pixel_screen_heatmap(missedClicks, screen, ctx, div);\n\n      } else if (numberOfClicks > 0) {\n\n        let firstNEvents = this.getFirstNClicksData(numberOfClicks);\n        this._render_pixel_screen_heatmap(firstNEvents, screen, ctx, div);\n\n      } else {\n\n        /**\n         * Ignore Hover events...\n         */\n        let filtered = this.getClickEvents(new DataFrame(this.events));\n        let actionEvents = filtered.as_array();\n        this._render_pixel_screen_heatmap(actionEvents, screen, ctx, div);\n        \n      }\n    },\n\n    _render_pixel_screen_heatmap(actionEvents, screen, ctx) {\n      if (screen.w <= 0 || screen.h <= 0) {\n        this.logger.error(\"_render_pixel_screen_heatmap\", \"Error > bad screen dimension: \" + screen.name);\n        return\n      }\n      try {\n        const events = [];\n        for (let i = 0; i < actionEvents.length; i++) {\n          const e = actionEvents[i];\n          const screenID = this.getEventScreenId(e);\n          if (screenID == screen.id) {\n            events.push(e);\n          }\n        }\n        const dist = this.computeClickDistribution(events, screen.w, screen.h);\n        this.draw(ctx, dist.values, dist.max, screen.w, screen.h);\n      } catch (err) {\n        this.logger.error(\"_render_pixel_screen_heatmap\", \"Error > \" + screen.name);\n      }\n  \n    },\n\n    _render_HeatmapScrollView(screenEvents, screen, ctx) {\n      this.logger.log(2, \"_render_HeatmapScrollView\", \"entry > \");\n\n      var dist = this.computeScrollVisibiltyDistribution(\n        screenEvents,\n        this.sourceModel.screenSize.h,\n        screen.h\n      );\n      this.drawSections(dist, ctx, screen.h, screen.w);\n    },\n\n    _render_HeatmapScrollTime(screenEvents, screen, ctx) {\n      this.logger.log(2, \"_render_HeatmapScrollTime\", \"entry > \");\n\n      var dist = this.computeScrollDurationDistrubtion(\n        screenEvents,\n        this.sourceModel.screenSize.h,\n        screen.h\n      );\n      this.drawSections(dist, ctx, screen.h, screen.w);\n    },\n\n    _render_HeatmapViews(screenEvents, screen, ctx) {\n      this.logger.log(2, \"HeatmapViews\", \"entry > \");\n\n      if (screen.style.overlay) {\n        let screenViews = this.getOverlayViews();\n        let count = screenViews.counts[screen.id];\n        if (!count) {\n          count = 0;\n        }\n\n        ctx.globalAlpha = 0.4;\n        let color = this.mixColor(count / screenViews.total);\n        ctx.fillStyle = color;\n        ctx.fillRect(0, 0, screen.w, screen.h);\n      } else {\n        let screenViews = this.getScreenViews();\n        let count = screenViews.counts[screen.id];\n        if (!count) {\n          count = 0;\n        }\n\n        ctx.globalAlpha = 0.4;\n        let color = this.mixColor(count / screenViews.total);\n        ctx.fillStyle = color;\n        ctx.fillRect(0, 0, screen.w, screen.h);\n      }\n    },\n\n    _render_HeatmapDwelTime(screenEvents, screen, ctx) {\n      this.logger.log(2, \"HeatmapDwelTime\", \"entry > \");\n\n      if (screen.style.overlay) {\n        let times = this.getOverlayDwellTime();\n        let time = times.times[screen.id];\n        if (!time) {\n          time = 0;\n        }\n        ctx.globalAlpha = 0.4;\n        let color = this.mixColor(time / times.total);\n        ctx.fillStyle = color;\n        ctx.fillRect(0, 0, screen.w, screen.h);\n      } else {\n        let times = this.getScreenDwellTime();\n        let time = times.times[screen.id];\n        if (!time) {\n          time = 0;\n        }\n        ctx.globalAlpha = 0.4;\n        let color = this.mixColor(time / times.total);\n        ctx.fillStyle = color;\n        ctx.fillRect(0, 0, screen.w, screen.h);\n      }\n    },\n\n   \n\n    drawDurationLine (session, line, defaultColor, maxDuration) {\n      for (let i = 0; i < line.length-1; i++) {\n        let start = line[i]\n        let end = line[i+1]\n        let p = end.duration / maxDuration\n        let width = Math.round(p * 6) + 2\n        let color = defaultColor\n        if (!defaultColor) {\n          //color = this.mixColor(Math.min(1, p))\n        }\n        this.drawStraightAnalyticLine(session,[start, end], color, width, this.taskLineOpacity);\n      }\n    },\n\n\n\n    /**********************************************************************\n     * Gesture\n     **********************************************************************/\n\n    _render_global_Gesture() {\n      this.logger.log(0, \"_render_global_Gesture\", \"entry > \");\n\n      var gestures = this.getGestures();\n      var db = new DomBuilder();\n\n      for (var i = 0; i < gestures.length; i++) {\n        var e = gestures[i];\n        var gesture = e.gesture;\n\n        var screenID = this.getEventScreenId(e);\n        var screen = this.sourceModel.screens[screenID];\n        if (screen && gesture) {\n          var line = [];\n\n          var start = e.gesture.start;\n          var end = e.gesture.end;\n          if (start && end) {\n            var x = start.x * screen.w + screen.x;\n            var y = start.y * screen.h + screen.y;\n            line.push({ x: x, y: y, d: \"right\" });\n\n            this._renderGestureStart(x, y, this.analyticParams.color, db);\n\n            x = end.x * screen.w + screen.x;\n            y = end.y * screen.h + screen.y;\n            line.push({ x: x, y: y, d: \"right\" });\n\n            var r = Math.max(1, Math.round(3 * this.zoom));\n            this.drawSVGLine(\"\", line, this.analyticParams.color, r, 1);\n          }\n        } else {\n          console.warn(\n            \"_render_global_Gesture()\",\n            \"Screen is not there\",\n            e.screen\n          );\n        }\n      }\n    },\n\n    _renderGestureStart(x, y, color, db) {\n      var cntr = db\n        .div(\"MatcAnalyticCanvasEventCntr\")\n        .build(this.widgetContainer);\n      cntr.style.left = Math.round(x) + \"px\";\n      cntr.style.top = Math.round(y) + \"px\";\n\n      var div = db\n        .div(\"MatcAnalyticCanvasEvent MatcAnalyticCanvasEvent\")\n        .build(cntr);\n      var r = Math.max(5, Math.round(15 * this.zoom));\n      div.style.width = r + \"px\";\n      div.style.height = r + \"px\";\n      div.style.top = -1 * Math.round(r / 2) + \"px\";\n      div.style.left = -1 * Math.round(r / 2) + \"px\";\n      div.style.backgroundColor = color;\n      return div;\n    },\n\n\n    cleanUpAnalytics() {\n\t\t\tthis.cleanUpAnalyticLines()\n\n\t\t\tthis.cleanUpNode(this.widgetContainer)\n      this.analyticsDivs = {};\n    },\n\n   \n\n    /**********************************************************************\n     * DI\n     **********************************************************************/\n\n    setController(c) {\n      this.logger.log(2, \"setController\", \"enter\");\n      this.controller = c;\n      c.setCanvas(this);\n    },\n\n    getController() {\n      if (this._controllerCallback) {\n        this[this._controllerCallback]();\n      }\n      return this.controller;\n    },\n\n    setControllerCallback(c) {\n      this._controllerCallback = c;\n    },\n\n    setModelFactory(f) {\n      this.logger.log(3, \"setModelFactory\", \"enter\");\n      this.factory = f;\n    },\n\n    setRenderFactory(f) {\n      this.logger.log(3, \"setRenderFactory\", \"enter\");\n      this.renderFactory = f;\n    },\n\n    setModel(model) {\n      this.sourceModel = model;\n      this.grid = this.sourceModel.grid;\n      this.loadComments();\n    },\n\n    setEvents(events) {\n      this.logger.log(1, \"setEvents\", \"enter > # \" + events.length);\n      var analytics = new Analytics();\n      this.events = analytics.nornalizeContainerChildEvents(events);\n      this.df = new DataFrame(events);\n      this.df.sortBy(\"time\");\n      this.fixGestures(events);\n    },\n\n    setAnnotation(a) {\n      this.logger.log(2, \"setAnnotation\", \"enter > # \");\n      this.annotation = a;\n    },\n\n    setTest(t) {\n      this.logger.log(2, \"setTest\", \"enter > # \");\n      this.testSettings = t;\n    },\n\n    setAnalyticMode(mode, params) {\n      this.logger.log(2, \"setAnalyticMode\", \"entry > mode: \" + mode);\n      this.analyticMode = mode;\n      this.analyticParams = params;\n      this.rerender();\n\n      if (this.analyticCSS) {\n        css.remove(this.domNode, this.analyticCSS);\n      }\n\n      this.analyticCSS = mode;\n      css.add(this.domNode, this.analyticCSS);\n    },\n\n    setUser(u) {\n      this.user = u;\n    },\n\n    setMode(mode, forceRender) {\n      this.logger.log( 2, \"setMode\", \"enter > \" + mode + \" != \" + this.mode + \" > \" + forceRender);\n      if (mode != this.mode) {\n        this.mode = mode;\n        if (this.toolbar) {\n          this.toolbar.setMode(mode);\n        }\n        this.rerender();\n      } else if (forceRender) {\n        this.rerender();\n      }\n    },\n\n    /***************************************************************************\n     * Keyboard handling\n     ***************************************************************************/\n\n    onKeyPress(e) {\n      this._currentKeyEvent = e;\n\n      if (this.state == \"simulate\" || this.state == \"dialog\") {\n        return;\n      }\n\n      var target = e.target;\n      if (css.contains(target, \"MatcIgnoreOnKeyPress\")) {\n        return;\n      }\n\n      /**\n       * The keycode is differently in every browser!\n       */\n      var k = e.keyCode ? e.keyCode : e.which;\n\n      if (k == 32) {\n        // space\n\n        if (!this._inlineEditStarted) {\n          this.stopEvent(e);\n          if(this.getMode() != \"move\"){\n              this.setMode(\"move\");\n              this.showHint(\"Move the mouse to move canvas...\");\n              this.onDragStart(this.container, \"container\", \"onCanvasDnDStart\", \"onCanvasDnDMove\", \"onCanvasDnDEnd\", null, this._lastMouseMoveEvent, true);\n            }\n        }\n\n        /**\n         * Arrow dispatch...\n         */\n      } else if (k == 37) {\n        this.onArrowLeft();\n      } else if (k == 39) {\n        this.onArrowRight();\n      } else if (k == 40) {\n        this.onArrowDown();\n      } else if (k == 38) {\n        this.onArrowUp();\n      } else if (k == 171 || k == 187) {\n        // +\n\n        if (!this._inlineEditStarted) {\n          this.onClickPlus();\n          this.stopEvent(e);\n        }\n      } else if (k == 173 || k == 189) {\n        //-\n\n        if (!this._inlineEditStarted) {\n          this.onClickMinus();\n          this.stopEvent(e);\n        }\n      }\n    },\n\n    getMode (){\n\t\t\treturn this.mode;\n\t\t},\n\n    onKeyUp(e) {\n      var k = e.keyCode ? e.keyCode : e.which;\n      if (k == 32) {\n        this.onDragEnd(this._lastMouseMoveEvent);\n        this.setMode(\"view\");\n      }\n\n      delete this._currentKeyEvent;\n    },\n\n    /***************************************************************************\n     * Helper Functons\n     ***************************************************************************/\n\n    initMouseTracker() {\n      this.own(on(win.body(),\"mousemove\", lang.hitch(this,\"onMouseMove\")));\n    },\n\n    onMouseMove(e) {\n      var pos2 = this.getCanvasMousePosition(e, true);\n      //this._debugMouseLabel.innerHTML = \"[\" + Math.round(pos2.x) +\" , \"+ Math.round(pos2.y) + \"]\";\n      this._lastMousePos = pos2;\n      this._lastMouseMoveEvent = e;\n    },\n\n    destroy() {\n      this.cleanUp();\n    },\n\n    logPageView(url) {\n      this.logger.log(4, \"logPageView\", \"enter\", url);\n    },\n  },\n  mounted() {},\n};\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticCanvas.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticCanvas.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./AnalyticCanvas.vue?vue&type=template&id=61931d7f&\"\nimport script from \"./AnalyticCanvas.vue?vue&type=script&lang=js&\"\nexport * from \"./AnalyticCanvas.vue?vue&type=script&lang=js&\"\nimport style0 from \"./AnalyticCanvas.vue?vue&type=style&index=0&lang=css&\"\nimport style1 from \"./AnalyticCanvas.vue?vue&type=style&index=1&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import lang from 'dojo/_base/lang'\nimport win from 'dojo/win'\nimport Logger from 'common/Logger'\nimport Core from 'core/Core'\nimport CoreUtil from 'core/CoreUtil'\n\nexport default class AnalyticController extends Core{\n\n\tconstructor () {\n\t\tsuper()\n\t\tthis.logger = new Logger(\"AnalyticController\");\n\t\tthis.logger.log(2,\"constructor\", \"exit\");\n\t}\n\n\tsetModelService (s) {\n\t\tthis.modelService = s\n\t}\n\n\tsetCanvas(c){\n\t\tthis.logger.log(3,\"setCanvas\", \"entry\");\n\t\tthis._canvas = c;\n\t}\n\n\tsetToolbar(t){\n\t\tthis.logger.log(3,\"setToolbar\", \"entry\");\n\t\tthis.toolbar = t;\n\t}\n\n\tsetModelFactory(f){\n\t\tthis.logger.log(3,\"setModelFactory\", \"entry\");\n\t\tthis.factory = f;\n\t}\n\n\tsetModel(m, screenID){\n\n\t\tthis.logger.log(2,\"setModel\", \"entry > \" + screenID);\n\t\tthis.model = m;\n\t\tthis.inheritedModel = this.createInheritedModel(m);\n\t\tthis.inheritedModel = Core.addContainerChildrenToModel(this.inheritedModel);\n\t\tthis.oldModel = lang.clone(m);\n\t\tthis.render(screenID);\n\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.setModel(m);\n\t\t} else {\n\t\t\tconsole.debug(\"No toolbar in controller!\");\n\t\t}\n\n\t\tif (this._canvas) {\n\t\t\tthis._canvas.setFonts(m.fonts)\n\t\t}\n\n\t\tthis.logger.log(3,\"setModel\", \"entry > \" + screenID);\n\t}\n\n\tsetMode(mode){\n\t\tthis.logger.log(0,\"setMode\", \"entry > \" + mode);\n\t\tthis.toolbar.setMode(mode);\n\t\tthis._canvas.setMode(mode);\n\t}\n\n\tsetSinglePage(enabled){\n\t\tthis.logger.log(0,\"setSinglePage\", \"entry > \" + enabled);\n\t}\n\n\tgetZoomFactor(){\n\t\tif(this._canvas){\n\t\t\treturn this._canvas.getZoomFactor();\n\t\t}\n\t\treturn 1;\n\t}\n\n\t/**********************************************************************\n\t * Canvas Delegates\n\t **********************************************************************/\n\n\trender(screenID){\n\t\tthis.logger.log(2,\"render\", \"enter > screenID : \" + screenID);\n\n\t\tif(this._canvas){\n\t\t\t/**\n\t\t\t * set correct zoom factor\n\t\t\t */\n\t\t\t//this._zoomToScreen(screenID);\n\n\t\t\t/**\n\t\t\t * resize the model\n\t\t\t */\n\t\t\tlet inheritedModel = CoreUtil.createInheritedModel(this.model)\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tthis._canvas.render(inheritedModel);\n\t\t\t\tif(screenID){\n\t\t\t\t\tthis._canvas.moveToScreen(screenID);\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\n\t}\n\n\t_requestRendering(screenID){\n\t\tif (this._zoomedModel){\n\t\t\tthis._canvas.render(this._zoomedModel);\n\t\t\tif(screenID){\n\t\t\t\tthis._canvas.moveToScreen(screenID);\n\t\t\t}\n\t\t}\n\t\tthis._zoomedModel = null;\n\t}\n\n\t_zoomToScreen(screenID){\n\t\tif (screenID && this.model.screens[screenID]){\n\t\t\t/**\n\t\t\t * here we make sure the selected screen fits in the\n\t\t\t * browser window. We simply find the smallest possible\n\t\t\t * zoom factor and subtract 0.2 to make sure it fits in\n\t\t\t * browser\n\t\t\t */\n\t\t\tvar screen = this.model.screens[screenID];\n\t\t\tlet winBox = win.getBox();\n\t\t\tlet x =  winBox.w / screen.w;\n\t\t\tlet y =  winBox.h / screen.h;\n\t\t\tvar zoom = (Math.floor( Math.min(x,y) * 10) / 10) -0.2 ;\n\t\t\tthis._canvas.setZoom(zoom);\n\n\t\t}\n\t}\n\n\t/**********************************************************************\n\t * Selection methods\n\t **********************************************************************/\n\n\tonWidgetSelected(id){\n\t\tthis.logger.log(0,\"onWidgetSelected\", \"enter > \"+ id);\n\t\tvar widget = this.inheritedModel.widgets[id];\n\t\tif(widget){\n\t\t\tif(this.toolbar){\n\t\t\t\tthis.toolbar.onWidgetSelected(widget);\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(\"onWidgetSelected() > No width with id\", id);\n\t\t}\n\t}\n\n\n\tonScreenSelected(id){\n\t\tthis.logger.log(1,\"onScreenSelected\", \"enter > \"+ id);\n\t\tvar screen = this.model.screens[id];\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.onScreenSelected(screen);\n\t\t}\n\t}\n\n\tonCanvasSelected(){\n\t\tthis.logger.log(1,\"onCanvasSelected\", \"enter \");\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.onCanvasSelected();\n\t\t}\n\t}\n\n\tonLineSelected(id){\n\t\tthis.logger.log(1,\"onLineSelected\", \"enter > \" + id);\n\t\tvar line = this.model.lines[id];\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.onLineSelected(line);\n\t\t}\n\t}\n\n\tonMultiSelect(selection){\n\t\tthis.logger.log(1,\"onMultiSelect\", \"enter > \");\n\t\tif(this.toolbar){\n\t\t\t/**\n\t\t\t * TODO: get all the model elements\n\t\t\t */\n\t\t\tthis.toolbar.onMultiSelect(selection);\n\t\t}\n\t}\n\n\tonGroupSelected(id){\n\t\tthis.logger.log(1,\"onGroupSelected\", \"enter > \" + id);\n\t\tif(this.model.groups && this.model.groups[id]){\n\t\t\tif(this.toolbar){\n\t\t\t\tvar group = this.model.groups[id];\n\t\t\t\tthis.toolbar.onGroupSelect(group);\n\t\t\t}\n\t\t}\n\t}\n\n\tunSelect(){\n\t\tif(this._canvas){\n\t\t\tthis._canvas.unSelect();\n\t\t}\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.cleanUp();\n\t\t}\n\t}\n\n\n\tshowSuccess(msg){\n\t\tif(this._canvas){\n\t\t\tthis._canvas.showSuccess(msg);\n\t\t}\n\t}\n\n\tshowError(msg){\n\t\tif(this._canvas){\n\t\t\tthis._canvas.showError(msg);\n\t\t}\n\t}\n}","<template>\n  <div class=\"MatcCanvasPage\" id=\"CanvasNode\">\n      <AnalyticToolbar ref=\"toolbar\" />\n      <AnalyticCanvas ref=\"canvas\" />\n  </div>\n</template>\n\n<style lang=\"scss\">\n  @import \"../../style/matc.scss\";\n</style>\n<style lang=\"sass\">\n  @import \"../../style/bulma.sass\"\n</style>\n\n<script>\nimport DojoWidget from \"dojo/DojoWidget\";\nimport css from 'dojo/css'\nimport win from 'dojo/win'\n\nimport ModelFactory from 'core/ModelFactory'\nimport RenderFactory from 'core/RenderFactory'\nimport lang from 'dojo/_base/lang'\nimport on from 'dojo/on'\nimport Services from 'services/Services'\n\nimport AnalyticToolbar from 'canvas/analytic/AnalyticToolbar'\nimport AnalyticCanvas from 'canvas/analytic/AnalyticCanvas'\nimport AnalyticController from 'canvas/analytic/AnalyticController'\n\nimport Logger from \"common/Logger\";\n\nexport default {\n  name: \"Design\",\n  mixins: [DojoWidget],\n  data: function() {\n    return {\n    };\n  },\n  components: {\n      'AnalyticToolbar': AnalyticToolbar,\n      'AnalyticCanvas': AnalyticCanvas\n  },\n  computed: {\n    isPublic () {\n      return this.$route.meta && this.$route.meta.isPublic\n    }\n  },\n  methods: {\n    loadData () {\n      let id = this.$route.params.id\n      this.logger.log(0, 'loadData', 'enter', id)\n      Promise.all([\n        this.modelService.findApp(id),\n        this.modelService.findTest(id),\n        this.modelService.findEvents(id),\n        this.modelService.findSessionAnnotations(id),\n        this.modelService.findInvitation(id)\n      ]).then(values => {\n        let invitations = values[4];\n        var temp = {};\n        for (var key in invitations) {\n          temp[invitations[key]] = key;\n        }\n        let hash = temp[1];\n        this.buildCanvas(values[0], values[1], values[2], values[3], hash)\n      })\n    },\n    buildCanvas (model, test, events, annotation, hash) {\n      this.logger.log(-1, 'buildCanvas', 'enter', hash)\n\n      let canvas = this.$refs.canvas\n      let toolbar = this.$refs.toolbar\n\n      let controller = new AnalyticController()\n      let service = Services.getModelService()\n\n      /**\n       * model factory\n       */\n      var factory = new ModelFactory();\n      factory.setModel(model);\n\n      /**\n       * render factory\n       */\n      var renderFactory = new RenderFactory();\n      renderFactory.setModel(model);\n      renderFactory.setHash(hash)\n\n      /**\n       * Dependency injection\n       */\n      controller.setModelService(service)\n      controller.setToolbar(toolbar);\n      controller.setModelFactory(factory);\n\n\n      toolbar.setController(controller);\n      toolbar.setCanvas(canvas);\n      toolbar.setUser(this.user);\n      toolbar.setModelFactory(factory);\n      toolbar.setModelService(service)\n      toolbar.setEvents(events);\n      toolbar.setAnnotation(annotation);\n      toolbar.setTest(test);\n      toolbar.setPublic(this.isPublic)\n\n      canvas.setController(controller);\n      canvas.setToolbar(toolbar);\n      canvas.setRenderFactory(renderFactory);\n      canvas.setModelFactory(factory);\n      canvas.setCommentService(Services.getCommentService())\n      canvas.setUser(this.user)\n      canvas.setEvents(events);\n      canvas.setAnnotation(annotation);\n      canvas.setTest(test);\n\n      // wire shit together\n      this.tempOwn(on(toolbar, \"newComment\", lang.hitch(canvas, \"addComment\")));\n\n      var startScreen = null;\n      for(var screenID in model.screens){\n        var screen = model.screens[screenID];\n        if (screen.props && screen.props.start){\n            startScreen = screenID;\n            break;\n        }\n      }\n      /**\n       * controller will render screen\n       */\n      controller.setModel(model, startScreen);\n    }\n  },\n  async mounted() {\n    this.logger = new Logger(\"Analyze\");\n    css.add(win.body(), 'MatcVisualEditor')\n    this.user = await Services.getUserService().load()\n    this.modelService = Services.getModelService(this.$route)\n    this.loadData()\n    this.logger.log(3, 'mounted', 'exit')\n  }\n};\n</script>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Analyze.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Analyze.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Analyze.vue?vue&type=template&id=c3a781c2&\"\nimport script from \"./Analyze.vue?vue&type=script&lang=js&\"\nexport * from \"./Analyze.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Analyze.vue?vue&type=style&index=0&lang=scss&\"\nimport style1 from \"./Analyze.vue?vue&type=style&index=1&lang=sass&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcCanvasPage\",attrs:{\"id\":\"CanvasNode\"},on:{\"wheel\":_vm.onMouseWheel}},[_c('Toolbar',{ref:\"toolbar\",attrs:{\"pub\":_vm.pub}}),_c('Canvas',{ref:\"canvas\"})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import Logger from '../../core/Logger'\nimport Services from '../../services/Services'\n\nexport default class CollabSession {\n\n  constructor (user) {\n    this.user = user\n    this.collabUsers = []\n  }\n\n  initWebsocket(model, canvas, controller, toolbar) {\n    Logger.log(3, \"CollabSession.initWebsocket()\", \"enter\");\n    try {\n      let user = this.user\n      let websocket = Services.getWebSocketService(model.id, user.token, user)\n      if (websocket) {\n        websocket.onMessage(msg => this.dispatchWebSocketMessage(canvas, controller, toolbar, user, msg))\n        websocket.init(success => {\n          if (success) {\n            this.sendHello()\n          }\n          canvas.setMouseListener(pos => {\n            this.sendMouse(pos)\n          })\n          controller.setModelChangeListener(changeEvent => {\n            this.sendChange(changeEvent)\n          })\n\n          // FIXME: all also the command stack??\n        })\n\n        this.websocket = websocket\n      } else {\n        Logger.log(1, \"CollabSession.initWebsocket()\", \"exit > No session created\");\n      }\n    } catch (err) {\n      Logger.error('CollabSession.initWebsocket()', \"Cannot init WebSocket\", err)\n    }\n  }\n\n  hasOtherUsers () {\n    let others = this.collabUsers.find(u => u.id !== this.user.id)\n    return others !== undefined\n  }\n\n\n  sendChange (changeEvent) {\n    Logger.log(1, \"CollabSession.sendChange()\", \"enter\", changeEvent);\n    /**\n     * We do not want to overload our websocket server,\n     * so we just send events if there is another user.\n     */\n    if (this.websocket && this.hasOtherUsers()) {\n      Logger.log(2, \"CollabSession.sendChange()\", \"send\", changeEvent);\n      this.websocket.send({type: 'change', changeEvent: changeEvent})\n    } else {\n      Logger.log(2, \"CollabSession.sendChange()\", \"NOT SEND\");\n    }\n  }\n\n  sendMouse (pos) {\n    /**\n     * We do not want to overload our websocket server,\n     * so we just send events if there is another user.\n     */\n    if (this.websocket && this.hasOtherUsers()) {\n      //Logger.log(-5, \"CollabSession.sendMouse()\", \"enter\");\n      this.websocket.send({type: 'mouse', pos: pos})\n    }\n  }\n\n  sendBye () {\n    Logger.log(-1, \"CollabSession.sendBye()\", \"enter\");\n    if (this.websocket) {\n      this.websocket.send({type: 'bye'})\n    }\n  }\n\n  sendHello () {\n    Logger.log(2, \"CollabSession.sendHello()\", \"enter\");\n    if (this.websocket) {\n      this.websocket.send({type: 'hello'})\n    }\n  }\n\n  sendImHere () {\n    Logger.log(2, \"CollabSession.sendImHere()\", \"enter\");\n    if (this.websocket) {\n      this.websocket.send({type: 'imhere'})\n    }\n  }\n\n  dispatchWebSocketMessage (canvas, controller, toolbar, user, msg) {\n\n    if (msg.type === 'hello') {\n        Logger.log(2, \"CollabSession.dispatchWebSocketMessage()\", \"hello\");\n        toolbar.addCollabUser(msg.user)\n        canvas.addCollabUser(msg.user)\n        this.addCollabUser(msg.user)\n        this.sendImHere()\n    }\n    if (msg.type === 'imhere') {\n      Logger.log(2, \"CollabSession.dispatchWebSocketMessage()\", \"imhere\");\n      toolbar.addCollabUser(msg.user)\n      canvas.addCollabUser(msg.user)\n      this.addCollabUser(msg.user)\n    }\n    if (msg.type === 'bye') {\n      Logger.log(2, \"CollabSession.dispatchWebSocketMessage()\", \"bye\");\n      toolbar.removeCollabUser(msg.user)\n      canvas.removeCollabUser(msg.user)\n      this.removeCollabUser(msg.user)\n    }\n    if (msg.type === 'mouse') {\n      //Logger.log(2, \"CollabSession.dispatchWebSocketMessage()\", \"mouse\");\n      canvas.setCollabMouse(msg.user, msg.pos)\n    }\n\n    if (msg.type === 'change') {\n      Logger.log(2, \"CollabSession.dispatchWebSocketMessage()\", \"change\");\n      controller.collabRecieveChanges(msg.user, msg.changeEvent)\n    }\n  }\n\n\n  addCollabUser (user) {\n    Logger.log(1, \"CollabSession.addCollabUser()\", user);\n    const found = this.collabUsers.find(u => u.id === user.id)\n    if (!found) {\n      this.collabUsers.push(user)\n    }\n  }\n\n  removeCollabUser (user) {\n    Logger.log(1, \"CollabSession.removeCollabUser()\", user);\n    this.collabUsers = this.collabUsers.filter(u => u.id !== user.id)\n  }\n\n  close () {\n    Logger.log(1, \"CollabSession.dispatchWebSocketMessage()\", \"close\");\n    if (this.websocket) {\n      this.websocket.close()\n    }\n  }\n}","<template>\n  <div class=\"MatcCanvasPage\" id=\"CanvasNode\" @wheel=\"onMouseWheel\">\n    <Toolbar ref=\"toolbar\" :pub=\"pub\" />\n    <Canvas ref=\"canvas\" />\n  </div>\n</template>\n\n<style lang=\"scss\">\n  @import \"../../style/matc.scss\";\n  @import \"../../style/canvas/all.scss\";\n  @import '../../style/toolbar/all.scss';\n</style>\n<style lang=\"sass\">\n  @import \"../../style/bulma.sass\"\n</style>\n\n<script>\nimport DojoWidget from \"dojo/DojoWidget\";\nimport css from \"dojo/css\";\nimport win from \"dojo/win\";\nimport Toolbar from \"canvas/toolbar/Toolbar\";\nimport Canvas from \"canvas/Canvas\";\nimport Controller from \"canvas/controller/Controller\";\nimport ModelFactory from \"core/ModelFactory\";\nimport RenderFactory from \"core/RenderFactory\";\nimport lang from \"dojo/_base/lang\";\nimport on from \"dojo/on\";\nimport Services from \"services/Services\";\nimport Logger from \"common/Logger\";\nimport CollabSession from '../../canvas/controller/CollabSession'\n\nexport default {\n  name: \"Design\",\n  mixins: [DojoWidget],\n  data: function() {\n    return {};\n  },\n  components: {\n    Toolbar: Toolbar,\n    Canvas: Canvas\n  },\n  computed: {\n    pub() {\n      return this.$route.meta && this.$route.meta.isPublic;\n    },\n    mode() {\n      if (this.pub) {\n        return \"public\";\n      }\n      return \"private\";\n    }\n  },\n  methods: {\n    onMouseWheel (e) {\n      /**\n       * Cancel all left and right swipes to surpress back navigation\n       */\n      if (e && Math.abs(e.deltaX) > 50 ) {\n        this.logger.log(-1, \"onMouseWheel\", \"cancel\");\n        e.preventDefault();\n      }\n    },\n    loadData() {\n      let id = this.$route.params.id;\n      this.logger.log(3, \"loadData\", \"enter\", id);\n      Promise.all([\n        this.modelService.findApp(id),\n        this.modelService.getCommands(id),\n        this.modelService.findInvitation(id)\n      ]).then(values => {\n        let invitations = values[2];\n        var temp = {};\n        for (var key in invitations) {\n          temp[invitations[key]] = key;\n        }\n        let hash = temp[1];\n        this.buildCanvas(values[0], values[1], hash);\n      });\n    },\n    buildCanvas(model, stack, hash) {\n      this.logger.log(3, \"buildCanvas\", \"enter\");\n      let canvas = this.$refs.canvas;\n      let toolbar = this.$refs.toolbar;\n      let controller = new Controller();\n      let service = this.modelService;\n\n      /**\n       * model factory\n       */\n      var factory = new ModelFactory();\n      factory.setModel(model);\n\n      /**\n       * render factory\n       */\n      var renderFactory = new RenderFactory();\n      renderFactory.setModel(model);\n      renderFactory.setHash(hash);\n\n      /**\n       * Dependency injection\n       */\n      controller.setModelService(service);\n      controller.setToolbar(toolbar);\n      controller.setModelFactory(factory);\n      if (this.pub) {\n        controller.setPublic(true);\n        canvas.setPublic(true);\n        toolbar.setPublic(true);\n      }\n\n      toolbar.setController(controller);\n      toolbar.setCanvas(canvas);\n      toolbar.setUser(this.user);\n      toolbar.setModelFactory(factory);\n      toolbar.setContext(this.context);\n      toolbar.setHash(hash);\n\n      canvas.setController(controller);\n      canvas.setToolbar(toolbar);\n      canvas.setRenderFactory(renderFactory);\n      canvas.setModelFactory(factory);\n      canvas.setModelService(service);\n      canvas.setCommentService(Services.getCommentService());\n      canvas.setUser(this.user);\n\n      // wire shit together\n      this.tempOwn(on(toolbar, \"newScreen\", lang.hitch(canvas, \"addScreen\"))); // deprecated\n      this.tempOwn(on(toolbar, \"newWidget\", lang.hitch(canvas, \"addWidget\"))); // deprecated\n\n      this.tempOwn(on(toolbar, \"newLine\", lang.hitch(canvas, \"addLine\")));\n      this.tempOwn(on(toolbar, \"newComment\", lang.hitch(canvas, \"addComment\")));\n\n      this.tempOwn(on(toolbar, \"newTemplatedWidget\", lang.hitch(canvas, \"addTemplatedWidget\")));\n      this.tempOwn(on(toolbar, \"newTemplatedScreen\", lang.hitch(canvas, \"addTemplatedScreen\")));\n      this.tempOwn(on(toolbar, \"newTemplatedGroup\", lang.hitch(canvas, \"addTemplatedGroup\")));\n\n      this.tempOwn(on(toolbar, \"newThemedScreen\", lang.hitch(canvas, \"addThemedScreen\")));\n      this.tempOwn(on(toolbar, \"newThemedGroup\", lang.hitch(canvas, \"addThemedGroup\")));\n      this.tempOwn(on(toolbar, \"newThemedWidget\", lang.hitch(canvas, \"addThemedWidget\")));\n      this.tempOwn(on(toolbar, \"newMultiThemedScreen\", lang.hitch(canvas, \"addMultiThemedScreens\")));\n      this.tempOwn(on(toolbar, \"newThemedScreenAndWidget\", lang.hitch(canvas, \"addThemedScreenAndWidgets\")));\n      this.tempOwn(on(toolbar, \"newImportApp\", lang.hitch(canvas, \"addImportedApp\")));\n\n      this.tempOwn(on(toolbar, \"onNewLogicObject\", lang.hitch(canvas, \"addLogicGroup\")));\n      this.tempOwn(on(toolbar, \"onNewRestObject\", lang.hitch(canvas, \"addRestObject\")));\n      this.tempOwn(on(toolbar, \"onNewScriptObject\", lang.hitch(canvas, \"addScriptObject\")));\n      this.tempOwn(on(toolbar, \"onNewSVG\", lang.hitch(canvas, \"addSVG\")))\n      this.tempOwn(on(toolbar, \"onEditSVG\", lang.hitch(canvas, \"openSVGEditor\")))\n      \n\n      /**\n       * last set the model\n       */\n      controller.setCommandStack(stack);\n\n      /**\n       * controller will render screen\n       */\n      controller.setModel(model, this.$route.params.sid);\n\n      /**\n       * Init layer list\n       */\n      canvas.initLayer();\n\n      if (!this.pub && this.user.role !== 'guest') {\n        this.collabSession = new CollabSession(this.user)\n        this.collabSession.initWebsocket(model, canvas, controller, toolbar)\n        window.onbeforeunload = () => {this.collabSession.sendBye()}\n      }\n    },\n\n  },\n  beforeDestroy () {\n    if (this.collabSession) {\n      this.collabSession.sendBye()\n      this.collabSession.close()\n    }\n  },\n  async mounted() {\n    this.logger = new Logger(\"Design\");\n    css.add(win.body(), \"MatcVisualEditor\");\n    this.user = await Services.getUserService().load();\n    this.modelService = Services.getModelService(this.$route);\n    this.loadData();\n    this.logger.log(3, \"mounted\", \"exit\");\n  }\n};\n</script>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Design.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Design.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Design.vue?vue&type=template&id=4104a4a8&\"\nimport script from \"./Design.vue?vue&type=script&lang=js&\"\nexport * from \"./Design.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Design.vue?vue&type=style&index=0&lang=scss&\"\nimport style1 from \"./Design.vue?vue&type=style&index=1&lang=sass&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcCanvasPage MatcShare\",attrs:{\"id\":\"CanvasNode\"}},[_c('ShareCanvas',{ref:\"canvas\"})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcCanvas MatcAnalyticCanvas\"},[_c('div',{staticClass:\"MatcCanvasFrame\",attrs:{\"data-dojo-attach-point\":\"frame\"}},[_c('div',{staticClass:\"MatcCanvasContainer MatcCanvasZoomable \",attrs:{\"data-dojo-attach-point\":\"container\"}},[_c('div',{staticClass:\"MatcCanvasContainer \",attrs:{\"data-dojo-attach-point\":\"zoomContainer\"}},[_c('div',{staticClass:\"MatcCanvasLayer\",attrs:{\"data-dojo-attach-point\":\"screenContainer\"}}),_c('div',{staticClass:\"MatcCanvasLayer\",attrs:{\"data-dojo-attach-point\":\"widgetContainer\"}})]),_c('div',{staticClass:\"MatcDnDLayer\",attrs:{\"data-dojo-attach-point\":\"dndContainer\"}})])]),_c('div',{staticClass:\"MatcCanvasScrollBar MatcCanvasScrollBarRight\",attrs:{\"data-dojo-attach-point\":\"scrollRight\"}},[_c('div',{staticClass:\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrRight\",attrs:{\"data-dojo-attach-point\":\"scrollRightCntr\"}},[_c('div',{staticClass:\"MatchCanvasScrollHandle\",attrs:{\"data-dojo-attach-point\":\"scrollRightHandler\"}})])]),_c('div',{staticClass:\"MatcCanvasScrollBar MatcCanvasScrollBarBottom\",attrs:{\"data-dojo-attach-point\":\"scrollBottom\"}},[_c('div',{staticClass:\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrBottom\",attrs:{\"data-dojo-attach-point\":\"scrollBottomCntr\"}},[_c('div',{staticClass:\"MatchCanvasScrollHandle\",attrs:{\"data-dojo-attach-point\":\"scrollBottomHandler\"}})])]),_c('div',{staticClass:\"MatcMessage\",attrs:{\"data-dojo-attach-point\":\"message\"}})])}]\n\nexport { render, staticRenderFns }","\n<template>\n\t<div class=\"MatcCanvas MatcAnalyticCanvas\">\n\t\t<div class=\"MatcCanvasFrame\" data-dojo-attach-point=\"frame\">\n\t\t\t<div class=\"MatcCanvasContainer MatcCanvasZoomable \" data-dojo-attach-point=\"container\">\n\t\t\t\t<div class=\"MatcCanvasContainer \" data-dojo-attach-point=\"zoomContainer\">\n\t\t\t\t\t<div data-dojo-attach-point=\"screenContainer\" class=\"MatcCanvasLayer\"></div>\n\t\t\t\t\t<div data-dojo-attach-point=\"widgetContainer\" class=\"MatcCanvasLayer\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div data-dojo-attach-point=\"dndContainer\" class=\"MatcDnDLayer\"></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"MatcCanvasScrollBar MatcCanvasScrollBarRight\" data-dojo-attach-point=\"scrollRight\">\n\t\t\t<div class=\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrRight\" data-dojo-attach-point=\"scrollRightCntr\">\n\t\t\t\t<div class=\"MatchCanvasScrollHandle\" data-dojo-attach-point=\"scrollRightHandler\"></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"MatcCanvasScrollBar MatcCanvasScrollBarBottom\" data-dojo-attach-point=\"scrollBottom\">\n\t\t\t<div class=\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrBottom\" data-dojo-attach-point=\"scrollBottomCntr\">\n\t\t\t\t<div class=\"MatchCanvasScrollHandle\" data-dojo-attach-point=\"scrollBottomHandler\"></div>\n\t\t\t</div>\n\t\t</div>\n\n\n\t\t<div class=\"MatcMessage\" data-dojo-attach-point=\"message\">\n\t\t</div>\n\t</div>\n</template>\n<style lang=\"css\"></style>\n<style lang=\"scss\">\n@import \"../../style/matc.scss\";\n@import \"../../style/share.scss\";\n@import \"../../style/canvas/all.scss\";\n@import '../../style/toolbar/all.scss';\n</style>\n<script>\nimport DojoWidget from 'dojo/DojoWidget'\nimport css from 'dojo/css'\n\nimport Logger from 'common/Logger'\nimport on from 'dojo/on'\nimport lang from 'dojo/_base/lang'\n\nimport win from 'dojo/_base/win'\nimport topic from 'dojo/topic'\nimport domGeom from 'dojo/domGeom'\n\nimport DomBuilder from 'common/DomBuilder'\nimport Dialog from 'common/Dialog'\nimport ScrollContainer from 'common/ScrollContainer'\nimport _DragNDrop from 'common/_DragNDrop'\n\nimport Heat from 'dash/Heat'\nimport Render from 'canvas/Render'\nimport Lines from 'canvas/Lines'\nimport DnD from 'canvas/DnD'\nimport Add from 'canvas/Add'\nimport Select from 'canvas/Select'\nimport Distribute from 'canvas/Distribute'\nimport Tools from 'canvas/Tools'\nimport Zoom from 'canvas/Zoom'\nimport InlineEdit from 'canvas/InlineEdit'\nimport Scroll from 'canvas/Scroll'\nimport Upload from 'canvas/Upload'\nimport Comment from 'canvas/Comment'\n\nimport Simulator from 'core/Simulator'\nimport Util from 'core/Util'\nimport QR from 'core/QR'\n\nimport KeyBoard from \"canvas/KeyBoard\";\nimport Resize from \"canvas/Resize\";\nimport Replicate from \"canvas/Replicate\";\n\nimport DomUtil from 'core/FastDomUtil'\n\nexport default {\n\tname: 'ShareCanvas',\n\tmixins: [DojoWidget, _DragNDrop, Util, Render, Lines, DnD, Add, Select, Distribute,\n\t\tTools, Zoom, InlineEdit, Scroll, Upload, Comment, KeyBoard, Resize, Replicate, Heat],\n\tdata: function () {\n\t\treturn {\n\t\t\tmode: \"view\",\n\t\t\tzoom: 0.4,\n\t\t\tzoomLevelPos: 3,\n\t\t\tanalyticMode: \"HeatmapClick\",\n\t\t\tresizeEnabled: false,\n\t\t\trenderDND: true,\n\t\t\tdragNDropMinTimeSpan: 0,\n\t\t\twireInheritedWidgets: true,\n\t\t\ttaskLineOpacity: 1\n\t\t}\n\t},\n\tcomponents: {},\n\tmethods: {\n\n\t\tpostCreate() {\n\t\t\tthis.logger = new Logger(\"ShareCanvas\");\n\t\t\tthis.logger.log(2, \"postCreate\", \"entry\");\n\t\t\tthis.domUtil = new DomUtil()\n\n\t\t\tthis.initSize()\n\t\t\tthis.initWiring()\n\n\t\t\tthis.cache = {};\n\t\t\tthis.moveMode = \"classic\";\n\t\t\t/**\n\t\t\t * init container size and position\n\t\t\t */\n\t\t\tthis.canvasPos = {\n\t\t\t\tx: this.canvasStartX,\n\t\t\t\ty: this.canvasStartY,\n\t\t\t\tw: this.canvasFlowWidth,\n\t\t\t\th: this.canvasFlowHeight\n\t\t\t};\n\t\t\tthis.initContainerSize();\n\t\t\tthis.setContainerPos();\n\n\t\t\tthis.db = new DomBuilder();\n\n\n\t\t\t/**\n\t\t\t * Init remaining sub components\n\t\t\t */\n\t\t\tthis.initSelection()\n\t\t\tthis.initRender();\n\t\t\tthis.initZoom();\n\t\t\tthis.initScrollBars();\n\t\t\tthis.initComment();\n\t\t\tthis.initSettings();\n\t\t\tthis.initMouseTracker();\n\t\t\tthis.initButtons()\n\n\t\t\t/**\n\t\t\t * Init Listeners\n\t\t\t */\n\t\t\tthis.own(topic.subscribe(\"matc/toolbar/click\", lang.hitch(this, \"onToolbarClick\")));\n\t\t\tthis.own(on(win.body(), \"keydown\", lang.hitch(this, \"onKeyPress\")));\n\t\t\tthis.own(on(win.body(), \"keyup\", lang.hitch(this, \"onKeyUp\")));\n\n\t\t\tthis.logger.log(2, \"postCreate\", \"exit!!!\");\n\t\t},\n\n\t\tcloseSVGEditor() {\n\n\t\t},\n\n\t\tsetModelService(s) {\n\t\t\tthis.modelService = s\n\t\t},\n\n\t\tsetCommentService(s) {\n\t\t\tthis.commentService = s\n\t\t},\n\n\t\tsetPublic(isPublic) {\n\t\t\tthis.isPublic = isPublic;\n\t\t},\n\n\n\t\tinlineEditInit() {\n\t\t\tthis.logger.log(2, \"inlineEditInit\", \"enter\");\n\t\t},\n\n\t\tonZoomMinusClick() {\n\t\t\tlet z = Math.round((this.zoom - 0.1) * 10) / 10\n\t\t\tthis.setZoomFactor(z)\n\t\t},\n\n\t\tonZoomPlusClick() {\n\t\t\tlet z = Math.round((this.zoom + 0.1) * 10) / 10\n\t\t\tthis.setZoomFactor(z)\n\t\t},\n\n\t\tonTogggleLine() {\n\t\t\tthis.setViewLines(!this.renderLines)\n\t\t},\n\n\t\tsetBW(isBW) {\n\t\t\tthis.logger.log(-1, \"setBW\", \"enter > \" + isBW);\n\t\t\tif (isBW) {\n\t\t\t\tcss.add(this.container, \"MatcCanvasBW\");\n\t\t\t} else {\n\t\t\t\tcss.remove(this.container, \"MatcCanvasBW\");\n\t\t\t}\n\t\t},\n\n\t\tonChangeCanvasViewConfig() {\n\t\t},\n\n\t\tsetCanvasViewConfig(key, value) {\n\t\t\tthis.logger.log(-1, \"setCanvasViewConfig\", \"enter > \" + key, value);\n\t\t},\n\n\t\tsetHash(h) {\n\t\t\tthis.logger.log(-1, \"setHash\", \"entry > \", h);\n\t\t\tthis.hash = h;\n\t\t},\n\n\t\t/**********************************************************************\n\t\t * Button render\n\t\t **********************************************************************/\n\t\trenderLayerList() {\n\t\t\tthis.logger.log(1, \"renderLayerList\", \"entry > \");\n\t\t},\n\n\n\t\t/**********************************************************************\n\t\t * Button render\n\t\t **********************************************************************/\n\n\t\tinitButtons() {\n\n\n\t\t\tvar btn = this.db.div(\"MatcTestCommentButton MatcAnimated MatcFadeOut\").build(this.domNode); //\n\t\t\tthis.db.span(\"mdi mdi-comment MatcMiddle\").build(btn);\n\t\t\tthis.own(on(btn, \"click\", lang.hitch(this, \"onNewComment\")));\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tcss.remove(btn, \"MatcFadeOut\")\n\t\t\t}, 1250);\n\n\n\t\t\tvar btnSim = this.db.div(\"MatcTestQRButton  MatcAnimated MatcFadeOut\").build(this.domNode);\n\t\t\tthis.db.span(\"mdi mdi-play MatcMiddle\").build(btnSim);\n\t\t\tthis.own(on(btnSim, \"click\", lang.hitch(this, \"onSimulator\")));\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tcss.remove(btnSim, \"MatcFadeOut\")\n\t\t\t}, 1500);\n\n\n\t\t\tvar btnZoomIn = this.db.div(\"MatcTestQRButton  MatcShareZoomIn MatcAnimated MatcFadeOut\").build(this.domNode);\n\t\t\tthis.db.span(\"mdi mdi-magnify-plus-outline MatcMiddle\").build(btnZoomIn);\n\t\t\tthis.own(on(btnZoomIn, \"click\", lang.hitch(this, \"onZoomPlusClick\")));\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tcss.remove(btnZoomIn, \"MatcFadeOut\")\n\t\t\t}, 2000);\n\n\t\t\tvar btnZoomOut = this.db.div(\"MatcTestQRButton MatcShareZoomOut MatcAnimated MatcFadeOut\").build(this.domNode);\n\t\t\tthis.db.span(\"mdi mdi-magnify-minus-outline MatcMiddle\").build(btnZoomOut);\n\t\t\tthis.own(on(btnZoomOut, \"click\", lang.hitch(this, \"onZoomMinusClick\")));\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tcss.remove(btnZoomOut, \"MatcFadeOut\")\n\t\t\t}, 1750);\n\n\n\t\t\tvar lineButton = this.db.div(\"MatcTestQRButton MatcShareLine MatcAnimated MatcFadeOut\").build(this.domNode);\n\t\t\tthis.db.span(\"mdi mdi-vector-line MatcMiddle\").build(lineButton);\n\t\t\tthis.own(on(lineButton, \"click\", lang.hitch(this, \"onTogggleLine\")));\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tcss.remove(lineButton, \"MatcFadeOut\")\n\t\t\t}, 2250);\n\n\t\t},\n\n\t\t/**********************************************************************\n\t\t * Comment Overwirtes\n\t\t **********************************************************************/\n\n\t\tloadComments() {\n\t\t\tthis.logger.log(0, \"loadComments\", \"enter > \" + this.hash);\n\t\t\tthis.showComments = true;\n\t\t\tif (this.model) {\n\t\t\t\tthis._doGet(\"/rest/comments/hash/\" + this.hash + \"/\" + this.model.id + \"/ScreenComment.json\", lang.hitch(this, \"onCommentsLoaded\"));\n\t\t\t} else {\n\t\t\t\tthis.logger.error(\"loadComments\", \"ERROR > No model\");\n\t\t\t}\n\t\t},\n\n\t\tonNewComment(e) {\n\t\t\tthis.logger.log(1, \"onNewComment\", \"enter > \");\n\t\t\tthis.addComment({ event: e, type: \"comment\" });\n\t\t},\n\n\t\t\n\t\t/**\n\t\t * Overrides some behaviour from Canvas.Share.\n\t\t *\n\t\t * 1) We set mode to view\n\t\t *\n\t\t * 2) we use other public api\n\t\t */\n\t\tonCommentAdded(pos, model, e) {\n\t\t\tthis._onAddDone();\n\t\t\tthis.setState(0);\n\t\t\tthis.setMode(\"view\");\n\t\t\tthis.logger.log(0, \"onCommentAdded\", \"enter\");\n\t\t\tif (this.model) {\n\t\t\t\tif (this.model.isTryOut) {\n\t\t\t\t\tthis.showHint(\"Register to add comments...\");\n\t\t\t\t\tthis._onCommentAdded(pos, e, []);\n\t\t\t\t} else {\n\t\t\t\t\t// use hashed URL here\n\t\t\t\t\tthis._doGet(\"/rest/comments/hash/\" + this.hash + \"/\" + this.model.id + \"/ScreenComment.json\", lang.hitch(this, \"_onCommentAdded\", pos, e));\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tsaveDNDChange(comment) {\n\t\t\t/**\n\t\t\t * send to server!\n\t\t\t */\n\t\t\tif (this.model) {\n\t\t\t\tif (this.model.isTryOut) {\n\t\t\t\t\tthis.showSuccess(\"Register to comment...\");\n\t\t\t\t} else {\n\t\t\t\t\tthis._doPost(\"/rest/comments/hash/\" + this.hash + \"/\" + this.model.id + \"/\" + comment.id + \".json\", comment, \"onCommentSaved\");\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\tonSaveComment(comment) {\t\n\t\t\tif (this.model.isTryOut) {\n\t\t\t\tthis.showSuccess(\"Register to comment...\");\n\t\t\t} else {\n\t\t\t\tif (comment.id) {\n\t\t\t\t\tconst old = this.comments[comment.id];\n\t\t\t\t\told.message = comment.message\n\t\t\t\t\told.modified = new Date().getTime()\n\t\t\t\t\told.edited = true\n\t\t\t\t\tthis._doPost(\"/rest/comments/hash/\" + this.hash + \"/\" + this.model.id + \"/\" + old.id + \".json\", old, \"onCommentSaved\");\n\t\t\t\t} else {\n\t\t\t\t\tthis._doPost(\"/rest/comments/hash/\" + this.hash + \"/\" + this.model.id, comment, \"onCommentSaved\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.onCloseCommentPopup();\n\t\t},\n\n\n\t\t/**********************************************************************\n\t\t * Simulator stuff\n\t\t **********************************************************************/\n\n\n\t\tonSimulator(e) {\n\t\t\t// make sure we use an un-zoomed model like\n\t\t\t// the toolbar would do\n\t\t\tthis.startSimulator(e, this.controller.model)\n\t\t},\n\n\t\tstartSimulator(e, model) {\n\t\t\tthis.logger.log(1, \"startSimulator\", \"enter > \");\n\n\t\t\t/**\n\t\t\t * Since 2.1.7 we have better scalling. Keep in\n\t\t\t * sync with _Dialogs.startSimilator()\n\t\t\t */\n\t\t\tconst pos = domGeom.position(win.body());\n\t\t\tconst maxHeight = pos.h - 100\n\t\t\tcss.add(win.body(), 'MatcCanvasSimulatorVisible')\n\t\t\tif (model.type == \"desktop\") {\n\t\t\t\tpos.w = pos.w * 0.75;\n\t\t\t\tpos.h = pos.h * 0.75;\n\t\t\t\tthis._showDesktopSimulator(model, pos, maxHeight);\n\t\t\t} else if (model.type == \"tablet\") {\n\t\t\t\tif (this.model.screenSize.w > this.model.screenSize.h) {\n\t\t\t\t\tpos.w = pos.w * 0.65;\n\t\t\t\t\tpos.h = pos.h * 0.65;\n\t\t\t\t\tthis._showMobileTest(model, pos, \"MatchSimulatorWrapperTablet\", maxHeight);\n\t\t\t\t} else {\n\t\t\t\t\tpos.w = pos.w * 0.35;\n\t\t\t\t\tpos.h = pos.h * 0.35;\n\t\t\t\t\tthis._showMobileTest(model, pos, \"MatchSimulatorWrapperTablet\", maxHeight);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpos.w = pos.w * 0.25;\n\t\t\t\tpos.h = pos.h * 0.25;\n\t\t\t\tthis._showMobileTest(model, pos, \"MatchSimulatorWrapperMobile\", maxHeight);\n\t\t\t}\n\t\t},\n\n\n\t\t_showDesktopSimulator(model, pos, maxHeight) {\n\n\t\t\tconst dialog = document.createElement(\"div\");\n\t\t\tcss.add(dialog, \"MatchSimulatorDialog\");\n\n\t\t\tconst container = document.createElement(\"div\");\n\t\t\tcss.add(container, \"MatchSimulatorContainer\");\n\t\t\tdialog.appendChild(container);\n\n\t\t\tpos = this.getScaledSize(pos, \"width\", model);\n\t\t\tif (pos.h > maxHeight) {\n\t\t\t\tlet factor = pos.h / maxHeight\n\t\t\t\tpos.h = pos.h / factor\n\t\t\t\tpos.w = pos.w / factor\n\t\t\t}\n\n\t\t\tcontainer.style.width = Math.round(pos.w) + \"px\";\n\t\t\tcontainer.style.height = Math.round(pos.h) + \"px\";\n\n\t\t\tconst s = this.$new(Simulator, { mode: \"debug\", logData: false, hash: this.hash });\n\t\t\ts.scrollListenTarget = \"parent\";\n\n\t\t\tconst scroller = this.$new(ScrollContainer, { canDestroy: false });\n\t\t\tscroller.placeAt(container);\n\t\t\ts.setScrollContainer(scroller);\n\n\n\t\t\tconst d = new Dialog();\n\t\t\td.popup(dialog, this.simulatorButton);\n\t\t\td.own(d.on(\"close\", lang.hitch(this, \"stopSimulator\", s, scroller)));\n\n\t\t\tconst screen = this._getSimulatorScreen();\n\t\t\tsetTimeout(function () {\n\t\t\t\tscroller.wrap(s.domNode);\n\t\t\t\ts.setStartScreen(screen);\n\t\t\t\ts.setModel(model);\n\t\t\t}, 500);\n\n\t\t\t/**\n\t\t\t * otherwise the mouse wheel listener will prevent\n\t\t\t * scrolling in the simulator!\n\t\t\t */\n\t\t\tthis.enableMouseZoom(false);\n\t\t\tthis.setState(\"simulate\");\n\n\t\t},\n\n\t\tresizeSimualtor(container, model, factor, dialog) {\n\t\t\tcontainer.innerHTML = \"\"\n\n\t\t\tconst screen = this._getSimulatorScreen();\n\t\t\tlet pos = domGeom.position(win.body());\n\t\t\tpos.w = pos.w * factor;\n\t\t\tpos.h = pos.h * factor;\n\t\t\tpos = this.getScaledSize(pos, \"width\", model);\n\t\t\tcontainer.style.width = Math.round(pos.w) + \"px\";\n\t\t\tcontainer.style.height = Math.round(pos.h) + \"px\";\n\n\t\t\tconst s = this.$new(Simulator, { mode: \"debug\", logData: false, hash: this.hash });\n\t\t\ts.scrollListenTarget = \"parent\";\n\t\t\ts.setStartScreen(screen);\n\n\t\t\tconst scroller = this.$new(ScrollContainer, { canDestroy: false });\n\t\t\tscroller.placeAt(container);\n\t\t\ts.setScrollContainer(scroller);\n\t\t\tscroller.wrap(s.domNode);\n\t\t\ts.setModel(model);\n\n\t\t\tdialog.resize(container)\n\t\t},\n\n\n\n\t\t_showMobileTest(model, pos, clazz, maxHeight) {\n\t\t\tconsole.debug('_showMobileTest', maxHeight)\n\t\t\tvar dialog = document.createElement(\"div\");\n\t\t\tcss.add(dialog, \"MatchSimulatorDialog\");\n\n\t\t\tvar wrapper = document.createElement(\"div\");\n\t\t\tcss.add(wrapper, \"MatchSimulatorWrapper \");\n\t\t\tif (clazz) {\n\t\t\t\tcss.add(wrapper, clazz);\n\t\t\t}\n\t\t\tdialog.appendChild(wrapper);\n\n\t\t\tvar container = document.createElement(\"div\");\n\t\t\tcss.add(container, \"MatchSimulatorContainer\");\n\n\t\t\tpos = this.getScaledSize(pos, \"width\", model);\n\t\t\tif (pos.h > maxHeight) {\n\t\t\t\tlet factor = pos.h / maxHeight\n\t\t\t\tpos.h = pos.h / factor\n\t\t\t\tpos.w = pos.w / factor\n\t\t\t}\n\n\t\t\tcontainer.style.width = Math.ceil(pos.w) + \"px\";\n\t\t\tcontainer.style.height = Math.ceil(pos.h) + \"px\";\n\t\t\twrapper.appendChild(container);\n\n\t\t\tvar scroller = this.$new(ScrollContainer, { canDestroy: false });\n\t\t\tscroller.placeAt(container);\n\n\t\t\tvar s = this.$new(Simulator, { mode: \"debug\", logData: false, hash: this.hash });\n\t\t\ts.scrollListenTarget = \"parent\";\n\t\t\ts.setScrollContainer(scroller);\n\n\t\t\tvar img = document.createElement(\"img\");\n\t\t\tQR.getQRCode(this.hash, false, false).then(url => {\n\t\t\t\timg.src = url\n\t\t\t})\n\t\t\t//img.src = \"rest/invitation/hash/\" + this.hash+ \"/debug.jpg\";\n\n\t\t\tcss.add(img, \"MatcSimulatorQR\");\n\t\t\tdialog.appendChild(img);\n\n\t\t\tvar d = new Dialog();\n\t\t\td.popup(dialog, this.simulatorButton);\n\t\t\td.on(\"close\", lang.hitch(this, \"stopSimulator\", s, scroller));\n\n\t\t\tvar screen = this._getSimulatorScreen();\n\t\t\ts.setStartScreen(screen);\n\t\t\tsetTimeout(function () {\n\t\t\t\tscroller.wrap(s.domNode);\n\t\t\t\ts.setModel(model);\n\t\t\t}, 500);\n\n\t\t\t/**\n\t\t\t * otherwise the mouse wheel listener will prevent\n\t\t\t * scrolling in the simulator!\n\t\t\t */\n\t\t\tthis.enableMouseZoom(false);\n\t\t\tthis.setState(\"simulate\");\n\n\t\t},\n\n\n\t\tstopSimulator(s, scroller) {\n\t\t\tcss.remove(win.body(), 'MatcCanvasSimulatorVisible')\n\t\t\tthis.enableMouseZoom(true);\n\t\t\tthis.setState(0);\n\t\t\tif (s) {\n\t\t\t\ts.destroy();\n\t\t\t}\n\t\t\tif (scroller) {\n\t\t\t\tscroller.destroy();\n\t\t\t}\n\t\t},\n\n\t\t_getSimulatorScreen() {\n\t\t\tif (this.getSelectedScreen()) {\n\t\t\t\treturn this.getSelectedScreen();\n\t\t\t}\n\t\t\tif (this._selectedWidget) {\n\t\t\t\treturn this.getParentScreen(this._selectedWidget);\n\t\t\t}\n\n\t\t},\n\n\n\n\t\t/**********************************************************************\n\t * Wiring\n\t **********************************************************************/\n\n\t\tinitWiring() {\n\t\t\tthis.logger.log(-1, \"initWiring\", \"enter\");\n\t\t\tthis.own(\n\t\t\t\ton(this.dndContainer, \"mousedown\", (e) => this.dispatchMouseDown(e))\n\t\t\t);\n\t\t},\n\n\t\tdispatchMouseDownCanvas(e) {\n\t\t\tthis.logger.log(1, \"dispatchMouseDownCanvas\", \"enter\", e, this.mode);\n\t\t\tthis.onDragStart(this.container, \"container\", \"onCanvasDnDStart\", \"onCanvasDnDMove\", \"onCanvasDnDEnd\", null, e);\n\t\t},\n\n\t\tdispatchMouseDownScreen(e, id) {\n\t\t\tthis.logger.log(-1, \"dispatchMouseDownScreen\", \"enter\", id);\n\t\t},\n\n\t\tdispatchMouseDownWidget(e, id) {\n\t\t\tthis.logger.log(-1, \"dispatchMouseDownWidget\", \"enter\", id);\n\t\t\tlet div = this.widgetDivs[id];\n\t\t\tthis.onWidgetDndClick(id, div);\n\t\t},\n\n\t\tonWidgetDndClick(id, div, pos, e) {\n\t\t\tthis.stopEvent(e);\n\t\t\tthis.logger.log(1, \"onWidgetDndClick\", \"enter > \" + id);\n\t\t\tthis.setState(0);\n\t\t\t// var widget = this.model.widgets[id];\n\t\t\t// if(widget){\n\t\t\t// \tvar lines = this.getLinesForWidget(widget);\n\t\t\t// \tif (lines) {\n\t\t\t// \t\tvar clickLine = this.getLineForGesture(lines, \"click\")\n\t\t\t// \t\tif (!clickLine){\n\t\t\t// \t\t\tclickLine = lines[0]\n\t\t\t// \t\t}\n\t\t\t// \t\tif (clickLine){\n\t\t\t// \t\t\tthis.animateToScreen(clickLine.to, this.container);\n\t\t\t// \t\t}\n\t\t\t// \t}\n\t\t\t// } else {\n\t\t\t// \tthis.highlightActionWidgets();\n\t\t\t// }\n\t\t},\n\n\t\thighlightActionWidgets() {\n\t\t\tthis.logger.log(2, \"highlightActionWidgets\", \"entry > \");\n\t\t\tvar divs = [];\n\t\t\tfor (var id in this.model.widgets) {\n\t\t\t\tvar widget = this.model.widgets[id];\n\t\t\t\tif (widget) {\n\t\t\t\t\tvar lines = this.getLinesForWidget(widget);\n\t\t\t\t\tif (lines) {\n\t\t\t\t\t\tvar div = this.analyticsDivs[widget.id];\n\t\t\t\t\t\tif (div) {\n\t\t\t\t\t\t\tdivs.push(div);\n\t\t\t\t\t\t\tcss.add(div, \"MatcSimulatorWidgetHightlight\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetTimeout(function () {\n\t\t\t\tfor (var i = 0; i < divs.length; i++) {\n\t\t\t\t\tcss.remove(divs[i], \"MatcSimulatorWidgetHightlight\")\n\t\t\t\t}\n\t\t\t}, 500)\n\t\t},\n\n\n\t\tonScreenDndClick(id, div, pos, e) {\n\t\t\tthis.logger.log(-1, \"onScreenDndClick\", \"entry > \" + id);\n\t\t\tthis.stopEvent(e);\n\t\t\tthis.highlightActionWidgets();\n\t\t\t// TODO: Check for lines\n\t\t\tthis.setState(0);\n\t\t\t// call canvas click to make sure comment popups close\n\t\t\tthis.onCanvasSelected();\n\t\t},\n\n\t\tonCanvasSelected() {\n\t\t\tthis.logger.log(2, \"onCanvasSelected\", \"entry > \");\n\t\t\t//this.inherited(arguments) ;\n\t\t},\n\n\t\t/**********************************************************************\n\t\t * Rendering\n\t\t **********************************************************************/\n\n\n\t\tanimateToScreen(screenID, container) {\n\t\t\t// css.add(container, \"MatcShareCanvasAnimatedContainer\");\n\t\t\tthis.moveToScreen(screenID);\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tcss.remove(container, \"MatcShareCanvasAnimatedContainer\");\n\t\t\t}, 500);\n\t\t},\n\n\n\t\t/**********************************************************************\n\t\t * Rendering\n\t\t **********************************************************************/\n\n\n\t\tafterRender() {\n\t\t\tthis.logger.log(-1, \"afterRender\", \"entry > \" + this.analyticMode);\n\t\t\tthis.cleanUpAnalytics();\n\n\n\t\t},\n\n\t\thasSelect() {\n\t\t\treturn this._mode != \"addComment\";\n\t\t},\n\n\n\t\t/**********************************************************************\n\t\t * Gesture\n\t\t **********************************************************************/\n\n\t\tcleanUpAnalytics() {\n\t\t\tthis.analyticsDivs = {};\n\t\t},\n\n\n\t\t/**********************************************************************\n\t\t * DI\n\t\t **********************************************************************/\n\n\n\t\tsetController(c) {\n\t\t\tthis.logger.log(2, \"setController\", \"enter\");\n\t\t\tthis.controller = c;\n\t\t\tc.setCanvas(this);\n\t\t},\n\n\t\tgetController() {\n\t\t\tif (this._controllerCallback) {\n\t\t\t\tthis[this._controllerCallback]();\n\t\t\t}\n\t\t\treturn this.controller;\n\t\t},\n\n\t\tsetControllerCallback(c) {\n\t\t\tthis._controllerCallback = c;\n\t\t},\n\n\n\t\tsetModelFactory(f) {\n\t\t\tthis.logger.log(3, \"setModelFactory\", \"enter\");\n\t\t\tthis.factory = f;\n\t\t},\n\n\t\tsetRenderFactory(f) {\n\t\t\tthis.logger.log(0, \"setRenderFactory\", \"enter\");\n\t\t\tthis.renderFactory = f;\n\t\t},\n\n\t\tsetModel(model) {\n\t\t\tthis.logger.log(3, \"setModel\", \"enter\");\n\t\t\tthis.model = model;\n\t\t\tthis.grid = this.model.grid;\n\t\t\tthis.loadComments()\n\t\t},\n\n\n\t\tsetTest(t) {\n\t\t\tthis.logger.log(2, \"setTest\", \"enter > # \");\n\t\t\tthis.testSettings = t;\n\t\t},\n\n\n\t\tsetUser(u) {\n\t\t\tthis.user = u;\n\t\t},\n\n\t\tsetMode(mode, forceRender) {\n\t\t\tthis.logger.log(2, \"setMode\", \"enter > \" + mode + \" != \" + this._mode + \" > \" + forceRender);\n\t\t\tif (mode != this._mode) {\n\t\t\t\tthis._mode = mode;\n\t\t\t\tif (this.toolbar) {\n\t\t\t\t\tthis.toolbar.setMode(mode);\n\t\t\t\t}\n\t\t\t\tthis.rerender();\n\t\t\t} else if (forceRender) {\n\t\t\t\tthis.rerender();\n\t\t\t}\n\t\t},\n\n\n\t\tgetMode() {\n\t\t\treturn this._mode;\n\t\t},\n\n\n\n\n\t\t/***************************************************************************\n\t\t * Keyboard handling\n\t\t ***************************************************************************/\n\n\t\tonKeyPress(e) {\n\n\t\t\tthis._currentKeyEvent = e;\n\n\t\t\tif (this.state == \"simulate\" || this.state == \"dialog\") {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar target = e.target;\n\t\t\tif (css.contains(target, \"MatcIgnoreOnKeyPress\")) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * The keycode is differently in every browser!\n\t\t\t */\n\t\t\tvar k = e.keyCode ? e.keyCode : e.which;\n\n\t\t\tif (k == 32) { // space\n\t\t\t\tif (!this._inlineEditStarted) {\n\t\t\t\t\tthis.stopEvent(e);\n\t\t\t\t\tif (this.getMode() != \"move\") {\n\t\t\t\t\t\tthis.showHint(\"Move the mouse to move canvas...\");\n\t\t\t\t\t\tthis.onDragStart(this.container, \"container\", \"onCanvasDnDStart\", \"onCanvasDnDMove\", \"onCanvasDnDEnd\", null, this._lastMouseMoveEvent, true);\n\t\t\t\t\t\tthis.setMode(\"move\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/**\n\t\t\t\t * Zoom\n\t\t\t\t */\n\t\t\t} else if (k == 171 || k == 187) { // +\n\t\t\t\tif (!this._inlineEditStarted) {\n\t\t\t\t\tthis.onClickPlus();\n\t\t\t\t\tthis.stopEvent(e);\n\t\t\t\t}\n\t\t\t} else if (k == 173 || k == 189) { //-\n\n\t\t\t\tif (!this._inlineEditStarted) {\n\t\t\t\t\tthis.onClickMinus();\n\t\t\t\t\tthis.stopEvent(e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t},\n\n\t\tonKeyUp(e) {\n\t\t\tvar k = e.keyCode ? e.keyCode : e.which;\n\t\t\tif (k == 32) {\n\t\t\t\tthis.onDragEnd(this._lastMouseMoveEvent);\n\t\t\t\tthis.setMode(\"view\");\n\t\t\t}\n\n\t\t\tdelete this._currentKeyEvent;\n\t\t},\n\n\n\t\t/***************************************************************************\n\t\t * Settings\n\t\t ***************************************************************************/\n\n\n\t\tinitSettings() {\n\t\t\tthis.logger.log(1, \"initSettings\", \"enter > \");\n\t\t\t/**\n\t\t\t * default settings\n\t\t\t */\n\t\t\tthis.settings = {\n\t\t\t\tcanvasTheme: \"MatcLight\",\n\t\t\t\tlineColor: \"#999\",\n\t\t\t\tlineWidth: 1,\n\t\t\t\tstorePropView: true,\n\t\t\t\tmoveMode: \"ps\",\n\t\t\t\tmouseWheelMode: \"scroll\"\n\t\t\t};\n\n\n\t\t\tvar s = this._getStatus(\"matcSettings\");\n\t\t\tif (s) {\n\t\t\t\tif (s.canvasTheme) {\n\t\t\t\t\t//this.settings.canvasTheme = s.canvasTheme;\n\t\t\t\t}\n\t\t\t\tif (s.lineColor) {\n\t\t\t\t\tthis.settings.lineColor = s.lineColor;\n\t\t\t\t}\n\t\t\t\tif (s.lineWidth) {\n\t\t\t\t\tthis.settings.lineWidth = s.lineWidth;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.logger.log(2, \"initSettings\", \"exit>  no saved settings\");\n\t\t\t}\n\n\n\t\t\tthis.applySettings(this.settings);\n\t\t},\n\n\t\tgetSettings() {\n\t\t\treturn this.settings;\n\t\t},\n\n\t\tsetSettings(s) {\n\n\t\t\t/**\n\t\t\t * Mixin values\n\t\t\t */\n\t\t\tif (s.canvasTheme) {\n\t\t\t\tthis.settings.canvasTheme = s.canvasTheme;\n\t\t\t}\n\t\t\tif (s.lineColor) {\n\t\t\t\t//this.settings.lineColor = s.lineColor;\n\t\t\t}\n\t\t\tif (s.lineWidth) {\n\t\t\t\tthis.settings.lineWidth = s.lineWidth;\n\t\t\t}\n\t\t\tif (s.storePropView != null) {\n\t\t\t\tthis.settings.storePropView = s.storePropView;\n\t\t\t}\n\n\t\t\tif (s.mouseWheelMode != null) {\n\t\t\t\tthis.settings.mouseWheelMode = s.mouseWheelMode;\n\t\t\t}\n\n\t\t\tthis._setStatus(\"matcSettings\", this.settings);\n\n\t\t\tthis.applySettings(this.settings);\n\t\t\tthis.rerender();\n\t\t},\n\n\n\t\tapplySettings(s) {\n\n\t\t\tthis.logger.log(2, \"applySettings\", \"enter > \" + s.canvasTheme + \" &> \" + s.moveMode);\n\n\t\t\tif (s.lineWidth) {\n\t\t\t\tthis.defaultLineWidth = s.lineWidth;\n\t\t\t}\n\t\t\tif (s.canvasTheme) {\n\t\t\t\tif (this._lastCanvasTheme) {\n\t\t\t\t\tcss.remove(win.body(), this._lastCanvasTheme);\n\t\t\t\t}\n\t\t\t\tcss.add(win.body(), s.canvasTheme)\n\t\t\t\tthis._lastCanvasTheme = s.canvasTheme;\n\t\t\t}\n\n\t\t\tif (s.mouseWheelMode) {\n\t\t\t\tthis._mouseWheelMode = s.mouseWheelMode;\n\t\t\t}\n\n\t\t\tthis.settings = s;\n\n\t\t},\n\n\n\t\t/***************************************************************************\n\t\t * Helper Functons\n\t\t ***************************************************************************/\n\n\n\t\t/**\n\t\t * Returns all lines for a widget or its parent group.\n\t\t *\n\t\t * 1) If there is one or more lines for the widget, this will be\n\t\t * returned\n\t\t *\n\t\t * 2) Else, if there is a group and the group has one or more line,\n\t\t * the group lines will be returned!\n\t\t */\n\t\tgetLinesForWidget(widget) {\n\n\t\t\t/**\n\t\t\t * In case of an inherited widget, use the lines of the master\n\t\t\t */\n\t\t\tif (widget.inherited && this.model.widgets[widget.inherited]) {\n\t\t\t\twidget = this.model.widgets[widget.inherited];\n\t\t\t}\n\n\t\t\tvar widgetID = widget.id;\n\t\t\tvar lines = this.getFromLines(widget);\n\t\t\tif (lines && lines.length > 0) {\n\t\t\t\treturn lines;\n\t\t\t}\n\n\t\t\tvar group = this.getParentGroup(widgetID);\n\t\t\tif (group) {\n\t\t\t\tvar groupLine = this.getFromLines(group);\n\t\t\t\tif (groupLine && groupLine.length > 0) {\n\t\t\t\t\treturn groupLine;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Return the line with a given type (lines[i].event === type).\n\t\t * Handles also old school where there was not event\n\t\t */\n\t\tgetLineForGesture(lines, type) {\n\t\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\t\tif (lines[i].event === type || (\"click\" === type && !lines[i].event)) {\n\t\t\t\t\treturn lines[i];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tinitMouseTracker() {\n\t\t\tthis.own(on(win.body(), \"mousemove\", lang.hitch(this, \"onMouseMove\")));\n\t\t},\n\n\t\tonMouseMove(e) {\n\t\t\tvar pos2 = this.getCanvasMousePosition(e, true);\n\t\t\tthis._lastMousePos = pos2;\n\t\t\tthis._lastMouseMoveEvent = e;\n\t\t},\n\n\n\t\tdestroy() {\n\t\t\tthis.cleanUp();\n\t\t}\n\t},\n\tmounted() {\n\n\t}\n}\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ShareCanvas.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ShareCanvas.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ShareCanvas.vue?vue&type=template&id=25f015e7&\"\nimport script from \"./ShareCanvas.vue?vue&type=script&lang=js&\"\nexport * from \"./ShareCanvas.vue?vue&type=script&lang=js&\"\nimport style1 from \"./ShareCanvas.vue?vue&type=style&index=1&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\nimport lang from 'dojo/_base/lang'\nimport win from 'dojo/win'\nimport Logger from 'common/Logger'\nimport Core from 'core/Core'\nimport CoreUtil from 'core/CoreUtil'\n\nexport default class ShareController extends Core{\n\n\tconstructor (){\n\t\tsuper()\n\t\tthis.logger = new Logger(\"ShareContoller\");\n\t\tthis.logger.log(2,\"constructor\", \"exit\");\n\t}\n\n\t/**********************************************************************\n\t * Dependencies\n\t **********************************************************************/\n\n\tsetCanvas (c){\n\t\tthis.logger.log(3,\"setCanvas\", \"entry\");\n\t\tthis._canvas = c;\n\t}\n\n\tsetToolbar (t){\n\t\tthis.logger.log(3,\"setToolbar\", \"entry\");\n\t\tthis.toolbar = t;\n\t}\n\n\tsetModelService (s) {\n\t\tthis.modelService = s\n\t}\n\n\tsetModelFactory (f){\n\t\tthis.logger.log(3,\"setModelFactory\", \"entry\");\n\t\tthis.factory = f;\n\t}\n\n\tsetModel (m, screenID){\n\t\tthis.logger.log(2,\"setModel\", \"entry > \" + screenID);\n\t\tthis.model = m;\n\n\t\t// Zoom out if large model!\n\t\tvar count = this.countProps(m.screens);\n\t\tif (count > 4) {\n\t\t\tif(this._canvas){\n\t\t\t\tthis._canvas.zoom = 0.25;\n\t\t\t\tthis._canvas.zoomLevelPos = 2;\n\t\t\t}\n\t\t}\n\n\t\tthis.inheritedModel = this.createInheritedModel(m);\n\t\tthis.oldModel = lang.clone(m);\n\t\tthis.render(screenID);\n\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.setModel(m);\n\t\t} else {\n\t\t\tconsole.debug(\"No toolbar in controller!\");\n\t\t}\n\n\t\tif (this._canvas) {\n\t\t\tthis._canvas.setFonts(m.fonts)\n\t\t}\n\n\t\tthis.logger.log(3,\"setModel\", \"entry > \" + screenID);\n\t}\n\n\n\tsetMode (mode){\n\t\tthis.logger.log(0,\"setMode\", \"entry > \" + mode);\n\t\tif (this.toolbar) {\n\t\t\tthis.toolbar.setMode(mode);\n\t\t}\n\t\tthis._canvas.setMode(mode);\n\t}\n\n\tsetSinglePage (enabled){\n\t\tthis.logger.log(0,\"setSinglePage\", \"entry > \" + enabled);\n\t}\n\n\n\tgetZoomFactor (){\n\t\tif(this._canvas){\n\t\t\treturn this._canvas.getZoomFactor();\n\t\t}\n\t\treturn 1;\n\t}\n\n\t/**********************************************************************\n\t * Canvas Delegates\n\t **********************************************************************/\n\n\trender (screenID){\n\t\tthis.logger.log(2,\"render\", \"enter > screenID : \" + screenID);\n\n\t\tif(this._canvas){\n\t\t\tlet inheritedModel = CoreUtil.createInheritedModel(this.model)\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tthis._canvas.render(inheritedModel);\n\t\t\t\tif(screenID){\n\t\t\t\t\tthis._canvas.moveToScreen(screenID);\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\t_requestRendering (screenID){\n\t\tif(this._zoomedModel){\n\t\t\tthis._canvas.render(this._zoomedModel);\n\t\t\tif(screenID){\n\t\t\t\tthis._canvas.moveToScreen(screenID);\n\t\t\t}\n\t\t}\n\t\tthis._zoomedModel = null;\n\t}\n\n\t_zoomToScreen (screenID){\n\t\tif(screenID && this.model.screens[screenID]){\n\t\t\t/**\n\t\t\t * here we make sure the selected screen fits in the\n\t\t\t * browser window. We simply find the smallest possible\n\t\t\t * zoom factor and subtract 0.2 to make sure it fits in\n\t\t\t * browser\n\t\t\t */\n\t\t\tvar screen = this.model.screens[screenID];\n\t\t\tlet winBox = win.getBox();\n\t\t\tlet x =  winBox.w / screen.w;\n\t\t\tlet y =  winBox.h / screen.h;\n\t\t\tvar zoom = (Math.floor( Math.min(x,y) * 10) / 10) -0.2 ;\n\t\t\tthis._canvas.setZoom(zoom);\n\n\t\t}\n\t}\n\n\t/**********************************************************************\n\t * Selection methods\n\t **********************************************************************/\n\n\tonWidgetSelected (id){\n\t\tthis.logger.log(0,\"onWidgetSelected\", \"enter > \"+ id);\n\t\tvar widget = this.inheritedModel.widgets[id];\n\t\tif(widget){\n\t\t\tif(this.toolbar){\n\t\t\t\tthis.toolbar.onWidgetSelected(widget);\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(\"onWidgetSelected() > No width with id\", id);\n\t\t}\n\t}\n\n\n\tonScreenSelected (id){\n\t\tthis.logger.log(1,\"onScreenSelected\", \"enter > \"+ id);\n\t\tvar screen = this.model.screens[id];\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.onScreenSelected(screen);\n\t\t}\n\t}\n\n\tonCanvasSelected (){\n\t\tthis.logger.log(1,\"onCanvasSelected\", \"enter \");\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.onCanvasSelected();\n\t\t}\n\t}\n\n\tonLineSelected (id){\n\t\tthis.logger.log(1,\"onLineSelected\", \"enter > \" + id);\n\t\tvar line = this.model.lines[id];\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.onLineSelected(line);\n\t\t}\n\t}\n\n\tonMultiSelect (selection){\n\t\tthis.logger.log(1,\"onMultiSelect\", \"enter > \");\n\t\tif(this.toolbar){\n\t\t\t/**\n\t\t\t * TODO: get all the model elements\n\t\t\t */\n\t\t\tthis.toolbar.onMultiSelect(selection);\n\t\t}\n\t}\n\n\tonGroupSelected (id){\n\t\tthis.logger.log(1,\"onGroupSelected\", \"enter > \" + id);\n\t\tif(this.model.groups && this.model.groups[id]){\n\t\t\tif(this.toolbar){\n\t\t\t\tvar group = this.model.groups[id];\n\t\t\t\tthis.toolbar.onGroupSelect(group);\n\t\t\t}\n\t\t}\n\t}\n\n\tunSelect (){\n\t\tif(this._canvas){\n\t\t\tthis._canvas.unSelect();\n\n\t\t}\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.cleanUp();\n\t\t}\n\t}\n\n\n\tshowSuccess (msg){\n\t\tif(this._canvas){\n\t\t\tthis._canvas.showSuccess(msg);\n\t\t}\n\t}\n\n\tshowError (msg){\n\t\tif(this._canvas){\n\t\t\tthis._canvas.showError(msg);\n\t\t}\n\t}\n\n}","<template>\n  <div class=\"MatcCanvasPage MatcShare\" id=\"CanvasNode\">\n      <ShareCanvas ref=\"canvas\" />\n  </div>\n</template>\n\n<style class=\"css\">\n\t@import url(\"../../style/css/legacy.css\");\n</style>\n\n<style lang=\"scss\">\n  @import \"../../style/matc.scss\";\n  @import \"../../style/test.scss\";\n</style>\n<style lang=\"sass\">\n  @import \"../../style/bulma.sass\"\n</style>\n\n<script>\nimport DojoWidget from \"dojo/DojoWidget\";\nimport css from 'dojo/css'\nimport win from 'dojo/win'\nimport ShareCanvas from 'canvas/share/ShareCanvas'\nimport ShareController from 'canvas/share/ShareController'\nimport ModelFactory from 'core/ModelFactory'\nimport RenderFactory from 'core/RenderFactory'\n//import lang from 'dojo/_base/lang'\n//import on from 'dojo/on'\nimport Services from 'services/Services'\nimport Logger from \"common/Logger\";\n\nexport default {\n  name: \"Design\",\n  mixins: [DojoWidget],\n  data: function() {\n    return {\n    };\n  },\n  components: {\n      'ShareCanvas': ShareCanvas\n  },\n  computed: {\n    pub () {\n      return this.$route.meta && this.$route.meta.isPublic\n    },\n    mode () {\n\t\t\tif (this.pub) {\n\t\t\t\treturn 'public'\n\t\t\t}\n\t\t\treturn 'private'\n\t\t}\n  },\n  methods: {\n    loadData () {\n      let id = this.$route.query.h\n      this.logger.log(0, 'loadData', 'enter', id)\n      Promise.all([\n          this.modelService.findAppByHash(id),\n      ]).then(values => {\n         this.buildCanvas(values[0])\n      })\n    },\n    buildCanvas (model) {\n      this.logger.log(0, 'buildCanvas', 'enter')\n      let canvas = this.$refs.canvas\n      let controller = new ShareController()\n      let service = this.modelService\n\n      /**\n       * model factory\n       */\n      var factory = new ModelFactory();\n      factory.setModel(model);\n\n      /**\n       * render factory\n       */\n      var renderFactory = new RenderFactory();\n      renderFactory.setModel(model);\n      renderFactory.setHash(this.$route.query.h)\n\n      /**\n       * Dependency injection\n       */\n      controller.setModelService(service)\n      controller.setModelFactory(factory);\n      if (this.pub) {\n        controller.setPublic(true)\n      }\n\n      canvas.setController(controller);\n      canvas.setRenderFactory(renderFactory);\n      canvas.setModelFactory(factory);\n      canvas.setModelService(service);\n      canvas.setCommentService(Services.getCommentService())\n      canvas.setUser(this.user)\n      canvas.setHash(this.$route.query.h);\n\n  \n\n      var startScreen = null;\n      for(var screenID in model.screens){\n        var screen = model.screens[screenID];\n        if (screen.props && screen.props.start){\n            startScreen = screenID;\n            break;\n        }\n      }\n      /**\n       * controller will render screen\n       */\n      controller.setModel(model, startScreen);\n\n    }\n  },\n  async mounted() {\n    this.logger = new Logger(\"Design\");\n    css.add(win.body(), 'MatcVisualEditor')\n    this.modelService = Services.getModelService(this.$route)\n    this.user = await Services.getUserService().load()\n    this.loadData()\n    this.logger.log(3, 'mounted', 'exit')\n  }\n};\n</script>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Share.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Share.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Share.vue?vue&type=template&id=02bee507&\"\nimport script from \"./Share.vue?vue&type=script&lang=js&\"\nexport * from \"./Share.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Share.vue?vue&type=style&index=0&class=css&lang=css&\"\nimport style1 from \"./Share.vue?vue&type=style&index=1&lang=scss&\"\nimport style2 from \"./Share.vue?vue&type=style&index=2&lang=sass&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","ref","staticRenderFns","_m","modelName","on","onHomeMenu","class","mode","onNewComment","onChangeViewMode","events","user","model","canvasViewConfig","onChangeCanvasViewConfig","_e","name","mixins","data","x_prefix","components","methods","postCreate","setPopoverFct","setLabel","setMaxMin","setFormTo","onHover","setValue","hist","bar","css","me","to","from","db","lblCntr","mean","mounted","component","props","value","_v","_s","$event","stopPropagation","_l","i","key","onSelect","label","selectedTool","tools","icon","computed","items","onHide","style","highlightWidth","highlightX","m","refInFor","selected","setSelected","modes","hasData","setHighlight","nextView","watch","setTimeout","analyticMode","analyticHeatMapClicks","showHelpDialog","showHelp","dialog","help","setAnalyticMode","setModelService","setPublic","setCanvasViewConfig","setUser","setMouseData","showClickHeatMap","numberOfClicks","reShowClickHeatMap","showFirstClickHeatMap","showMouseHeatMap","_onMouseDataLoaded","showScrollHeatMap","showDwelTimeMap","showDiscoveryTimeMap","showScrollTimeMap","showViewMap","showDropOff","showUserJourney","sessions","time","color","tree","task","taskColor","outlier","outlierColor","showGestureMap","renderToolbar","renderScreenProperties","cntr","renderWidgetProperties","renderHeatMapProperties","list","setHeatMapLabel","lbl","renderDropOffProperties","maxLabelLength","content","row","tasks","span","build","nodes","renderSessionProperties","updateColor","hasCustomColor","hasPicker","renderSessionSection","onSortSessionList","renderSessionList","chk","hoverSession","showUserJourneyOutlier","selectUserJournyTask","selectAllSessions","setSelectSessions","selectSession","_getTestList","testSettings","console","df","isValid","status","taskSuccess","session","taskPerformance","weirdness","duration","date","start","size","id","screens","renderGestureProperties","showDwellDistribution","showGestureProperties","showWidgetProperties","widgetData","showScreenProperties","times","views","clicks","widgetClicks","screenTests","count","tests","showSessionProperties","selectDropOffTask","showDropOffProperties","showDropOffChart","showDropOffFunnel","funnel","getNiceEventLabel","showHeatMapProperties","showProperties","hideProperties","hideAllSections","setController","setCanvas","setModelFactory","setModel","setAnnotation","setTest","setEvents","setMode","onModeChange","setSelectedViewButton","createRing","bgColor","width","backgroundColor","color2","color3","ring","createToolBarItem","a","parent","createInput","input","div","createContent","createSection","parentNode","createSectionHeader","createBigNumber","onExit","hash","onShare","onWidgetSelected","onScreenSelected","onLineSelected","onMultiSelect","onGroupSelect","onCanvasSelected","updatePropertiesView","showSession","Promise","then","values","_showSession","player","_getSessionAnnotation","appID","type","reference","onShowSettings","themeList","mouseWheelList","onSaveSettings","canvasTheme","mouseWheelMode","showSignUpDialog","d","_createSignUpForm","f","required","placeholder","error","min","click","_signUpAndNew","result","form","window","cleanUp","unselect","blurWidgetProperties","highlightSession","highlightAnalyticLine","line","divs","_render_global_UserJourney","_renderUserTree","maxCount","maxMeanDuration","x","y","Math","_renderTreeEvent","_renderUserSingleLines","_renderUserGraph","match","e","maxDuration","lastDurationEvent","point","matchLines","halo","lineColor","lineOpacity","lineWidth","_renderScreenEvent","onScreenEventClick","_getSessionGraph","_addToGraph","graph","_render_global_DropOff","_render_dropoff_task_time","_render_dropoff_task_success","_getDropOffBoxPosition","pos","_renderDropOffEvent","selectDropOffPoint","getOutlierScores","getGestures","getUserJourney","getTaskPerformance","getOverlayViews","total","counts","getOverlayTest","screenCounts","getScreenViews","getScreenTests","getScreenDwellTime","getOverlayDwellTime","getScreenWidgetClicks","widgetEvents","widgetScreenEvents","getScreenClicksOnBackground","getMissedClicks","passiveScreens","widgets","passiveWidgets","select","as_array","getScreenClicks","getOverlayClicks","getOverlayWidgetClicks","getLineWidgetData","clicksAbs","maxClicksAbs","Object","v","getWidgetData","getFirstNClicksData","DojoWidget","_DragNDrop","_Color","Util","Render","Lines","DnD","Add","Select","Distribute","Tools","Zoom","InlineEdit","Scroll","Upload","KeyBoard","Resize","Replicate","Comment","Heat","UserJourney","DropOff","DataProcessing","zoom","resizeEnabled","renderDND","dragNDropMinTimeSpan","wireInheritedWidgets","taskLineOpacity","isBlackAndWhite","dropOffLineWidth","dropOffLineColor","dropOffEventWidth","userJourneyEndColor","w","h","topic","lang","showError","XlineFunction","setCommentService","setToolbar","setMouseListener","inlineEditInit","setBW","renderLines","showComments","initAnalyticSVG","cleanUpAnalyticLines","drawLine","drawAnalyticLine","attr","opacity","drawStraightAnalyticLine","initWiring","dispatchMouseDownScreen","dispatchMouseDownWidget","afterUpdateDnd","initSettings","storePropView","moveMode","getSettings","setSettings","applySettings","onWidgetDndClick","onScreenDndClick","selectAnalyticDiv","renderLayerList","afterRender","hasSelect","_renderHeatMap","screenEvents","_render_HeatmapMouse","_render_HeatmapClick","screenClicks","_render_pixel_screen_heatmap","_render_HeatmapScrollView","screen","_render_HeatmapScrollTime","_render_HeatmapViews","ctx","_render_HeatmapDwelTime","drawDurationLine","_render_global_Gesture","_renderGestureStart","cleanUpAnalytics","c","getController","setControllerCallback","setRenderFactory","onKeyPress","getMode","onKeyUp","initMouseTracker","onMouseMove","destroy","logPageView","AnalyticController","Core","constructor","super","logger","Logger","log","s","modelService","_canvas","t","toolbar","factory","screenID","inheritedModel","createInheritedModel","addContainerChildrenToModel","oldModel","clone","debug","setFonts","fonts","setSinglePage","enabled","getZoomFactor","CoreUtil","requestAnimationFrame","moveToScreen","_requestRendering","_zoomedModel","_zoomToScreen","winBox","win","getBox","floor","setZoom","widget","warn","lines","selection","onGroupSelected","groups","group","unSelect","showSuccess","msg","isPublic","loadData","temp","buildCanvas","renderFactory","controller","canvas","startScreen","onMouseWheel","pub","CollabSession","collabUsers","initWebsocket","websocket","Services","getWebSocketService","token","onMessage","dispatchWebSocketMessage","init","success","sendHello","sendMouse","setModelChangeListener","changeEvent","sendChange","err","hasOtherUsers","others","find","u","undefined","send","sendBye","sendImHere","addCollabUser","removeCollabUser","setCollabMouse","collabRecieveChanges","found","push","filter","close","Toolbar","Canvas","beforeDestroy","zoomLevelPos","closeSVGEditor","onZoomMinusClick","onZoomPlusClick","onTogggleLine","setHash","initButtons","loadComments","event","onCommentAdded","saveDNDChange","onSaveComment","old","onSimulator","startSimulator","_showDesktopSimulator","container","logData","canDestroy","scroller","resizeSimualtor","_showMobileTest","wrapper","QR","img","stopSimulator","_getSimulatorScreen","dispatchMouseDownCanvas","highlightActionWidgets","animateToScreen","getLinesForWidget","getLineForGesture","ShareController","countProps"],"sourceRoot":""}