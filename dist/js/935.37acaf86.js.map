{"version":3,"file":"js/935.37acaf86.js","mappings":"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","sources":["webpack://quant-ux/./src/page/DropDownSelect.vue?d0c7","webpack://quant-ux/src/page/DropDownSelect.vue","webpack://quant-ux/./src/page/DropDownSelect.vue?f7fa","webpack://quant-ux/./src/page/DropDownSelect.vue","webpack://quant-ux/./src/views/apps/analytics/DistributionSection.vue?3501","webpack://quant-ux/./src/views/apps/analytics/ScatterPlot.vue?8526","webpack://quant-ux/./src/views/apps/analytics/ScatterPlotDetails.vue?ba4a","webpack://quant-ux/src/views/apps/analytics/ScatterPlotDetails.vue","webpack://quant-ux/./src/views/apps/analytics/ScatterPlotDetails.vue?04fa","webpack://quant-ux/./src/views/apps/analytics/ScatterPlotDetails.vue","webpack://quant-ux/src/views/apps/analytics/ScatterPlot.vue","webpack://quant-ux/./src/views/apps/analytics/ScatterPlot.vue?3b4d","webpack://quant-ux/./src/views/apps/analytics/ScatterPlot.vue","webpack://quant-ux/src/views/apps/analytics/DistributionSection.vue","webpack://quant-ux/./src/views/apps/analytics/DistributionSection.vue?40bf","webpack://quant-ux/./src/views/apps/analytics/DistributionSection.vue","webpack://quant-ux/./src/views/apps/analytics/TaskCreateDialog.vue?e238","webpack://quant-ux/src/views/apps/analytics/TaskCreateDialog.vue","webpack://quant-ux/./src/views/apps/analytics/TaskCreateDialog.vue?6a20","webpack://quant-ux/./src/views/apps/analytics/TaskCreateDialog.vue","webpack://quant-ux/./src/views/apps/analytics/TaskPerfGram.vue?fbeb","webpack://quant-ux/src/views/apps/analytics/TaskPerfGram.vue","webpack://quant-ux/./src/views/apps/analytics/TaskPerfGram.vue?1467","webpack://quant-ux/./src/views/apps/analytics/TaskPerfGram.vue","webpack://quant-ux/./src/views/apps/test/TestSettings.vue?990b","webpack://quant-ux/src/views/apps/test/TestSettings.vue","webpack://quant-ux/./src/views/apps/test/TestSettings.vue?2006","webpack://quant-ux/./src/views/apps/test/TestSettings.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcButton MatcDropDownButton MatcDropDownSelect\"},[_c('div',{attrs:{\"type\":\"button\",\"data-dojo-attach-point\":\"button\"}},[_c('label',{staticClass:\"MatcDropDownLabel\",attrs:{\"data-dojo-attach-point\":\"label\"}}),_c('span',{staticClass:\"caret\"})]),_c('div',{staticClass:\"MatcDropDownPopUp \",attrs:{\"role\":\"menu\",\"data-dojo-attach-point\":\"popup\"}},[_c('ul',{attrs:{\"role\":\"menu\",\"data-dojo-attach-point\":\"ul\"}})])])}]\n\nexport { render, staticRenderFns }","\n<template>\n    <div class=\"MatcButton MatcDropDownButton MatcDropDownSelect\">\n        <div type=\"button\" data-dojo-attach-point=\"button\">\n            <label data-dojo-attach-point=\"label\" class=\"MatcDropDownLabel\"></label>\n            <span class=\"caret\"></span>\n        </div>\n        <div class=\"MatcDropDownPopUp \" role=\"menu\" data-dojo-attach-point=\"popup\" >\n            <ul class role=\"menu\" data-dojo-attach-point=\"ul\"></ul>\n        </div>\n    </div>\n</template>\n<script>\nimport DropDownButton from \"common/DropDownButton\";\nimport CheckBox from \"common/CheckBox\";\nimport lang from \"dojo/_base/lang\";\nimport css from \"dojo/css\";\nimport on from \"dojo/on\";\nimport touch from \"dojo/touch\";\n  \n  export default {\n    name: \"DropDownSelect\",\n    mixins: [DropDownButton],\n    data: function() {\n      return {\n        openCSS: \"MatcDropDownButtonOpen\",\n        iconCSS: \"MatcDropDownIcon\",\n        labelCSS: \"MatcDropDownLabel\",\n        selectedCSS: \"MatcDropDownButtonSelected\",\n        updateLabel: false,\n        selected: {}\n      };\n    },\n    methods:{\n        renderOptions (list) {\n   \n            for (let i = 0; i < list.length; i++) {\n                const o = list[i];\n                const li = document.createElement(\"li\");\n\n                if (o.check) {\n                    const checkCntr = document.createElement(\"span\");\n                    css.add(checkCntr, 'MatcDropDownSelectCheck');\n                    li.appendChild(checkCntr)\n\n                    const check = this.$new(CheckBox)\n                    check.setValue(o.selected)\n                    check.setLabel(o.label)\n                    check.placeAt(checkCntr)\n                \n                    check.on('change', lang.hitch(this, \"onSelect\", o))\n                    this._lis[o.value] = li;\n\n                    this.selected[o.value] = o.selected\n\n                } else if (o.label || o.icon) {\n                    this.hasObjects = true;\n                    if (o.icon) {\n                        const icon = document.createElement(\"span\");\n                        css.add(icon, this.iconCSS);\n                        css.add(icon, o.icon);\n                        li.appendChild(icon);\n                    }\n                    if (o.label) {\n                        const lbl = document.createElement(\"label\");\n                        css.add(lbl, this.labelCSS);\n                        lbl.innerHTML = o.label;\n                        li.appendChild(lbl);\n                    }\n                  \n                    this.own(on(li, touch.press, lang.hitch(this, \"onClick\", o)));\n                    this._lis[o.value] = li;\n                }\n             \n                if (o.css) {\n                    css.add(li, o.css)\n                }\n                this.ul.appendChild(li);\n            }\n        },\n        onSelect (option, selected) {\n            this.selected[option.value] = selected\n            this.$emit('select', this.selected)\n        },\n        onClick (option, e) {\n            if (option.event) {\n                this.$emit(option.event, e)\n            }\n           \n        }\n    },\n    watch:{\n    }\n  };\n  </script>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DropDownSelect.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DropDownSelect.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DropDownSelect.vue?vue&type=template&id=75d1bc6a&\"\nimport script from \"./DropDownSelect.vue?vue&type=script&lang=js&\"\nexport * from \"./DropDownSelect.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcDistributionSection\"},[_c('div',{staticClass:\"level\"},[_c('div',{staticClass:\"level-left\"},[_c('h2',{staticClass:\"title level-item\"},[_c('span',[_vm._v(_vm._s(_vm.$t('analytics.distribution.title')))]),_c('HelpButton',{attrs:{\"topic\":\"analytics.dist\",\"hasNotifications\":false}})],1)]),_c('div',{staticClass:\"level-right level-options\"},[(_vm.hasConfig)?_c('CheckBox',{attrs:{\"value\":false,\"label\":\"zScore\"},on:{\"change\":_vm.onChangeNorm}}):_vm._e(),(_vm.hasConfig)?_c('DropDownButton',{attrs:{\"value\":_vm.clusterAlgo,\"options\":_vm.clusterAlgoOptions},on:{\"change\":_vm.onChangeAlgo}}):_vm._e(),(_vm.hasConfig)?_c('DropDownSelect',{ref:\"dropDown\",attrs:{\"options\":_vm.clusterOptions,\"l\":_vm.$t('analytics.distribution.cluster-vars')},on:{\"select\":_vm.onChangeCluster,\"algo\":_vm.onChangeAlgo}}):_vm._e()],1)]),_c('div',{staticClass:\"MatcSurveySectionTableCntr\"},[(_vm.events && _vm.events.length > 0)?[(_vm.viewMode === 'Scatter')?_c('ScatterPlot',{attrs:{\"yAxis\":_vm.yAxis,\"xAxis\":_vm.xAxis,\"app\":_vm.app,\"pub\":_vm.pub,\"clusterVars\":_vm.clusterVars,\"clusterAlgo\":_vm.clusterAlgo,\"clusterNorm\":_vm.clusterNorm,\"events\":_vm.events,\"annotation\":_vm.annotation,\"test\":_vm.test}}):_vm._e()]:_c('span',{staticClass:\"MatcHint\"},[_vm._v(\" \"+_vm._s(_vm.$t('analytics.distribution.no-data'))+\" \")])],2)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:'MatcScatterPlot MatcScatterPlot' + _vm.mode},[_c('div',{staticClass:\"MatcScatterPlotfActionCntr\",attrs:{\"data-dojo-attach-point\":\"actionCntr\"}}),_c('div',{staticClass:\"MatcScatterPlotCntr\",attrs:{\"data-dojo-attach-point\":\"cntr\"},on:{\"click\":_vm.onBackgroundClick}},[_c('span',{staticClass:\"MatxAxisXLine MatcScatterPlotfScatternVisible MatcScatterPlotDurationHidden\",attrs:{\"data-dojo-attach-point\":\"xLine\"}}),_c('span',{staticClass:\"MatxAxisYLine MatcScatterPlotfScatternVisible MatcScatterPlotDurationHidden\",attrs:{\"data-dojo-attach-point\":\"yLine\"}}),_c('div',{staticClass:\"MatcScatterPlotCanvas\",attrs:{\"data-dojo-attach-point\":\"canvas\"}}),_c('span',{staticClass:\"MatxAxisLabel xMaxLabel\",attrs:{\"data-dojo-attach-point\":\"xMaxLabel\"}}),_c('span',{staticClass:\"MatxAxisLabel MatcScatterPlotDropOffHidden yMaxLabel\",attrs:{\"data-dojo-attach-point\":\"yMaxLabel\"}}),_c('span',{staticClass:\"MatxAxisLabel MatcScatterPlotfScatternVisible MatcScatterPlotDurationHidden xMiddleLabel\",attrs:{\"data-dojo-attach-point\":\"xMiddleLabel\"}}),_c('span',{staticClass:\"MatxAxisLabel MatcScatterPlotfScatternVisible MatcScatterPlotDurationHidden yMiddleLabel\",attrs:{\"data-dojo-attach-point\":\"yMiddleLabel\"}}),_c('span',{staticClass:\"MatxAxisLabel minLabel\",attrs:{\"data-dojo-attach-point\":\"minLabel\"}},[_vm._v(\"0\")]),_c('span',{staticClass:\"MatxAxisLabel xLabel \",attrs:{\"data-dojo-attach-point\":\"xLabel\"}},[_vm._v(\"X\")]),_c('span',{staticClass:\"MatxAxisLabel yLabel MatcScatterPlotDropOffHidden\",attrs:{\"data-dojo-attach-point\":\"yLabel\"}},[_vm._v(\"Y\")]),_c('span',{staticClass:\"MatxAxisLabel yLabelEast MatcScatterPlotfDetailsVisible\",attrs:{\"data-dojo-attach-point\":\"yLabelEast\"}},[_vm._v(\"Y\")]),_c('span',{staticClass:\"MatxAxisLabel yMinLabelEast MatcScatterPlotfDetailsVisible\",attrs:{\"data-dojo-attach-point\":\"yMinLabelEast\"}},[_vm._v(\"0\")]),_c('span',{staticClass:\"MatxAxisLabel yMaxLabelEast MatcScatterPlotfDetailsVisible\",attrs:{\"data-dojo-attach-point\":\"yMaxLabelEast\"}},[_vm._v(\"100\")]),_c('span',{staticClass:\"MatxAxisLabel yMinLabel\",attrs:{\"data-dojo-attach-point\":\"yMinLabel\"}}),_c('span',{staticClass:\"MatxAxisLabel bottom25Label MatcScatterPlotfDetailsVisible\",attrs:{\"data-dojo-attach-point\":\"bottom25Label\"}}),_c('span',{staticClass:\"MatxAxisLabel bottom75Label MatcScatterPlotfDetailsVisible\",attrs:{\"data-dojo-attach-point\":\"bottom75Label\"}}),_c('span',{staticClass:\"MatxAxisLabel MatxAxisLabelCntr\",attrs:{\"data-dojo-attach-point\":\"xAxisLabelCntr\"}}),_c('div',{staticClass:\"MatcScatterPlotfTaskCntr\",attrs:{\"data-dojo-attach-point\":\"taskCntr\"}},[_c('div',{class:{'MatcScatterPlotfTaskSelected': _vm.hasOutliers},on:{\"click\":function($event){return _vm.toggleOutlier()}}},[_c('span',{style:(_vm.getOutlierStyle())}),_c('label',[_vm._v(\" \"+_vm._s(_vm.getNLS(\"analytics.distribution.outlier\")))])])]),(_vm.hoverDetails)?_c('ScatterPlotDetails',{attrs:{\"value\":_vm.hoverDetails}}):_vm._e()],1),_c('div',{staticClass:\"MatcScatterPlotHintBar\",attrs:{\"data-dojo-attach-point\":\"hintCntr\"}})])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:'MatcScatterPlotDetails ' + _vm.value.cls,style:('bottom: ' + _vm.value.y +'%; left:' + _vm.value.x +'%')},[_c('span',{staticClass:\"MatcScatterPlotDetailsArrow\"}),_c('div',{staticClass:\"MatcScatterPlotDetailsContainer\"},[_c('table',[_c('tr',[_c('td',[_vm._v(\" \"+_vm._s(_vm.getNLS(\"analytics.distribution.details.duration\"))+\": \")]),_c('td',[_vm._v(\" \"+_vm._s(Math.round(_vm.value.s.duration / 1000))+\" s \")])]),_c('tr',[_c('td',[_vm._v(\" \"+_vm._s(_vm.getNLS(\"analytics.distribution.details.interactions\"))+\": \")]),_c('td',[_vm._v(\" \"+_vm._s(_vm.value.s.interactions)+\" \")])]),_c('tr',[_c('td',[_vm._v(\" \"+_vm._s(_vm.getNLS(\"analytics.distribution.details.screens\"))+\" : \")]),_c('td',[_vm._v(\" \"+_vm._s(_vm.value.s.screenUnique)+\" / \"+_vm._s(_vm.value.s.screenLoads)+\" \")])]),_c('tr',[_c('td',[_vm._v(\" \"+_vm._s(_vm.getNLS(\"analytics.distribution.details.weirdness\"))+\" : \")]),_c('td',[_vm._v(\" \"+_vm._s(Math.round(_vm.value.s.weirdness * 100))+\" \")])]),_c('tr',[_c('td',[_vm._v(\" \"+_vm._s(_vm.getNLS(\"analytics.distribution.details.tasks\"))+\": \")]),_c('td',[_c('div',{staticClass:\"MatcScatterPlotDetailsTaskCntr\"},_vm._l((_vm.value.tasks),function(t){return _c('span',{key:t,staticClass:\"MatcScatterPlotDetailsTask\"},[_vm._v(\" \"+_vm._s(t)+\" \")])}),0)])])])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n<template>\n\n\n            <div :class=\"'MatcScatterPlotDetails ' + value.cls\" :style=\"'bottom: ' + value.y +'%; left:' + value.x +'%'\">\n                <span class=\"MatcScatterPlotDetailsArrow\"></span>\n                <div class=\"MatcScatterPlotDetailsContainer\">\n                    <table>\n                        <tr>\n                            <td>\n                                {{getNLS(\"analytics.distribution.details.duration\")}}:\n                            </td>\n                            <td>\n                                {{Math.round(value.s.duration / 1000)}} s\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                {{getNLS(\"analytics.distribution.details.interactions\")}}:\n                            </td>\n                            <td>\n                                {{value.s.interactions}}\n                            </td>\n                        </tr>\n                        <!-- <tr>\n                            <td>\n                                {{getNLS(\"analytics.distribution.details.errors\")}}:\n                            </td>\n                            <td>\n                                {{value.s.errors}}\n                            </td>\n                        </tr> -->\n                     \n                        <tr>\n                            <td>\n                                {{getNLS(\"analytics.distribution.details.screens\")}} :\n                            </td>\n                            <td>\n                                {{value.s.screenUnique}} / {{value.s.screenLoads}}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                {{getNLS(\"analytics.distribution.details.weirdness\")}} :\n                            </td>\n                            <td>\n                                {{Math.round(value.s.weirdness * 100)}}\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <td>\n                                {{getNLS(\"analytics.distribution.details.tasks\")}}:\n                            </td>\n                            <td>\n                                <div class=\"MatcScatterPlotDetailsTaskCntr\">\n                                    <span v-for=\"t in value.tasks\" :key=\"t\" class=\"MatcScatterPlotDetailsTask\">\n                                        {{t}}\n                                    </span>\n                                </div>\n                            </td>\n                        </tr>\n                       \n                    </table>\n\n                \n                </div>\n            </div>\n</template>\n\n<style lang=\"scss\">\n    @import '../../../style/scatter.scss';\n</style>\n\n<script>\nimport DojoWidget from \"dojo/DojoWidget\";\nexport default {\n    name: 'ScatterPlotDetails',\n    mixins: [DojoWidget],\n    props: ['value'],\n    data: function () {\n        return {\n        }\n    },\n    components: {\n\n    },\n    methods: {\n    },\n    watch: {\n    },\n    mounted() {        \n    }\n}\n</script>","import mod from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ScatterPlotDetails.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ScatterPlotDetails.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ScatterPlotDetails.vue?vue&type=template&id=2c0032f4&\"\nimport script from \"./ScatterPlotDetails.vue?vue&type=script&lang=js&\"\nexport * from \"./ScatterPlotDetails.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ScatterPlotDetails.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\n<template>\n    <div :class=\"'MatcScatterPlot MatcScatterPlot' + mode  \">\n       \n        <div class=\"MatcScatterPlotfActionCntr\" data-dojo-attach-point=\"actionCntr\">\n        </div>\n        <div class=\"MatcScatterPlotCntr\" data-dojo-attach-point=\"cntr\" @click=\"onBackgroundClick\">\n            <span class=\"MatxAxisXLine MatcScatterPlotfScatternVisible MatcScatterPlotDurationHidden\" data-dojo-attach-point=\"xLine\"></span>\n            <span class=\"MatxAxisYLine MatcScatterPlotfScatternVisible MatcScatterPlotDurationHidden\" data-dojo-attach-point=\"yLine\"></span>\n           \n            <div class=\"MatcScatterPlotCanvas\" data-dojo-attach-point=\"canvas\">\n            </div>\n\n            <span class=\"MatxAxisLabel xMaxLabel\" data-dojo-attach-point=\"xMaxLabel\"></span>\n            <span class=\"MatxAxisLabel MatcScatterPlotDropOffHidden yMaxLabel\" data-dojo-attach-point=\"yMaxLabel\"></span>\n            <span class=\"MatxAxisLabel MatcScatterPlotfScatternVisible MatcScatterPlotDurationHidden xMiddleLabel\" data-dojo-attach-point=\"xMiddleLabel\"></span>\n            <span class=\"MatxAxisLabel MatcScatterPlotfScatternVisible MatcScatterPlotDurationHidden yMiddleLabel\" data-dojo-attach-point=\"yMiddleLabel\"></span>\n            <span class=\"MatxAxisLabel minLabel\" data-dojo-attach-point=\"minLabel\">0</span>\n            <span class=\"MatxAxisLabel xLabel \" data-dojo-attach-point=\"xLabel\">X</span>\n            <span class=\"MatxAxisLabel yLabel MatcScatterPlotDropOffHidden\" data-dojo-attach-point=\"yLabel\">Y</span>\n            <span class=\"MatxAxisLabel yLabelEast MatcScatterPlotfDetailsVisible\" data-dojo-attach-point=\"yLabelEast\">Y</span>\n            <span class=\"MatxAxisLabel yMinLabelEast MatcScatterPlotfDetailsVisible\" data-dojo-attach-point=\"yMinLabelEast\">0</span>\n            <span class=\"MatxAxisLabel yMaxLabelEast MatcScatterPlotfDetailsVisible\" data-dojo-attach-point=\"yMaxLabelEast\">100</span>\n            <span class=\"MatxAxisLabel yMinLabel\" data-dojo-attach-point=\"yMinLabel\"></span>\n            <span class=\"MatxAxisLabel bottom25Label MatcScatterPlotfDetailsVisible\" data-dojo-attach-point=\"bottom25Label\"></span>\n            <span class=\"MatxAxisLabel bottom75Label MatcScatterPlotfDetailsVisible\" data-dojo-attach-point=\"bottom75Label\"></span>\n            <span class=\"MatxAxisLabel MatxAxisLabelCntr\" data-dojo-attach-point=\"xAxisLabelCntr\"></span>\n\n            <div class=\"MatcScatterPlotfTaskCntr\" data-dojo-attach-point=\"taskCntr\">\n                <div @click=\"toggleOutlier()\" :class=\"{'MatcScatterPlotfTaskSelected': hasOutliers}\">\n                    <span :style=\"getOutlierStyle()\"></span>\n                    <label> {{getNLS(\"analytics.distribution.outlier\")}}</label>\n                </div> \n                <!-- <div @click=\"clickTask()\" v-if=\"Object.values(selectedTasks).length\">\n                    <span></span>\n                    <label> {{getNLS(\"dash.perf.scatter.no-task\")}}</label>\n                </div> -->\n                <!-- <div v-for=\"task in tasks\" :key=\"task.id\" @click=\"clickTask(task)\">\n                    <span :style=\"getTaskStyle(task)\"></span>\n                    <label>{{task.name}}</label>\n                </div> -->\n            </div>\n\n\n            <ScatterPlotDetails v-if=\"hoverDetails\" :value=\"hoverDetails\"/>\n\n\n        </div>\n\n        <div class=\"MatcScatterPlotHintBar\" data-dojo-attach-point=\"hintCntr\">\n        </div>\n\n    </div>\n</template>\n\n<style lang=\"scss\">\n    @import '../../../style/scatter.scss';\n</style>\n\n<script>\nimport on from 'dojo/on'\nimport lang from 'dojo/_base/lang'\nimport css from 'dojo/css'\nimport Logger from 'common/Logger'\nimport _Color from 'common/_Color'\nimport DomBuilder from 'common/DomBuilder'\nimport Util from 'core/Util'\nimport Analytics from 'dash/Analytics'\nimport DataFrame from 'common/DataFrame'\nimport ScatterPlotDetails from './ScatterPlotDetails'\nimport * as Outlier from 'dash/Outlier'\nimport PerformanceMonitor from 'core/PerformanceMonitor'\n\nexport default {\n    name: 'ScatterPlot',\n    mixins: [_Color, Util],\n    props: ['test', 'app', 'events', 'annotation', 'pub', 'mode', 'yAxis', 'xAxis', 'clusterVars', 'clusterAlgo', 'clusterNorm'],\n    data: function () {\n        return {\n            tasks: [],\n            selectedTasks: {},\n            hasOutliers: true,\n            paddingFactor: 1.1,\n            dialog: false,\n            includeDropOff: false,\n            defaultColor: \"#56A9FC\",\n            outlierColor: '#f83a3a',\n            clusters: [],\n            colors: [ \"#9933cc\", \"#669900\", \"#ff8a00\", \"#cc0000\", \"#000000\", \"#8ad5f0\", \"#d6adeb\", \"#c5e26d\"],\n            bins: 3,\n            hoverDetails: null,\n        }\n    },\n    components: {\n        ScatterPlotDetails\n    },\n    methods: {\n\n        getOutlierStyle () {\n            if (this.hasOutliers) {\n                return `background:${this.outlierColor}; border:none`\n            }\n            return ''\n        },\n\n        getTaskStyle (task) {      \n            if (this.selectedTasks[task.id]) {\n                return `background:${task.color}; border:none`\n            }\n            return ''\n        },\n\n        postCreate() {\n            this.init();\n            this._scatterPoints = {}\n        },\n\n        init() {\n            this.db = new DomBuilder();      \n            this._scatterPoints = {};\n        },\n\n        setValue(test, app, events, annotations) {\n            this.logger.log(-1, \"setValue\", \"enter\");\n            PerformanceMonitor.start('ScatterPlot.setValue()')\n            this.annotations = annotations;\n            this.model = app\n\n            try {\n                const filteredEvents = this.filterEvents(events, annotations);\n                this.df = this.getActionEvents(new DataFrame(filteredEvents));      \n                this.df.sortBy(\"time\");\n        \n                this.tasks = lang.clone(test.tasks).filter(task => task.flow.length >= 2);  \n\n                this.sessionDetails = this.analytics.getSessionDetails(this.df, this.tasks)     \n                this.sessionDetails = Outlier.addWeirdness(this.sessionDetails, this.df) \n                let data = this.analytics.convertSessionDetails(this.sessionDetails)\n\n                if (data.length < 200) {\n                    this.clusters = Outlier.cluster(data, this.clusterVars, this.clusterNorm, this.clusterAlgo)\n                } else {\n                    this.logger.error(\"setValue\", \"Too many events\");\n                    this.hasOutliers = false\n                }\n             \n                this.render();\n            } catch (e) {\n                this.logger.error(\"setValue\", \"Error\");\n                this.logger.sendError(e);\n            }\n            PerformanceMonitor.end('ScatterPlot.setValue()')\n        },\n\n        clickTask(task) {\n            this.selectTask(task);\n            this.render();\n            this.$forceUpdate()\n        },\n\n        toggleOutlier () {\n            this.hasOutliers = !this.hasOutliers\n            this.render();\n            this.$forceUpdate()\n        },\n\n        selectTask(task) {\n            this.selectedTasks[task?.id] = !this.selectedTasks[task?.id];\n            for (let id in this.selectedTasks) {\n                if (id !== task?.id) {\n                    this.selectedTasks[id] = false\n                }\n            }\n        },\n\n        render() {\n            this.logger.log(-1, \"render\", \"enter > \");\n            this.cleanUpTempListener()    \n            this.onBackgroundClick()       \n            this.render_Scatter();\n        },\n\n      \n        onBackgroundClick () {\n            this.setHint(this.db.span(\"MatcHint\", this.getNLS(\"analytics.distribution.hint\")).build());\n            this.unSelectPoint()\n        },\n\n        render_Scatter() {\n            this.logger.log(1, \"render_Scatter\", \"enter\", this.mode);\n\n            delete this._selectedScatterPoint;           \n         \n            this.xLabel.innerHTML = this.getNLS(\"analytics.distribution.details.\" + this.xAxis);\n            this.yLabel.innerHTML = this.getNLS(\"analytics.distribution.details.\" + this.yAxis);\n            this.minLabel.innerHTML = \"0 s\"\n            this.yMinLabel.innerHTML = \"0\"    \n            this.render_Scatter_Points(this.xAxis, this.yAxis)            \n\n        },\n\n        render_Scatter_Points (xAxis, yAxis) {\n            this.logger.log(1, \"render_Scatter_Points\", \"enter > \" + xAxis + \" X \" + yAxis );\n\n  \n            const sessionSummaryDF = this.sessionDetails\n                  \n            const maxXAxis = Math.max(1, Math.ceil(sessionSummaryDF.max(xAxis) * this.paddingFactor));\n            const maxYAxis = Math.max(1, Math.ceil(sessionSummaryDF.max(yAxis) * this.paddingFactor));\n            const meanXAxis = sessionSummaryDF.mean(xAxis);\n            const meanYAxis = sessionSummaryDF.mean(yAxis);\n\n        \n            this.xMaxLabel.innerHTML = Math.ceil(maxXAxis / 1000) + \" s\";\n            this.yMaxLabel.innerHTML = Math.ceil(maxYAxis);\n     \n            const sessions = sessionSummaryDF.data;\n                      \n            for (let i = 0; i < sessions.length; i++) {\n                const s = sessions[i]        \n                const x = s[xAxis]\n                const y = s[yAxis]            \n                this.renderScatterPoint(i,s, x, y, maxXAxis, maxYAxis)               \n            }\n                \n            this.maxYAxis = maxYAxis;\n            this.maxXAxis = maxXAxis;\n            this.meanYAxis = meanYAxis\n            this.meanXAxis = meanXAxis\n\n            this.unSelectPoint()\n        },\n\n        renderScatterPoint(i, s, x, y , maxXAxis, maxYAxis) {\n            const key = s.session;\n            const ms = Math.min(i * 10, 300);\n\n            if (!this._scatterPoints[key]) {\n                const p = this.db.span(\"MatxScatterPoint\").build(this.canvas);\n                p.style.bottom = \"-5%\";\n                p.style.left = (((x / maxXAxis) * 100)) + \"%\";\n                this._scatterPoints[key] = p;\n            }\n\n            const color = this.getPointColor(s, i)\n            const p = this._scatterPoints[key];\n            p.style.background = color\n            this.tempOwn(on(p, \"click\", lang.hitch(this, \"selectPoint\", p, s, x, y, i))); \n            this.tempOwn(on(p, \"mouseover\", lang.hitch(this, \"hoverPoint\", p, s, x, y, i)));\n            this.tempOwn(on(p, \"mouseout\", lang.hitch(this, \"leavePoint\")));   \n            setTimeout(lang.hitch(this, \"animateScatterPoint\", p, x,y, maxXAxis, maxYAxis), ms);\n        },\n\n        animateScatterPoint(p, x, y, maxXAxis, maxYAxis) {\n            p.style.bottom = (((y / maxYAxis) * 100)) + \"%\";\n            p.style.left = (((x / maxXAxis) * 100)) + \"%\";\n        },\n\n        unSelectPoint() {\n            setTimeout(lang.hitch(this, \"setMiddle\", this.meanYAxis, this.maxYAxis, this.meanXAxis, this.maxXAxis), 200);\n        },\n\n        getPointColor (session, i) {       \n            if (this.clusters[i] === -1 && this.hasOutliers) {\n                return this.outlierColor\n            }\n            for (let taskID in this.selectedTasks) {      \n                if (this.selectedTasks[taskID] && session[taskID] && session[taskID].success) {\n                    return this.taskColors[taskID];\n                }          \n            }\n            return this.defaultColor\n        },\n\n        hoverPoint (p, s, x, y) {\n            let posX = x * 100 / this.maxXAxis\n            let posY = y * 100 / this.maxYAxis\n            let cls = ''\n            if (posX > 50) {\n                cls += 'left '\n            } else {\n                cls += 'right '\n            }\n            if (posY > 50) {\n                cls += 'bottom '\n            } else {\n                cls += 'top '\n            }\n            const tasks = []\n            this.tasks.forEach(t => {\n                if (s[t.id]?.success === 1) {\n                    tasks.push(t.name)\n                }\n            })\n            this.hoverDetails = {\n                x: posX,\n                y: posY,\n                cls: cls,\n                s: s,\n                tasks: tasks\n            }\n        },\n\n        leavePoint () {\n            this.hoverDetails = null\n        },\n\n        selectPoint(p, s, x, y, i, e) { \n            this.stopEvent(e);\n            this.setXMiddle(x, this.maxXAxis);\n            this.setYMiddle(y, this.maxYAxis);\n            css.add(this.cntr, \"MatcScatterPlotCntrHover\");\n            this._selectedScatterPoint = p;\n            this.showSessionReplayHint(s.session)\n        },\n\n        showSessionReplayHint(id) {\n            if (this.model) {\n                let url = \"#/apps/\" + this.model.id + \"/replay/\" + id + \".html\";\n                if (this.mode == \"public\") {\n                    url = \"#/examples/\" + this.model.id + \"/replay/\" + id + \".html\";\n                }\n                const hint = this.db.span(\"MatcHint\", this.getNLS(\"analytics.distribution.play\")).build();\n                const a = this.db.a(\"\", this.getNLS(\"analytics.distribution.here\")).build(hint);\n                a.href = url\n                a.target = \"_matcSessionReplay\" + id\n                this.setHint(hint);\n            }\n        },\n\n        /*********************************************************************\n         * Helper\n         *********************************************************************/\n\n\n        setHint(hintNode) {\n            this.hintCntr.innerHTML = \"\";\n            if (hintNode) {\n                this.hintCntr.appendChild(hintNode);\n            }\n        },\n\n        clearPoint() {\n            //this.setMiddle(meanYAxis, maxYAxis, meanXAxis, maxXAxis);\n            css.remove(this.cntr, \"MatcScatterPlotCntrHover\");\n        },\n\n        setMiddle(meanYAxis, maxYAxis, meanXAxis, maxXAxis) {\n            this.setXMiddle(meanXAxis, maxXAxis);\n            this.setYMiddle(meanYAxis, maxYAxis);\n            css.remove(this.cntr, \"MatcScatterPlotCntrHover\");\n        },\n\n        setYMiddle(count, maxYAxis) {\n            this.yMiddleLabel.innerHTML = Math.ceil(count);\n            this.yMiddleLabel.style.bottom = ((count / maxYAxis) * 100) + \"%\";\n            this.yLine.style.bottom = ((count / maxYAxis) * 100) + \"%\";\n        },\n\n        setXMiddle(duration, maxXAxis) {\n            this.xMiddleLabel.innerHTML = Math.ceil(duration / 1000) + \" s\";\n            this.xMiddleLabel.style.left = (((duration / maxXAxis) * 100)) + \"%\";\n            this.xLine.style.left = (((duration / maxXAxis) * 100)) + \"%\";\n        }\n    },\n    watch: {\n        mode (v) {\n            this.mode = v\n            this.render();\n        },\n        yAxis (v) {\n            this.yAxis = v\n            this.render()\n        },\n        xAxis (v) {\n            this.xAxis = v\n            this.render()\n        },\n        clusterVars (v) {\n            this.clusterVars = v\n            this.setValue(this.test, this.app, this.events, this.annotation)\n        },\n        clusterAlgo (v) {\n            this.clusterAlgo = v\n            this.setValue(this.test, this.app, this.events, this.annotation)\n        },\n        clusterNorm (v) {\n            this.clusterNorm = v\n            this.setValue(this.test, this.app, this.events, this.annotation)\n        }\n    },\n    mounted() {        \n        this.analytics = new Analytics();\n        this.logger = new Logger(\"ScatterPlot\");\n        this.db = new DomBuilder();\n        this.setValue(this.test, this.app, this.events, this.annotation)\n    }\n}\n</script>","import mod from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ScatterPlot.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ScatterPlot.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ScatterPlot.vue?vue&type=template&id=5251cfdc&\"\nimport script from \"./ScatterPlot.vue?vue&type=script&lang=js&\"\nexport * from \"./ScatterPlot.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ScatterPlot.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\n<template>\n    <div class=\"MatcDistributionSection\">\n        <div class=\"level\">\n        <div class=\"level-left\">\n          <h2 class=\"title level-item\">\n            <span >{{$t('analytics.distribution.title')}}</span>\n            <HelpButton\n              topic=\"analytics.dist\"\n              :hasNotifications=\"false\"\n            />\n          </h2>\n        </div>\n        <div class=\"level-right level-options\">\n<!--        \n          <DropDownButton\n            class=\"MatcButtonTrans MatcDropDownRight\"\n            :value=\"scatterMode\"\n            @change=\"setScatterMode\"\n            :options=\"scatterOptions\"         \n          /> -->\n\n<!-- \n          <DropDownButton\n            class=\"MatcButtonTrans MatcDropDownRight\"       \n            ref=\"dropDown\"\n            :value=\"viewMode\"\n            @change=\"setViewMode\"\n            :options=\"viewOptions\"         \n          /> -->\n\n          <CheckBox @change=\"onChangeNorm\" :value=\"false\" label=\"zScore\" v-if=\"hasConfig\"/>\n\n          <DropDownButton @change=\"onChangeAlgo\" :value=\"clusterAlgo\" :options=\"clusterAlgoOptions\" v-if=\"hasConfig\"/>\n\n          <DropDownSelect\n            v-if=\"hasConfig\"\n            ref=\"dropDown\"\n            :options=\"clusterOptions\" \n            :l=\"$t('analytics.distribution.cluster-vars')\" \n            @select=\"onChangeCluster\" \n            @algo=\"onChangeAlgo\"\n           />\n        \n    \n        </div>\n      </div>\n  \n          <div class=\"MatcSurveySectionTableCntr\">\n\n            <template v-if=\"events && events.length > 0\">\n      \n              <ScatterPlot \n                  v-if=\"viewMode === 'Scatter'\" \n                  :yAxis=\"yAxis\"\n                  :xAxis=\"xAxis\"\n                  :app=\"app\"\n                  :pub=\"pub\"\n                  :clusterVars=\"clusterVars\"\n                  :clusterAlgo=\"clusterAlgo\"\n                  :clusterNorm=\"clusterNorm\"\n                  :events=\"events\"\n                  :annotation=\"annotation\"\n                  :test=\"test\"/>\n<!-- \n              <OutlierPlot \n                  v-if=\"viewMode === 'Outlier'\" \n                  @selected=\"showSelection\"\n                  :mode=\"viewMode\"\n                  :app=\"app\"\n                  :pub=\"pub\"\n                  :events=\"events\"\n                  :annotation=\"annotation\"\n                  :test=\"test\"/>\n\n              <DistributionTable            \n                v-if=\"viewMode === 'Details'\"\n                :mode=\"viewMode\"\n                :app=\"app\"\n                :pub=\"pub\"\n                :events=\"events\"\n                :annotation=\"annotation\"\n                :test=\"test\" /> -->\n              \n              </template>\n      \n      \n            <span class=\"MatcHint\" v-else>\n              {{$t('analytics.distribution.no-data')}}\n            </span>\n          </div>\n     \n      </div>\n  </template>\n  <style lang=\"scss\">\n      //@import '../../../style/survey_section.scss';\n\n      .MatcDistributionSection .MatcDropDownButtonWidth{\n        min-width: auto;\n        color: #3787f2;\n      }\n\n      .MatcDistributionSection .MatcDropDownButtonWidth:hover{\n        min-width: auto;\n        color: #fff;\n      }\n  </style>\n  <script>\n  import Logger from 'common/Logger'\n  import DropDownButton from 'page/DropDownButton'\n  import CheckBox from 'common/CheckBox'\n  import DropDownSelect from 'page/DropDownSelect'\n  import HelpButton from \"help/HelpButton\";\n  import ScatterPlot from './ScatterPlot'\n  \n  export default {\n      name: 'DistributionSection',\n      mixins:[],\n      props: ['test', 'app', 'events', 'annotation', 'pub'],\n      data: function () {\n          return {\n            xAxis: 'duration',\n            yAxis: 'interactions',\n            hasOutlier: false,\n            hasConfig: false,\n            isLoaded: false,\n            scatterMode: 'duration,interactions',\n            viewMode: 'Scatter',\n            viewOptions:[\n              {value:'Scatter', label: this.$t('analytics.distribution.viewScatter'), event:'scatter'},\n              {value:'Details', label: this.$t('analytics.distribution.viewDetails'), event:'outlier'},\n              {value:'Outlier', label: this.$t('analytics.distribution.viewOutlier'), event:'outlier'}\n            ],\n            selection: [],\n            cols: [\n              {key: \"interactions\", label: \"Interactions\"},\n              {key: \"duration\", label: \"Duration\"},\n              {key: \"screens\", label: \"Test Coverage\"},\n              {key: \"tasks\", label: \"Tasks\"},\n              {key: \"outlierRaw\", label: \"Outlier Raw\"},\n              {key: \"outlierUmap\", label: \"Outlier Umap\"},\n            ],\n            clusterAlgoOptions: [\n                {value: 'optics', label: 'Optics'},\n                {value: 'dbscan', label: 'DBScan'},\n                {value: 'lof', label:' LOF'}\n            ],\n            clusterOptions: [\n                {value: 'duration', label: this.$t('analytics.distribution.details.duration'), check:true,  selected: true},\n                {value: 'interactions', label: this.$t('analytics.distribution.details.interactions'), check:true, selected: true},\n                {value: 'screenLoads', label: this.$t('analytics.distribution.details.screenLoads'), check:true, selected: true},\n                {value: 'screenRatio', label: this.$t('analytics.distribution.details.screenRatio'), check:true, selected: false},\n                \n                {value: 'tasks', label: this.$t('analytics.distribution.details.tasks'), check:true, selected: true},\n                {value: 'weirdness', label: this.$t('analytics.distribution.details.weirdness'), check:true, selected: false},\n                //{value: 'errors', label: this.$t('analytics.distribution.details.errors'), check:true, selected: false}\n            ],\n            clusterAlgo: 'optics', //dbscan\n            clusterNorm: 'minmax', //zScore\n            clusterVars : [\"interactions\", \"duration\", \"screenLoads\", \"tasks\"]\n          }\n      },\n      components: {\n        'HelpButton': HelpButton,\n        'DropDownSelect': DropDownSelect,\n        'DropDownButton': DropDownButton,\n        'ScatterPlot': ScatterPlot,\n        'CheckBox': CheckBox,\n        // 'OutlierPlot':() => import(/* webpackChunkName: \"outlier\" */ './OutlierPlot'),\n        // 'DistributionTable': import(/* webpackChunkName: \"outlier\" */'./DistributionTable.vue'),\n      },\n      computed: {\n       \n      },\n      methods: {\n        onChangeNorm (d) {\n          this.clusterNorm = d ? 'zScore' : 'minmax'\n        },\n        onChangeAlgo (a) {\n          this.clusterAlgo = a\n        },\n        onChangeCluster (d) {\n          let clusterVars = []\n          Object.keys(d).forEach(key => {\n            const selected = d[key]\n            if (selected) {\n              clusterVars.push(key)\n            }\n          })\n          this.clusterVars = clusterVars\n        },\n        setScatterMode (m) {\n          if (m) {\n            let parts = m.split(',')\n            this.xAxis = parts[0]\n            this.yAxis = parts[1]\n          } \n          this.scatterMode = m\n        },\n        setViewMode (m) {\n          this.viewMode = m\n          this.selection = []\n        },\n        showSelection (selection) {\n          this.selection = selection\n        }\n      },\n      mounted () {\n        this.logger = new Logger('DistributionSection')\n        //this.hasConfig = location.href.indexOf('localhost') >= 0\n        this.isLoaded = true       \n      }\n  }\n  </script>","import mod from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DistributionSection.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DistributionSection.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DistributionSection.vue?vue&type=template&id=899a99de&\"\nimport script from \"./DistributionSection.vue?vue&type=script&lang=js&\"\nexport * from \"./DistributionSection.vue?vue&type=script&lang=js&\"\nimport style0 from \"./DistributionSection.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:'TaskCreateDialog ' + _vm.model.type},[_c('div',{staticClass:\"TaskCreateDialogCntr\"},[_c('div',{staticClass:\"FormCntr\"},[_c('div',{staticClass:\"field\"},[_c('label',[_vm._v(\"Name\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.task.name),expression:\"task.name\"}],staticClass:\"input\",attrs:{\"type\":\"text\",\"placeholder\":\"Name\"},domProps:{\"value\":(_vm.task.name)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.$set(_vm.task, \"name\", $event.target.value)}}})]),_c('div',{staticClass:\"field\"},[_c('label',[_vm._v(\"Description\")]),_c('textarea',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.task.description),expression:\"task.description\"}],staticClass:\"input\",attrs:{\"type\":\"text\",\"placeholder\":\"An explaination for the users\"},domProps:{\"value\":(_vm.task.description)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.$set(_vm.task, \"description\", $event.target.value)}}})]),_c('div',[_c('label',[_vm._v(\"Expected Steps\")]),_c('p',{staticClass:\"MatcHint mb-16\"},[_vm._v(\"Click in the simulator to add steps. You can remove steps that are not needed by clicking on them.\")]),_c('div',{staticClass:\"StepCntr form-group\"},_vm._l((_vm.steps),function(step,i){return _c('div',{key:i,staticClass:\"Step\"},[(i > 0)?_c('span',{staticClass:\"mdi mdi-arrow-right\"}):_vm._e(),_c('div',{staticClass:\"StepDetails\"},[_vm._v(\" \"+_vm._s(step.type)+\" - \"+_vm._s(step.label)+\" \"),_c('div',{staticClass:\"removePopup\",on:{\"click\":function($event){return _vm.removeEvent(i)}}},[_c('span',{staticClass:\"mdi\"},[_vm._v(\"Remove\")])])])])}),0),_c('div',{staticClass:\"form-group\"},[_c('CheckBox',{attrs:{\"label\":\"Strict matching. No events between are allowed.\",\"value\":_vm.task.strict},on:{\"change\":_vm.setStrict}})],1),_c('div',{staticClass:\"form-group\"},[_c('CheckBox',{attrs:{\"label\":\"Record only screen views\",\"value\":_vm.recordOnlyScreenViews},on:{\"change\":_vm.setRecordOnlyScreenView}})],1)])]),_c('div',{ref:\"simCntr\",staticClass:\"SimCntr\"},[_c('div',{ref:\"wrapper\",staticClass:\"SimWrapper\"}),(_vm.abScreens && _vm.abScreens.length > 0)?_c('div',{staticClass:\"ABSelector\"},[_c('p',{staticClass:\"MatcHint\"},[_vm._v(\" Select the next screen to show \")]),_vm._l((_vm.abScreens),function(box){return _c('div',{key:box.id,staticClass:\"button is-primary\",on:{\"click\":function($event){return _vm.selectABLine(box)}}},[_vm._v(\" \"+_vm._s(box.name)+\" \")])})],2):_vm._e()])]),_c('div',{staticClass:\"buttons mt-16\"},[_c('a',{staticClass:\"button is-primary\",on:{\"click\":_vm.onSave}},[_vm._v(\"Save\")]),_c('a',{staticClass:\"button is-text\",on:{\"click\":_vm.onCancel}},[_vm._v(\"Cancel\")])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n<template>\n  <div :class=\"'TaskCreateDialog ' + model.type\">\n    <div class=\"TaskCreateDialogCntr\">\n      <div class=\"FormCntr\" >\n\n          <div class=\"field\">\n            <label>Name</label>\n            <input  v-model=\"task.name\" type=\"text\" class=\"input\" placeholder=\"Name\"  />\n          </div>\n\n          <div class=\"field\">\n            <label>Description</label>\n            <textarea  v-model=\"task.description\" type=\"text\" class=\"input\"  placeholder=\"An explaination for the users\"  />\n          </div>\n\n\n\n          <div>\n            <label>Expected Steps</label>\n            <p class=\"MatcHint mb-16\">Click in the simulator to add steps. You can remove steps that are not needed by clicking on them.</p>\n            <div class=\"StepCntr form-group\">\n              <div v-for=\"(step, i) in steps\" :key=\"i\" class=\"Step\">\n                <span class=\"mdi mdi-arrow-right\" v-if=\"i > 0\"/>\n                <div class=\"StepDetails\">\n                    {{step.type}} -\n                    {{step.label}}\n                    <div class=\"removePopup\" @click=\"removeEvent(i)\">\n                      <span class=\"mdi\">Remove</span>\n                    </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"form-group\">\n               <CheckBox label=\"Strict matching. No events between are allowed.\" :value=\"task.strict\"  @change=\"setStrict\"/>\n            </div>\n            <div class=\"form-group\">\n              <CheckBox label=\"Record only screen views\" :value=\"recordOnlyScreenViews\"  @change=\"setRecordOnlyScreenView\"/>\n            </div>\n          </div>\n\n      </div>\n\n      <div class=\"SimCntr\" ref=\"simCntr\">\n\n        <div class=\"SimWrapper\" ref=\"wrapper\">\n\n        </div>\n\n        <div v-if=\"abScreens && abScreens.length > 0\" class=\"ABSelector\">\n          <p class=\"MatcHint\">\n            Select the next screen to show\n          </p>\n          <div v-for=\"box in abScreens\" :key=\"box.id\" class=\"button is-primary\" @click=\"selectABLine(box)\">\n            {{box.name}}\n          </div>\n        </div>\n\n      </div>\n\n    </div>\n\n\n    <div class=\"buttons mt-16\">\n      <a class=\"button is-primary\" @click=\"onSave\">Save</a>\n      <a class=\"button is-text\" @click=\"onCancel\" >Cancel</a>\n    </div>\n\n  </div>\n</template>\n<style lang=\"scss\">\n  @import '../../../style/scss/task_create_dialog.scss';\n</style>\n<script>\nimport DojoWidget from \"dojo/DojoWidget\";\nimport lang from \"dojo/_base/lang\";\nimport on from \"dojo/on\";\nimport Logger from \"common/Logger\";\nimport CheckBox from \"common/CheckBox\";\nimport Simulator from \"core/Simulator\";\nimport Util from \"core/Util\";\nimport domGeom from \"dojo/domGeom\";\n\nexport default {\n  name: \"TaskCreateDialog\",\n  props: ['model'],\n  mixins: [Util, DojoWidget],\n  data: function() {\n    return {\n      hash: 'NoHashTaskCreate',\n      recordOnlyScreenViews: true,\n      abScreens: null,\n      ignoreFirstEvent: false,\n      task: {\n        name: '',\n        description: '',\n        flow:[]\n      },\n      ignoredEvents: [\n        \"SessionStart\",\n        \"ScreenAnimation\",\n        \"Animation\",\n        \"OverlayRemoveAnimation\",\n        \"OverlayShowAnimation\",\n        \"MouseOut\",\n        \"MouseOver\",\n        \"WidgetInit\",\n        \"ValidationOK\"\n      ]\n    };\n  },\n  components: {\n    'CheckBox': CheckBox\n  },\n  computed: {\n    steps () {\n      return this.task.flow.map(event => {\n        return {\n          screen: this.getScreenName(event.screen),\n          widget: this.getWidgetName(event.widget),\n          type:  this.getEventLabelWithState(event),\n          label: event.widget ? this.getWidgetName(event.widget) + ' @ ' + this.getScreenName(event.screen): this.getScreenName(event.screen)\n        }\n      })\n    }\n  },\n  methods: {\n\n    getEventLabelWithState (event) {\n      if (event.state && (event.type === 'WidgetClick' || event.type === 'WidgetChange')) {\n        return this.getEventStateLabel(event.state)\n      }\n      return this.getEventLabel(event.type)\n    },\n\n    setRecordOnlyScreenView (v) {\n      this.recordOnlyScreenViews = v\n    },\n\n    postCreate () {\n      this.logger = new Logger(\"TaskCreateDialog\");\n      this.logger.log(-1, \"postCreate\", \"enter > \" + this.appID + \"> \" + this.hash);\n      setTimeout(() => {\n        this.createSimulator()\n      }, 500)\n    },\n\n    createSimulator () {\n      const wrapper = this.$refs.wrapper\n      const pos = this.resizeSimulatorContainer(this.model, this.$refs.simCntr, 0.7);\n      wrapper.style.width = pos.w + 'px'\n      wrapper.style.height = pos.h + 'px'\n      this.simulator = this.$new(Simulator, {\n          isDesktopTest: true,\n          mode: \"recordFlow\",\n          logData: false\n      });\n      this.simulator.setHash(this.hash)\n      this.tempOwn(on(this.simulator, \"event\", lang.hitch(this, \"onEvent\")));\n      this.simulator.placeAt(wrapper);\n      this.simulator.scrollListenTarget = \"parent\";\n      this.simulator.startup();\n      this.simulator.abSelector = (lines, callback) => {this.showABDialog(lines, callback)}\n      this.simulator.setModel(this.model);\n    },\n\n    async showABDialog (lines, callback) {\n      this.logger.log(-1,  'showABDialog',  'enter > ', lines)\n      this.abCallback = callback\n      this.abLines = lines\n      this.abScreens = lines.map(line => {\n        let to = line.to\n        if (this.model.screens[to]) {\n          return this.model.screens[to]\n        }\n        if (this.model.widgets[to]) {\n          return this.model.widgets[to]\n        }\n      })\n\n    },\n\n    selectABLine (box) {\n      this.logger.log(-1,  'selectABLine',  'enter > ', box)\n      if (this.abLines && this.abCallback) {\n       let selectedLine = this.abLines.find(l => l.to === box.id)\n       this.abCallback(selectedLine)\n      }\n\n      this.abLines = null\n      this.abScreens = null\n      this.abCallback = null\n    },\n\n    resizeSimulatorContainer (app, node) {\n        let pos = domGeom.position(node)\n        pos.h = 600\n        if (app.type == 'smartphone') {\n            // there might be wide screen apps\n            if (app.screenSize.h < app.screenSize.w) {\n              this.logger.log(-1,  'resizeSimulatorContainer', 'Wide screen')\n \n              pos = this.getScaledSize(pos, \"width\", app);\n            } else {\n              pos = this.getScaledSize(pos, \"height\", app);\n            }\n            \n        } else {\n        \n            pos = this.getScaledSize(pos, \"width\", app);\n        }\n        return pos\n    },\n\n\n    onEvent (event) {\n      this.logger.log(-1,  'onEvent',  'enter > ignoreFirstEvent:' + this.ignoreFirstEvent, event)\n\n      if (this.recordOnlyScreenViews) {\n\n        if (event.type === 'ScreenLoaded' || event.type === 'OverlayLoaded' ) {\n          if (this.ignoreFirstEvent) {\n            this.logger.log(-1,  'onEvent',  'ignore first event')\n            this.ignoreFirstEvent = false\n            return\n          }\n          this.task.flow.push({\n            screen: event.screen,\n            widget: event.widget,\n            type: event.type,\n            state: event.state\n          });\n        }\n\n      } else  if (this.ignoredEvents.indexOf(event.type) < 0 ) {\n\n        if (this.ignoreFirstEvent) {\n          this.logger.log(-1,  'onEvent',  'ignore first event')\n          this.ignoreFirstEvent = false\n          return\n        }\n        this.task.flow.push({\n          screen: event.screen,\n          widget: event.widget,\n          type: event.type,\n          state: event.state\n        });\n      }\n\n    },\n\n    removeEvent (i) {\n      this.task.flow.splice(i, 1);\n    },\n\n    setStrict (value) {\n      this.task.strict = value;\n    },\n\n    onCancel () {\n      this.emit(\"close\", {});\n    },\n\n    onSave() {\n      this.task.flow.sort((a, b) => {\n        return a.time - b.time;\n      });\n      this.emit(\"save\", this.task);\n    },\n\n    getValue () {\n      return this.task\n    },\n\n    setValue (task) {\n      this.task = lang.clone(task)\n    },\n\n    cleanUp: function() {\n      this.cleanUpTempListener();\n    }\n  },\n  mounted() {}\n};\n</script>","import mod from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TaskCreateDialog.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TaskCreateDialog.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./TaskCreateDialog.vue?vue&type=template&id=143617ea&\"\nimport script from \"./TaskCreateDialog.vue?vue&type=script&lang=js&\"\nexport * from \"./TaskCreateDialog.vue?vue&type=script&lang=js&\"\nimport style0 from \"./TaskCreateDialog.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcDashTaskPerfGram\"},[_vm._m(0),_c('div',{staticClass:\"MatcDashTaskPerfActionCntr\",attrs:{\"data-dojo-attach-point\":\"actionCntr\"}}),_c('div',{staticClass:\"MatcDashTaskPerfGramCntr\",attrs:{\"data-dojo-attach-point\":\"cntr\"}},[_c('span',{staticClass:\"MatxAxisXLine MatcDashTaskPerfScatternVisible MatcDashTaskPerfGramDurationHidden\",attrs:{\"data-dojo-attach-point\":\"xLine\"}}),_c('span',{staticClass:\"MatxAxisYLine MatcDashTaskPerfScatternVisible MatcDashTaskPerfGramDurationHidden\",attrs:{\"data-dojo-attach-point\":\"yLine\"}}),_c('div',{staticClass:\"MatcDashTaskPerfGramCanvas\",attrs:{\"data-dojo-attach-point\":\"canvas\"}}),_c('span',{staticClass:\"MatxAxisLabel xMaxLabel\",attrs:{\"data-dojo-attach-point\":\"xMaxLabel\"}}),_c('span',{staticClass:\"MatxAxisLabel MatcDashTaskPerfGramDropOffHidden yMaxLabel\",attrs:{\"data-dojo-attach-point\":\"yMaxLabel\"}}),_c('span',{staticClass:\"MatxAxisLabel MatcDashTaskPerfScatternVisible MatcDashTaskPerfGramDurationHidden xMiddleLabel\",attrs:{\"data-dojo-attach-point\":\"xMiddleLabel\"}}),_c('span',{staticClass:\"MatxAxisLabel MatcDashTaskPerfScatternVisible MatcDashTaskPerfGramDurationHidden yMiddleLabel\",attrs:{\"data-dojo-attach-point\":\"yMiddleLabel\"}}),_c('span',{staticClass:\"MatxAxisLabel minLabel\",attrs:{\"data-dojo-attach-point\":\"minLabel\"}},[_vm._v(\"0\")]),_c('span',{staticClass:\"MatxAxisLabel xLabel \",attrs:{\"data-dojo-attach-point\":\"xLabel\"}},[_vm._v(\"X\")]),_c('span',{staticClass:\"MatxAxisLabel yLabel MatcDashTaskPerfGramDropOffHidden\",attrs:{\"data-dojo-attach-point\":\"yLabel\"}},[_vm._v(\"Y\")]),_c('span',{staticClass:\"MatxAxisLabel yLabelEast MatcDashTaskPerfDetailsVisible\",attrs:{\"data-dojo-attach-point\":\"yLabelEast\"}},[_vm._v(\"Y\")]),_c('span',{staticClass:\"MatxAxisLabel yMinLabelEast MatcDashTaskPerfDetailsVisible\",attrs:{\"data-dojo-attach-point\":\"yMinLabelEast\"}},[_vm._v(\"0\")]),_c('span',{staticClass:\"MatxAxisLabel yMaxLabelEast MatcDashTaskPerfDetailsVisible\",attrs:{\"data-dojo-attach-point\":\"yMaxLabelEast\"}},[_vm._v(\"100\")]),_c('span',{staticClass:\"MatxAxisLabel yMinLabel\",attrs:{\"data-dojo-attach-point\":\"yMinLabel\"}}),_c('span',{staticClass:\"MatxAxisLabel bottom25Label MatcDashTaskPerfDetailsVisible\",attrs:{\"data-dojo-attach-point\":\"bottom25Label\"}}),_c('span',{staticClass:\"MatxAxisLabel bottom75Label MatcDashTaskPerfDetailsVisible\",attrs:{\"data-dojo-attach-point\":\"bottom75Label\"}}),_c('span',{staticClass:\"MatxAxisLabel MatxAxisLabelCntr\",attrs:{\"data-dojo-attach-point\":\"xAxisLabelCntr\"}}),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.hasTaskSelector),expression:\"hasTaskSelector\"}],staticClass:\"MatcDashTaskPerfTaskCntr\",attrs:{\"data-dojo-attach-point\":\"taskCntr\"}}),_c('div',{staticClass:\"MatcDashTaskPerfDropCntr\",attrs:{\"data-dojo-attach-point\":\"dropoffCntr\"}},[_c('CheckBox',{attrs:{\"label\":\"Show Dropoff\"},on:{\"change\":_vm.onChangeFunnelDropOff}})],1)]),_c('div',{staticClass:\"MatcDashTaskPerHintBar\",attrs:{\"data-dojo-attach-point\":\"hintCntr\"}})])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcToolbarTabContainer\"},[_c('div',{staticClass:\"MatcToolbarTabs\",attrs:{\"data-dojo-attach-point\":\"tabsCntr\"}})])}]\n\nexport { render, staticRenderFns }","\n<template>\n     <div class=\"MatcDashTaskPerfGram\">\n\t\t\t<div class=\"MatcToolbarTabContainer\">\n\t\t\t\t<div class=\"MatcToolbarTabs\" data-dojo-attach-point=\"tabsCntr\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"MatcDashTaskPerfActionCntr\" data-dojo-attach-point=\"actionCntr\">\n\t\t\t</div>\n\t\t\t\t<div class=\"MatcDashTaskPerfGramCntr\" data-dojo-attach-point=\"cntr\">\n\t\t\t\t\t<span class=\"MatxAxisXLine MatcDashTaskPerfScatternVisible MatcDashTaskPerfGramDurationHidden\" data-dojo-attach-point=\"xLine\"></span>\n\t\t\t\t\t<span class=\"MatxAxisYLine MatcDashTaskPerfScatternVisible MatcDashTaskPerfGramDurationHidden\" data-dojo-attach-point=\"yLine\"></span>\n\t\t\t\t\t<div class=\"MatcDashTaskPerfGramCanvas\" data-dojo-attach-point=\"canvas\">\n\t\t\t\t\t</div>\n\t\t\t\t\t<span class=\"MatxAxisLabel xMaxLabel\" data-dojo-attach-point=\"xMaxLabel\"></span>\n\t\t\t\t\t<span class=\"MatxAxisLabel MatcDashTaskPerfGramDropOffHidden yMaxLabel\" data-dojo-attach-point=\"yMaxLabel\"></span>\n\t\t\t\t\t<span class=\"MatxAxisLabel MatcDashTaskPerfScatternVisible MatcDashTaskPerfGramDurationHidden xMiddleLabel\" data-dojo-attach-point=\"xMiddleLabel\"></span>\n\t\t\t\t\t<span class=\"MatxAxisLabel MatcDashTaskPerfScatternVisible MatcDashTaskPerfGramDurationHidden yMiddleLabel\" data-dojo-attach-point=\"yMiddleLabel\"></span>\n\t\t\t\t\t<span class=\"MatxAxisLabel minLabel\" data-dojo-attach-point=\"minLabel\">0</span>\n\t\t\t\t\t<span class=\"MatxAxisLabel xLabel \"  data-dojo-attach-point=\"xLabel\">X</span>\n\t\t\t\t\t<span class=\"MatxAxisLabel yLabel MatcDashTaskPerfGramDropOffHidden\" data-dojo-attach-point=\"yLabel\">Y</span>\n\n\t\t\t\t\t<span class=\"MatxAxisLabel yLabelEast MatcDashTaskPerfDetailsVisible\" data-dojo-attach-point=\"yLabelEast\">Y</span>\n\t\t\t\t\t<span class=\"MatxAxisLabel yMinLabelEast MatcDashTaskPerfDetailsVisible\" data-dojo-attach-point=\"yMinLabelEast\">0</span>\n\t\t\t\t\t<span class=\"MatxAxisLabel yMaxLabelEast MatcDashTaskPerfDetailsVisible\" data-dojo-attach-point=\"yMaxLabelEast\">100</span>\n\t\t\t\t\t<span class=\"MatxAxisLabel yMinLabel\" data-dojo-attach-point=\"yMinLabel\"></span>\n\n\t\t\t\t\t<span class=\"MatxAxisLabel bottom25Label MatcDashTaskPerfDetailsVisible\" data-dojo-attach-point=\"bottom25Label\"></span>\n\t\t\t\t\t<span class=\"MatxAxisLabel bottom75Label MatcDashTaskPerfDetailsVisible\" data-dojo-attach-point=\"bottom75Label\"></span>\n\n\t\t\t\t\t<span class=\"MatxAxisLabel MatxAxisLabelCntr\" data-dojo-attach-point=\"xAxisLabelCntr\"></span>\n\n\n\t\t\t\t\t<div class=\"MatcDashTaskPerfTaskCntr\" data-dojo-attach-point=\"taskCntr\" v-show=\"hasTaskSelector\">\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"MatcDashTaskPerfDropCntr\" data-dojo-attach-point=\"dropoffCntr\">\n\t\t\t\t\t\t<CheckBox label=\"Show Dropoff\" @change=\"onChangeFunnelDropOff\"/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t</div>\n\n\t\t\t<div class=\"MatcDashTaskPerHintBar\" data-dojo-attach-point=\"hintCntr\">\n\t\t\t</div>\n\n\t</div>\n</template>\n<style lang=\"css\">\n  \n</style>\n\n<style lang=\"scss\">\n    @import '../../../style/task_perf_gram.scss';\n\t@import '../../../style/toolbar/tab.scss';\n</style>\n\n\n<script>\nimport DojoWidget from 'dojo/DojoWidget'\nimport on from 'dojo/on'\nimport lang from 'dojo/_base/lang'\nimport css from 'dojo/css'\nimport Logger from 'common/Logger'\nimport _Color from 'common/_Color'\nimport DomBuilder from 'common/DomBuilder'\nimport CheckBox from 'common/CheckBox'\nimport Util from 'core/Util'\nimport Analytics from 'dash/Analytics'\nimport * as d3 from \"d3\"\nimport DataFrame from 'common/DataFrame'\n\n\n\nexport default {\n    name: 'TaskPerfGram',\n    mixins:[_Color, Util, DojoWidget],\n    data: function () {\n        return {\n            x_prefix: \"\",\n            paddingFactor: 1.1,\n            tab: \"scatter\",// \"scatter\",\n            tabs: {},\n            dialog: false,\n\t\t\tincludeDropOff: false,\n            colors: [\"#56A9FC\", \"#9933cc\", \"#669900\", \"#ff8a00\", \"#cc0000\", \"#000000\", \"#8ad5f0\", \"#d6adeb\", \"#c5e26d\"],\n            bins: 3,\n\t\t\tsmoothLineFunction: d3.line()\n\t\t\t\t.curve(d3.curveBasis)\n\t\t\t\t.x((d) => {\n\t\t\t\t\treturn d.x-.5; \n\t\t\t\t }).y((d) => { \n\t\t\t\t\treturn d.y-.5; \n\t\t\t\t}),\n\t\t\tstraightLineFunction: d3.line()\n\t\t\t\t.x((d) => { \n\t\t\t\t\treturn d.x-.5; \n\t\t\t\t})\n\t\t\t\t.y((d) => { \n\t\t\t\t\treturn d.y-.5; \n\t\t\t}),\n\t\t\tcanvasPos:{\n\t\t\t\tw:800,\n\t\t\t\th:450\n\t\t\t},\n\t\t\thasTaskSelector: true\n        }\n    },\n    components: {\n\t\tCheckBox\n\t},\n    methods: {\n        postCreate (){\n\t\t\tthis.log = new Logger(\"TaskPerfGram\");\n\t\t\tthis.init();\n\t\t\tthis._scatterPoints= {}\n\t\t},\n\n\t\tinit (){\n\t\t\tthis.db = new DomBuilder();\n\t\t\tthis.addTab(\"scatter\", \"MatcToolbarTabActive\");\n\t\t\tthis.addTab(\"details\", \"\");\n\t\t\tthis.addTab(\"funnelDurartion\", \"\");\n\t\t\tthis.addTab(\"funnelInteraction\", \"\");\n\t\t\tthis._scatterPoints = {};\n\t\t},\n\n\t\taddTab (key, cls){\n\t\t\tvar tab = this.db.a(cls, this.getNLS(\"dash.perf.tab.\" + key)).build(this.tabsCntr);\n\t\t\tthis.own(on(tab, \"mousedown\", lang.hitch(this, \"setTab\", key)));\n\t\t\tthis.tabs[key] = tab;\n\t\t},\n\n\t\tsetTab (tab){\n\t\t\tif (this.tab != tab){\n\t\t\t\tthis.lastTab = this.tab;\n\t\t\t\tthis.tab = tab;\n\t\t\t\tfor (var t in this.tabs){\n\t\t\t\t\tcss.remove(this.tabs[t], \"MatcToolbarTabActive\");\n\t\t\t\t}\n\t\t\t\tif (this.tabs[tab]){\n\t\t\t\t\tcss.add(this.tabs[tab], \"MatcToolbarTabActive\");\n\t\t\t\t}\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t},\n\n\t\tsetModel (m) {\n\t\t\tthis.model = m\n\t\t},\n\n\t\tsetValue (df, task, annotations, tasks){\n\t\t\tthis.df = df;\n\t\t\tthis.task = task;\n\t\t\tthis.annotations = annotations;\n\t\t\tthis.tasks = tasks;\n\t\t\tthis.renderTasks(tasks);\n\t\t\tthis.selectTask(task); // will call render\n\t\t\tthis.render();\n\t\t},\n\n\t\trenderTasks (tasks){\n\t\t\tthis.log.log(-1, \"renderTasks\", \"enter\");\n\t\t\tthis.taskDivs = {};\n\t\t\tthis.taskCircles = {};\n\t\t\tthis.selectedTasks = {};\n\t\t\tthis.taskColors = {};\n\t\t\tfor(let i=0; i< tasks.length; i++){\n\t\t\t\tconst task = tasks[i];\n\t\t\t\tif (task.flow.length >= 2) {\n\t\t\t\t\tthis.selectedTasks[task.id] = false;\n\t\t\t\t\tthis.taskColors[task.id] = this.colors[i % this.colors.length];\n\n\t\t\t\t\tconst div = this.db.div().build(this.taskCntr);\n\t\t\t\t\tconst circle = this.db.span(\"\").build(div);\n\n\t\t\t\t\tthis.db.label(\"\", tasks[i].name).build(div);\n\t\t\t\t\tthis.taskCircles[task.id] = circle;\n\t\t\t\t\tthis.taskDivs[task.id] = div;\n\n\t\t\t\t\tthis.own(on(div, \"click\", lang.hitch(this, \"clickTask\",task, i)));\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tclickTask (task){\n\t\t\tthis.selectTask(task);\n\t\t\tthis.render(true);\n\t\t},\n\n\t\tselectTask (task){\n\t\t\tthis.selectedTasks[task.id] = !this.selectedTasks[task.id];\n\t\t\tfor (let id in this.selectedTasks){\n\t\t\t\tconst circle = this.taskCircles[id];\n\t\t\t\tconst div = this.taskDivs[id];\n\t\t\t\t\n\t\t\t\tif (div &&  circle){\n\t\t\t\t\tif (this.selectedTasks[id]){\n\t\t\t\t\t\tcss.add(div, \"MatcDashTaskPerfTaskSelected\");\n\t\t\t\t\t\tcircle.style.background = this.taskColors[id];\n\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcss.remove(div, \"MatcDashTaskPerfTaskSelected\");\n\t\t\t\t\t\tcircle.style.background = \"\"; \t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t},\n\n\t\trender (changeTask){\n\t\t\tthis.log.log(-1, \"render\", \"enter > \" + changeTask);\n\t\t\tthis.cleanUpTempListener()\n\t\t\tif (this.task.flow && this.task.flow.length >= 2) {\n\t\t\t\tif (!changeTask && this[\"clean_\" + this.lastTab]){\n\t\t\t\t\tthis[\"clean_\" + this.lastTab](lang.hitch(this, \"renderTab\", changeTask));\n\t\t\t\t} else {\n\t\t\t\t\tthis.renderTab(changeTask);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcss.add(this.tabsCntr, \"hidden\");\n\t\t\t\tcss.add(this.cntr, \"hidden\");\n\t\t\t\tthis.db.h2(\"\", this.getNLS(\"dash.perf.no-flow-title\")).build(this.domNode);\n\t\t\t\tthis.db.div(\"MatcMarginTop\", this.getNLS(\"dash.perf.no-flow-msg\"), true).build(this.domNode);\n\t\t\t}\n\t\t},\n\n\t\trenderTab (changeTask){\n\t\t\tif (this.tab === 'dropoff' || this.tab === 'funnelDurartion' || this.tab === 'funnelInteraction') {\n\t\t\t\tcss.add(this.domNode, \"MatcDashTaskPerfGramHideTasks\");\n\t\t\t} else {\n\t\t\t\tcss.remove(this.domNode, \"MatcDashTaskPerfGramHideTasks\");\n\t\t\t}\n\n\t\t\tif (this.tab === 'funnelDurartion' || this.tab === 'funnelInteraction') {\n\t\t\t\tcss.remove(this.domNode, \"MatcDashTaskPerfGramHideDropoff\");\n\t\t\t} else {\n\t\t\t\tcss.add(this.domNode, \"MatcDashTaskPerfGramHideDropoff\");\n\t\t\t}\n\t\t\t\t\n\n\t\t\tif (this[\"render_\" + this.tab]){\n\t\t\t\tthis[\"render_\" + this.tab](this.df, this.task, this.annotations, this.tasks, changeTask);\n\t\t\t} else {\n\t\t\t\tthis.log.error(\"render\", \"No render for \" + this.tab);\n\t\t\t}\n\t\t},\n\n\t\t/*********************************************************************\n\t\t * Funnel Interaction stuff\n\t\t *********************************************************************/\n\n\t\tonChangeFunnelDropOff (value) {\n\t\t\tthis.log.log(-1, \"onChangeFunnelDropOff\", \"enter > :\", this.tab);\n\t\t\tthis.includeDropOff = value\n\t\t\n\t\t\t// fixme: this should be updates with cool animations\n\t\t\tif (this.tab === 'funnelDurartion') {\n\t\t\t\tthis.clean_funnelDurartion()\n\t\t\t\tthis.render_funnelDurartion(this.df, this.task, true)\n\t\t\t}\n\n\t\t\tif (this.tab === 'funnelInteraction') {\n\t\t\t\tthis.clean_funnelInteraction()\n\t\t\t\tthis.render_funnelInteraction(this.df, this.task, true)\n\t\t\t}\n\n\t\t},\n\n\n\t\trender_funnelInteraction(df, task) { //\n\t\t\tthis.log.log(-1, \"render_funnelInteractions\", \"enter > :\", this.includeDropOff);\n\n\t\t\tcss.add(this.domNode, \"MatcDashTaskPerfGramFunnel\");\n\t\t\n\t\t\tthis.xLabel.innerHTML = \"\"; \n\t\t\tthis.yLabel.innerHTML = \"\";\n\t\t\tthis.yLabelEast.innerHTML = \"\";\n\t\t\tthis.bottom25Label.innerHTML = \"\";\n\t\t\tthis.bottom75Label.innerHTML = \"\";\n\t\t\tthis.xMaxLabel.innerHTML = \"\";\n\t\t\tthis.yMaxLabel.innerHTML = \"\"\n\t\t\tthis.yMaxLabel.innerHTML = \"\"\n\t\t\tthis.yMinLabelEast.innerHTML = \"\"\n\t\t\tthis.minLabel.innerHTML = \"\"\n\t\t\tthis.yMinLabel.innerHTML = \"0\"\n\n\t\t\tconst offset = 60\n\t\t\tconst flow = task.flow\n\t\t\tconst stepWidth = (this.canvasPos.w - (offset * 2)) / (flow.length - 1)\n\t\t\tconst canvasHeight = this.canvasPos.h - 20\n\t\t\n\t\t\tconst analytics = new Analytics();\n\t\t\tconst stepData = analytics.getFunnelInteraction(df, task, this.includeDropOff)\t\n\t\t\tconst maxIteration = analytics.getFunnelMax(stepData) +1\n\t\t\tthis._render_funnel_steps(stepData, maxIteration, flow, stepWidth, offset, canvasHeight)\n\t\t\tthis._render_funnel_lines(stepData, maxIteration, stepWidth, offset, canvasHeight, duration => {return Math.round(duration)})\n\t\t\n\t\t\tthis.yMaxLabel.innerHTML = maxIteration\n\t\t\tthis.tempOwn(on(this.cntr, \"click\", () => this.reset_funnel_selection()));\n\t\t\n\t\t},\n\n\t\tclean_funnelInteraction (callback) {\n\t\t\tthis.log.log(-1, \"clean_funnelInteractions\", \"enter > :\");\n\n\t\t\tcss.remove(this.domNode, \"MatcDashTaskPerfGramFunnel\");\n\t\t\t\n\t\t\tif (this._stepDivs) {\n\t\t\t\tthis._stepDivs.forEach(div => {\n\t\t\t\t\tdiv.parentNode.removeChild(div)\n\t\t\t\t})\n\t\t\t\tdelete this._stepDivs\n\t\t\t}\n\t\t\tif (this.funnelSVG) {\n\t\t\t\tthis.canvas.innerHTML = \"\"\n\t\t\t\tdelete this.funnelSVG\n\t\t\t}\n\t\t\tthis.xAxisLabelCntr.innerHTML = \"\"\n\t\t\tthis.yMinLabel.innerHTML = \"\"\n\t\t\tif (callback) {\n\t\t\t\tcallback()\n\t\t\t}\n\t\t},\n\n\n\t\t/*********************************************************************\n\t\t * Funnel Duration stuff\n\t\t *********************************************************************/\n\n\n\t\trender_funnelDurartion (df, task) {\n\t\t\tthis.log.log(-1, \"render_funnelDurartion\", \"enter > :\");\n\n\t\t\tcss.add(this.domNode, \"MatcDashTaskPerfGramFunnel\");\n\n\t\t\tthis.xLabel.innerHTML = \"\"; //this.getNLS(\"dash.perf.details.xLabel\");\n\t\t\tthis.yLabel.innerHTML = \"\";//this.getNLS(\"dash.perf.details.yLabel\");\n\t\t\tthis.yLabelEast.innerHTML = \"\"; //this.getNLS(\"dash.perf.details.yLabelEast\");\n\t\t\tthis.bottom25Label.innerHTML = \"\";\n\t\t\tthis.bottom75Label.innerHTML = \"\";\n\t\t\tthis.xMaxLabel.innerHTML = \"\";\n\t\t\tthis.yMaxLabel.innerHTML = \"\"\n\t\t\tthis.yMaxLabel.innerHTML = \"\"\n\t\t\tthis.yMinLabelEast.innerHTML = \"\"\n\t\t\tthis.minLabel.innerHTML = \"\"\n\t\t\tthis.yMinLabel.innerHTML = \"0\"\n\n\t\t\tconst offset = 60\n\t\t\tconst flow = task.flow\n\t\t\tconst stepWidth = (this.canvasPos.w - (offset * 2)) / (flow.length - 1)\n\t\t\tconst canvasHeight = this.canvasPos.h - 20\n\t\t\n\t\t\tconst analytics = new Analytics();\n\t\t\tconst stepData = analytics.getFunnelDuration(df, task, this.includeDropOff)\t\n\t\t\tconst maxDuration = analytics.getFunnelMax(stepData) + 1000\n\t\t\tthis._render_funnel_steps(stepData, maxDuration, flow, stepWidth, offset, canvasHeight)\n\t\t\tthis._render_funnel_lines(stepData, maxDuration, stepWidth, offset, canvasHeight, duration => {\n\t\t\t\treturn (Math.round(duration / 100) / 10)+ ' s'\n\t\t\t})\n\t\t\t\t\n\t\t\tthis.yMaxLabel.innerHTML = Math.ceil(maxDuration / 1000) + ' s'\n\t\t\tthis.tempOwn(on(this.cntr, \"click\", () => this.reset_funnel_selection()));\n\t\t\n\t\t},\n\n\t\treset_funnel_selection () {\n\t\t\tthis.selectFunnelPoint(false)\n\t\t\tthis.setHint()\n\t\t},\n\n\t\t_render_funnel_lines (stepData, maxValue,  stepWidth, offset, canvasHeight, lblFunction) {\n\n\t\t\tconst svgCntr = this.db.div('MatcDashTaskPerfGramFunnelSVG MatcDashTaskPerfGramFunnelSVGHidden').build(this.canvas)\n\t\n\t\t\tthis.funnelSVG = d3\n\t\t\t\t.select(svgCntr)\n\t\t\t\t.append(\"svg\")\n\t\t\t\t.attr(\"width\", this.canvasPos.w)\n\t\t\t\t.attr(\"height\",this.canvasPos.h)\n\n\t\t\tthis.lineSVGs = {}\n\t\t\tthis.lineColor = {}\n\t\t\tthis.linePoints = {}\n\n\t\t\t// FIXME: here we could build a try to customize width and opacity?\n\t\t\t\t\n\t\t\tfor (let id in stepData) {\n\t\t\t\tlet steps = stepData[id]\n\t\t\t\tthis._render_funnel_session_line(id, steps, maxValue, stepWidth, canvasHeight, offset, lblFunction)\n\t\t\t}\n\t\t\t\t\n\t\t\tsetTimeout(() => {\n\t\t\t\tcss.remove(svgCntr, 'MatcDashTaskPerfGramFunnelSVGHidden')\n\t\t\t}, 200)\n\t\t},\n\n\t\t_render_funnel_session_line(id, steps, maxValue, stepWidth, canvasHeight, offset, lblFunction) {\n\t\t\t\tconst curveOffset = Math.round(stepWidth / 4)\n\t\t\t\tlet line = []\n\t\t\t\tlet color = this.colors[0]\n\t\t\t\tthis.linePoints[id] = []\n\t\t\t\tsteps.forEach((step, i) => {\n\n\t\t\t\t\tcolor = step.dropoff === true ? 'red': this.colors[0]\n\n\t\t\t\t\tlet point = {\n\t\t\t\t\t\tx: (offset + (stepWidth * i)),\n\t\t\t\t\t\ty: canvasHeight - ((step.value / maxValue) * canvasHeight)\n\t\t\t\t\t}\n\t\t\t\t\tlet div = this.db.div('MatcDashTaskPerfGramFunnelStepPoint')\n\t\t\t\t\t\t.left(point.x)\n\t\t\t\t\t\t.top(point.y)\n\t\t\t\t\t\t.build(this.canvas)\n\n\t\t\t\t\tthis.db.div('MatcDashTaskPerfGramFunnelStepPointLabel', lblFunction(step.value)).build(div)\n\t\t\t\t\t\n\t\t\t\t\tdiv.style.background = color\n\t\t\t\t\tthis.tempOwn(on(div, \"click\", lang.hitch(this, \"selectFunnelPoint\", id)));\n\t\t\t\t\n\t\t\t\t\tthis.linePoints[id].push(div)\n\t\t\t\t\tif  (i > 0) {\n\t\t\t\t\t\tline.push({\n\t\t\t\t\t\t\tx: point.x - curveOffset,\n\t\t\t\t\t\t\ty: point.y\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\tline.push(point)\n\t\t\t\t\tif (i < steps.length-1) {\n\t\t\t\t\t\tline.push({\n\t\t\t\t\t\t\tx: point.x + curveOffset,\n\t\t\t\t\t\t\ty: point.y\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t})\n\t\t\t\tlet svg = this.funnelSVG.append(\"path\")\n\t\t\t\t\t\t.attr(\"d\", this.smoothLineFunction(line))\n\t\t\t\t\t\t.attr(\"stroke\", color)\n\t\t\t\t\t\t.attr(\"stroke-width\", 1 )\n\t\t\t\t\t\t.attr(\"fill\", \"none\")\n\t\t\t\t\t\t.style(\"opacity\", 0.5);\n\t\t\t\tthis.lineSVGs[id] = svg\n\t\t\t\tthis.lineColor[id] = color\n\t\t},\n\n\t\t_render_funnel_steps (stepData, maxValue, flow, width, offset, canvasHeight) {\n\t\t\tthis._stepDivs = []\n\t\t\n\t\t\tif (flow.length > 1) {\n\t\t\t\tflow.forEach((step, i) => {\n\n\t\t\t\t\tconst values = this.getStepData(stepData, i)\n\t\t\t\t\n\t\t\t\t\tconst stepDF = new DataFrame(values)\n\t\t\t\t\n\t\t\t\t\tconst max = Math.ceil(stepDF.max(\"value\"));\n\t\t\t\t\tconst min = Math.ceil(stepDF.min(\"value\"));\n\t\t\t\t\tconst mean = Math.ceil(stepDF.mean(\"value\"));\n\t\t\t\t\tconst std = Math.ceil(stepDF.std(\"value\"));\n\t\t\t\t\tconst left = (offset + (width * i))\n\n\t\t\t\t\tconst div = this.db.\n\t\t\t\t\t\tdiv('MatcDashTaskPerfGramFunnelStep MatcDashTaskPerfGramFunnelStepSmall')\n\t\t\t\t\t\t.left(left)\n\t\t\t\t\t\t.build(this.canvas)\n\n\t\t\t\n\t\t\t\t\tthis.render_funnel_box_plot(\n\t\t\t\t\t\tdiv, -11, 20, max, min, mean, std, maxValue, \n\t\t\t\t\t\tthis.colors[0], canvasHeight)\n\t\t\n\t\t\t\t\tthis._stepDivs.push(div)\n\n\n\t\t\t\t\tconst label = flow.length < 7\n\t\t\t\t\t\t? this.getNiceEventLabel (step, i, false) \n\t\t\t\t\t\t: 'Step ' + (i +1)\n\n\t\t\t\t\tthis.db\n\t\t\t\t\t\t.div('MatcDashTaskPerfGramFunnelStepLabel', label)\n\t\t\t\t\t\t.left((offset + (width * i)))\n\t\t\t\t\t\t.build(this.xAxisLabelCntr)\n\n\t\t\t\t\t\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tcss.remove(div, 'MatcDashTaskPerfGramFunnelStepSmall')\n\t\t\t\t\t}, Math.min(300, 50 * i))\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\n\t\trender_funnel_box_plot(parent, left, width ,max, min, mean, std, total, color, canvasHeight) {\n\t\t\tconst height = (((max-min) / total) * canvasHeight)\n\t\t\tconst cntr = this.db\n\t\t\t\t.div(\"MatcDashTaskPerfGramBoxPlotCntr\")\n\t\t\t\t.top(canvasHeight - ((max / total) * canvasHeight ))\n\t\t\t\t.h(height)\n\t\t\t\t.w(width)\n\t\t\t\t.left(left)\n\t\t\t\t.build(parent);\n\n\t\t\tconst bar = this.db\n\t\t\t\t.div(\"MatcDashTaskPerfGramBoxPlot\")\n\t\t\t\t.build(cntr)\n\t\t\tbar.style.bottom = Math.max(0, ((((mean-std)-min) / (max-min)))) * 100 + \"%\"\n\t\t\tbar.style.height = ((std * 2) / (max-min)) * 100 + \"%\"\n\t\t\tbar.style.background = color\n\n\t\t\tconst centre = this.db\n\t\t\t\t.div(\"MatcDashTaskPerfGramBoxPlotMean\")\n\t\t\t\t.build(cntr)\n\t\t\tcentre.style.bottom = (((mean-min) / (max-min))) *100 + \"%\"\n\t\t},\n \n\t\tgetStepData(stepData, i) {\n\t\t\tconst result = []\n\t\t\tfor (let id in stepData) {\n\t\t\t\tconst steps = stepData[id]\n\t\t\t\tif (steps[i] !== undefined) {\n\t\t\t\t\tresult.push(steps[i])\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\treturn result\n\t\t},\n\n\t\tselectFunnelPoint (id, e) {\n\t\t\tthis.log.log(-1, \"selectFunnelPoint\", \"enter > :\", id);\n\t\t\tthis.stopEvent(e)\n\t\t\tthis.showSessionReplayHint(id)\n\n\t\t\tfor (let session in this.lineSVGs) {\n\t\t\t\tconst svg = this.lineSVGs[session]\n\t\t\t\tconst color = session === id ? this.colors[1] : this.lineColor[session]\n\n\t\t\t\tif(svg){\n\t\t\t\t\tsvg.attr(\"stroke\", color )\n\t\t\t\t}\n\t\t\t\tif (this.linePoints[session]) {\n\t\t\t\t\tthis.linePoints[session].forEach(div => {\n\t\t\t\t\t\tdiv.style.background = color\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\t},\n\n\t\tclean_funnelDurartion (callback) {\n\t\t\tthis.log.log(-1, \"clean_funnelDurartion\", \"enter > :\");\n\n\t\t\tcss.remove(this.domNode, \"MatcDashTaskPerfGramFunnel\");\n\t\t\t\n\t\t\tif (this._stepDivs) {\n\t\t\t\tthis._stepDivs.forEach(div => {\n\t\t\t\t\tdiv.parentNode.removeChild(div)\n\t\t\t\t})\n\t\t\t\tdelete this._stepDivs\n\t\t\t}\n\t\t\tif (this.funnelSVG) {\n\t\t\t\tthis.canvas.innerHTML = \"\"\n\t\t\t\tdelete this.funnelSVG\n\t\t\t}\n\t\t\tthis.xAxisLabelCntr.innerHTML = \"\"\n\t\t\tthis.yMinLabel.innerHTML = \"\"\n\t\t\tif (callback) {\n\t\t\t\tcallback()\n\t\t\t}\n\t\t},\n\n\n\t\t/*********************************************************************\n\t\t * BoxPlot\n\t\t *********************************************************************/\n\n\n\t\trender_details (df, task, annotations, tasks){\n\t\t\tthis.log.log(-1, \"render_duration\", \"enter > changeTask:\");\n\n\t\t\tcss.add(this.domNode, \"MatcDashTaskPerfGramDetails\");\n\t\t\tthis.xLabel.innerHTML = \"\"; //this.getNLS(\"dash.perf.details.xLabel\");\n\t\t\tthis.yLabel.innerHTML = \"\";//this.getNLS(\"dash.perf.details.yLabel\");\n\t\t\tthis.yLabelEast.innerHTML = \"\"; //this.getNLS(\"dash.perf.details.yLabelEast\");\n\t\t\tthis.bottom25Label.innerHTML = this.getNLS(\"dash.perf.details.bottom25Label\");\n\t\t\tthis.bottom75Label.innerHTML = this.getNLS(\"dash.perf.details.bottom75Label\");\n\t\t\tthis.xMaxLabel.innerHTML = \"\";\n\t\t\tthis.yMinLabel.innerHTML = \"\"\n\t\t\tthis.minLabel.innerHTML = \"\"\n\n\t\t\tvar analytics = new Analytics();\n\t\t\tvar perf = analytics.getTaskPerformance(df, tasks);\n\n\t\t\t// loop to get the max\n\t\t\tvar max_duration = 1;\n\t\t\tvar max_count = 1;\n\t\t\tvar selectCount = 0;\n\t\t\tfor (let id in this.selectedTasks){\n\t\t\t\tif (this.selectedTasks[id]){\n\t\t\t\t\tlet taskDF = perf.select(\"task\", \"==\", id);\n\t\t\t\t\tmax_duration = Math.max(max_duration, Math.ceil(taskDF.max(\"duration\") * this.paddingFactor));\n\t\t\t\t\tmax_count = Math.max(max_count, Math.ceil(taskDF.max(\"interactions\") * this.paddingFactor));\n\t\t\t\t\tselectCount++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.yMaxLabel.innerHTML = max_count;\n\t\t\tthis.yMaxLabelEast.innerHTML = Math.ceil(max_duration / 1000) + \" s\";\n\n\n\t\t\t/**\n\t\t\t * Now render selected tasks and remove not selected tasks\n\t\t\t */\n\t\t\tvar i=0;\n\t\t\tvar w = 2;\n\t\t\tvar slots = (selectCount * 2) -1;\n\t\t\tfor (let id in this.selectedTasks){\n\t\t\t\tif (this.selectedTasks[id]){\n\t\t\t\t\tlet taskDF = perf.select(\"task\", \"==\", id);\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Create interactions box plot\n\t\t\t\t\t */\n\t\t\t\t\tlet max = Math.ceil(taskDF.max(\"interactions\"));\n\t\t\t\t\tlet min = Math.ceil(taskDF.min(\"interactions\"));\n\t\t\t\t\tlet mean = Math.ceil(taskDF.mean(\"interactions\"));\n\t\t\t\t\tlet std = Math.ceil(taskDF.std(\"interactions\"));\n\t\t\t\t\tlet left = (25 - ((w * slots)/2)) + (i * 2 * w) + \"%\";\n\t\t\t\t\tthis.createBoxPlot(id , \"i\", i, left, w, max, min, mean, std, max_count, this.taskColors[id]);\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Create duration box plot\n\t\t\t\t\t */\n\t\t\t\t\tmax = Math.ceil(taskDF.max(\"duration\"));\n\t\t\t\t\tmin = Math.ceil(taskDF.min(\"duration\"));\n\t\t\t\t\tmean = Math.ceil(taskDF.mean(\"duration\"));\n\t\t\t\t\tstd = Math.ceil(taskDF.std(\"duration\"));\n\t\t\t\t\tleft = (75 - ((w * slots)/2)) + (i * 2 * w) + \"%\";\n\t\t\t\t\tthis.createBoxPlot(id , \"d\", i, left, w, max, min, mean, std, max_duration, this.taskColors[id]);\n\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\t/**\n\t\t\t\t\t * Remove not needed box plots\n\t\t\t\t\t */\n\t\t\t\t\tif (this._bars){\n\t\t\t\t\t\tif (this._bars[id + \"i\"]){\n\t\t\t\t\t\t\tlet bar = this._bars[id + \"i\"];\n\t\t\t\t\t\t\tbar.parentNode.removeChild(bar);\n\t\t\t\t\t\t\tdelete this._bars[id + \"i\"]\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this._bars[id + \"d\"]){\n\t\t\t\t\t\t\tlet bar = this._bars[id + \"d\"];\n\t\t\t\t\t\t\tbar.parentNode.removeChild(bar);\n\t\t\t\t\t\t\tdelete this._bars[id + \"d\"]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tcreateBoxPlot (id, prefix, i, left, width ,max, min, mean, std, total, color, widthUnit = '%'){\n\n\t\t\tif (!this._bars) {\n\t\t\t\tthis._bars = {}\n\t\t\t}\n\n\t\t\tvar height = (((max-min) / total) *100)+ \"%\";\n\t\t\tvar ms = Math.min(i*60, 500);\n\t\t\tif (!this._bars[id + prefix]){\n\t\t\t\t/**\n\t\t\t\t * Create new\n\t\t\t\t */\n\t\t\t\tlet cntr = this.db.div(\"MatcDashTaskPerfGramBoxPlotCntr\").build(this.canvas);\n\t\t\t\tcntr.style.bottom = ((min / total) *100)+ \"%\"\n\t\t\t\tcntr.style.left = left;\n\t\t\t\tcntr.style.height = \"0px\";\n\t\t\t\tcntr.style.width = width + widthUnit\n\n\t\t\t\tthis.db.div(\"MatcDashTaskPerfGramBoxPlotLine\").build(cntr);\n\n\t\t\t\tvar bar = this.db.div(\"MatcDashTaskPerfGramBoxPlot\").build(cntr);\n\t\t\t\tbar.style.bottom = Math.max(0, ((((mean-std)-min) / (max-min)))) * 100 + \"%\";\n\t\t\t\tbar.style.height = ((std * 2) / (max-min)) * 100 + \"%\";\n\t\t\t\tbar.style.background = color\n\n\t\t\t\tvar centre = this.db.div(\"MatcDashTaskPerfGramBoxPlotMean\").build(cntr);\n\t\t\t\tcentre.style.bottom = (((mean-min) / (max-min))) *100 + \"%\"\n\n\t\t\t\tsetTimeout(lang.hitch(this, \"animateBoxplot\",  cntr, height), ms);\n\t\t\t\tthis._bars[id + prefix] = cntr;\n\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * Update exiting ones\n\t\t\t\t */\n\t\t\t\tlet cntr = this._bars[id + prefix];\n\t\t\t\tcntr.style.left = left;\n\t\t\t\tsetTimeout(lang.hitch(this, \"animateBoxplot\",  cntr, height), ms);\n\t\t\t}\n\t\t},\n\n\t\tanimateBoxplot (bar, height){\n\t\t\tbar.style.height = height;\n\t\t},\n\n\t\tclean_details (callback){\n\t\t\tthis.log.log(-1, \"clean_duration\", \"enter\");\n\t\t\tcss.remove(this.domNode, \"MatcDashTaskPerfGramDetails\");\n\t\t\tthis.setHint();\n\n\t\t\tif(this._bars){\n\t\t\t\tfor (var id in this._bars){\n\t\t\t\t\tvar b = this._bars[id];\n\t\t\t\t\tb.style.height = \"0%\";\n\t\t\t\t\tb.style.bottom = \"0%\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetTimeout(lang.hitch(this, \"removeBoxplots\"), 200);\n\n\t\t\tif (callback){\n\t\t\t\tsetTimeout(callback, 200);\n\t\t\t}\n\t\t},\n\n\n\t\tremoveBoxplots:function(){\n\t\t\tif(this._bars){\n\t\t\t\tfor (var id in this._bars){\n\t\t\t\t\tvar b = this._bars[id];\n\t\t\t\t\tthis.canvas.removeChild(b)\n\t\t\t\t}\n\t\t\t}\n\t\t\tdelete this._bars;\n\t\t},\n\n\n\n\t\t/*********************************************************************\n\t\t * Scatter\n\t\t *********************************************************************/\n\n\t\trender_scatter (df, task, annotations, tasks, changeTask){\n\t\t\tthis.log.log(-1, \"render_scatter\", \"enter > changeTask:\" + changeTask);\n\n\t\t\tvar db = new DomBuilder();\n\n\t\t\t/**\n\t\t\t * reset some stuff\n\t\t\t */\n\t\t\tdelete this._selectedScatterPoint;\n\n\n\t\t\tthis.setHint(db.span(\"MatcHint\", this.getNLS(\"dash.perf.hint.scatter\")).build());\n\t\t\tcss.add(this.domNode, \"MatcDashTaskPerfGramScatter\");\n\t\t\tthis.xLabel.innerHTML = this.getNLS(\"dash.perf.scatter.xLabel\");\n\t\t\tthis.yLabel.innerHTML = this.getNLS(\"dash.perf.scatter.yLabel\");\n\t\t\tthis.minLabel.innerHTML = \"0 s\"\n\t\t\tthis.yMinLabel.innerHTML = \"0\"\n\n\t\t\tvar analytics = new Analytics();\n\t\t\tvar perf = analytics.getTaskPerformance(df, tasks);\n\n\t\t\t// loop to get the max\n\t\t\tlet max_duration = 1;\n\t\t\tlet max_count = 1;\n\t\t\tlet mean_duration = 0\n\t\t\tlet mean_count = 0\n\t\t\tlet maxDelay = 0;\n\t\t\tfor (let id in this.selectedTasks){\n\t\t\t\tif (this.selectedTasks[id]){\n\t\t\t\t\tlet taskDF = perf.select(\"task\", \"==\", id);\n\t\t\t\t\tmax_duration = Math.max(max_duration, Math.ceil(taskDF.max(\"duration\") * this.paddingFactor));\n\t\t\t\t\tmax_count = Math.max(max_count, Math.ceil(taskDF.max(\"interactions\") * this.paddingFactor));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.xMaxLabel.innerHTML = Math.ceil(max_duration / 1000) + \" s\" ;\n\t\t\tthis.yMaxLabel.innerHTML = Math.ceil(max_count);\n\t\t\tfor (let id in this.selectedTasks){\n\t\t\t\tlet taskDF = perf.select(\"task\", \"==\", id);\n\t\t\t\tlet sessions = taskDF.data;\n\t\t\t\tsessions.sort(function(a,b){\n\t\t\t\t\treturn b.interactions - a.interactions;\n\t\t\t\t});\n\n\t\t\t\tif (this.selectedTasks[id]){\n\t\t\t\t\tmean_duration = taskDF.mean(\"duration\");\n\t\t\t\t\tmean_count = taskDF.mean(\"interactions\");\n\t\t\t\n\t\t\t\t\tfor (let i=0; i< sessions.length; i++){\n\t\t\t\t\t\tlet s = sessions[i];\n\t\t\t\t\t\tlet key = s.session + \" \" + id;\n\t\t\t\t\t\tlet ms = Math.min(i*10, 300);\n\t\t\t\t\t\tmaxDelay = Math.max(maxDelay, ms)\n\n\t\t\t\t\t\tif (this._scatterPoints[key]){\n\t\t\t\t\t\t\tlet p = this._scatterPoints[key];\n\t\t\t\t\t\t\tthis.tempOwn(on(p, \"click\", lang.hitch(this, \"selectPoint\", p, s, i)));\n\t\t\t\t\t\t\tsetTimeout(lang.hitch(this, \"animateScatterPoint\",p, s, max_duration, max_count), ms);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlet p = db.span(\"MatxScatterPoint\").build(this.canvas);\n\t\t\t\t\t\t\tp.style.bottom =  \"-5%\";\n\t\t\t\t\t\t\tp.style.left = (((s.duration / max_duration) * 100))+ \"%\";\n\t\t\t\t\t\t\tp.style.background = this.taskColors[id];\n\t\t\t\t\t\t\tthis._scatterPoints[key] = p;\n\t\t\t\t\t\t\tthis.tempOwn(on(p, \"click\", lang.hitch(this, \"selectPoint\", p, s, i)));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tsetTimeout(lang.hitch(this, \"animateScatterPoint\",p, s, max_duration, max_count), ms);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// remove all not needed elements\n\t\t\t\t\tfor (let i=0; i< sessions.length; i++){\n\t\t\t\t\t\tlet s = sessions[i];\n\t\t\t\t\t\tlet key = s.session + \" \" + id;\n\t\t\t\t\t\tif (this._scatterPoints[key]){\n\t\t\t\t\t\t\tlet p = this._scatterPoints[key];\n\t\t\t\t\t\t\tp.style.opacity =0;\n\t\t\t\t\t\t\tsetTimeout(lang.hitch(this, \"fadeOutPoint\", p), 300);\n\t\t\t\t\t\t\tdelete this._scatterPoints[key]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// save values for select events\n\t\t\tthis.max_interactions = max_count;\n\t\t\tthis.max_duration = max_duration;\n\n\t\t\t// FIXME: Should be per task...\n\t\t\tsetTimeout(lang.hitch(this, \"setMiddle\",mean_count, max_count, mean_duration, max_duration),200);\n\t\t},\n\n\t\tfadeOutPoint (p){\n\t\t\tif (p.parentNode){\n\t\t\t\tp.parentNode.removeChild(p);\n\t\t\t}\n\t\t},\n\n\t\tclean_scatter (callback){\n\t\t\tthis.log.log(-1, \"clean_scatter\", \"enter\");\n\t\t\tcss.remove(this.domNode, \"MatcDashTaskPerfGramScatter\");\n\t\t\tthis.setHint();\n\t\t\tif(this._scatterPoints){\n\t\t\t\tfor (var sessionID in this._scatterPoints){\n\t\t\t\t\tvar p = this._scatterPoints[sessionID];\n\t\t\t\t\tp.style.bottom = \"-5%\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetTimeout(lang.hitch(this, \"removePoints\"), 200);\n\t\t\tif (callback){\n\t\t\t\tsetTimeout(callback, 200);\n\t\t\t}\n\t\t\tthis.yMinLabel.innerHTML = \"\"\n\t\t\tthis.minLabel.innerHTML = \"\"\n\t\t},\n\n\t\tremovePoints (){\n\t\t\tif(this._scatterPoints){\n\t\t\t\tfor (var sessionID in this._scatterPoints){\n\t\t\t\t\tvar p = this._scatterPoints[sessionID];\n\t\t\t\t\tif (p.parentNode){\n\t\t\t\t\t\tp.parentNode.removeChild(p)\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tdelete this._scatterPoints;\n\t\t\tthis._scatterPoints = {};\n\t\t},\n\n\t\tselectPoint (p, s, i, e){\n\t\t\tthis.stopEvent(e);\n\t\t\tthis.setXMiddle(s.duration, this.max_duration);\n\t\t\tthis.setYMiddle(s.interactions, this.max_interactions);\n\t\t\tcss.add(this.cntr, \"MatcDashTaskPerfGramCntrHover\");\n\t\t\tthis._selectedScatterPoint = p;\n\t\t\tthis.showSessionReplayHint(s.session)\n\t\t},\n\n\t\tshowSessionReplayHint(id) {\n\t\t\tif (this.model){\n\t\t\t\tlet url = \"#/apps/\" + this.model.id + \"/replay/\" + id + \".html\";\n\t\t\t\tif (this.mode == \"public\"){\n\t\t\t\t\turl = \"#/examples/\" + this.model.id + \"/replay/\" + id + \".html\";\n\t\t\t\t}\n\t\t\t\tconst hint = this.db.span(\"MatcHint\", this.getNLS(\"dash.perf.hint.session-msg\")).build();\n\t\t\t\tconst a = this.db.a(\"\", this.getNLS(\"dash.perf.hint.session-play\")).build(hint);\n\t\t\t\ta.href = url\n\t\t\t\ta.target = \"_matcSessionReplay\" + id\n\t\t\t\tthis.setHint(hint);\n\t\t\t}\n\t\t},\n\n\n\n\t\t/*********************************************************************\n\t\t * DropOff\n\t\t *********************************************************************/\n\n\t\trender_dropoff (df, task, annotations){\n\t\t\tthis.log.log(-1, \"render_dropoff\", \"enter > \" + task.flow.length);\n\n\t\t\tcss.add(this.domNode, \"MatcDashTaskPerfGramDropOff\");\n\t\t\tthis.xLabel.innerHTML = this.getNLS(\"dash.perf.dropoff.xLabel\");\n\t\t\tthis.xMaxLabel.innerHTML = \"100%\";\n\t\t\tthis.minLabel.innerHTML = \"\"\n\t\t\tthis._bars = {}\n\t\t\tthis._barLabels = {}\n\n\t\t\tif (!this.funnel) {\n\t\t\t\tvar analytics = new Analytics();\n\t\t\t\tthis.funnel = analytics.getFunnelSummary(df, task, annotations);\n\t\t\t}\n\n\t\t\t// var height = Math.min(10, (100 / (this.funnel.length*2 - 1)));\n\t\t\tfor(var i=0; i< this.funnel.length; i++){\n\t\t\t\tvar summary = this.funnel[i];\n\t\t\t\tvar v = summary.p;\n\n\t\t\t\tif(summary.event){\n\t\t\t\t\tvar lbl = this.getNiceEventLabel(summary.event, i);\n\t\t\t\t\tvar top = ((i-1) * 40 + 10) +\"px\"\n\n\t\t\t\t\tvar bar = this.db.div(\"MatcDashTaskPerfGramBar\").build(this.canvas);\n\t\t\t\t\tbar.style.top = top\n\t\t\t\t\tbar.style.left = \"0px\"\n\t\t\t\t\tbar.style.height = \"20px\";\n\t\t\t\t\tbar.style.width =\"0%\";\n\t\t\t\t\tbar.style.background = this.greenToRed(v)\n\t\t\t\t\tbar.innerHTML = Math.round(v * 100) + \"%\";\n\n\t\t\t\t\tvar label = this.db.span(\"MatxAxisLabel MatcDashTaskPerfGramBarLabel MatcDashTaskPerfGramScatterHidden MatcDashTaskPerfGramBarLabelHidden\", lbl).build(this.cntr);\n\t\t\t\t\tlabel.style.top = top;\n\n\t\t\t\t\tvar ms = Math.min(i*60, 500);\n\t\t\t\t\tsetTimeout(lang.hitch(this, \"animateBar\",  bar, label, Math.max(1, Math.min(99, v*100)) + \"%\"), ms);\n\n\t\t\t\t\tthis._bars[i] = bar;\n\t\t\t\t\tthis._barLabels[i] = label;\n\t\t\t\t}\n\t\t\t}\n\n\t\t},\n\n\t\tanimateBar (bar, label, width){\n\t\t\tbar.style.width = width;\n\t\t\tcss.remove(label, \"MatcDashTaskPerfGramBarLabelHidden\");\n\t\t},\n\n\t\tclean_dropoff (callback){\n\t\t\tthis.log.log(-1, \"clean_dropoff\", \"enter\");\n\t\t\tcss.remove(this.domNode, \"MatcDashTaskPerfGramDropOff\");\n\t\t\tif(this._barLabels){\n\t\t\t\tfor (let id in this._barLabels){\n\t\t\t\t\tlet b = this._barLabels[id];\n\t\t\t\t\tb.parentNode.removeChild(b);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdelete this._barLabels;\n\t\t\tif(this._bars){\n\t\t\t\tfor (let id in this._bars){\n\t\t\t\t\tlet b = this._bars[id];\n\t\t\t\t\tb.style.width = \"0%\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetTimeout(lang.hitch(this, \"removeBars\"), 200);\n\t\t\tthis.setHint();\n\t\t\tif (callback){\n\t\t\t\tsetTimeout(callback, 200);\n\t\t\t}\n\t\t},\n\n\t\tremoveBars (){\n\t\t\tif(this._bars){\n\t\t\t\tfor (var id in this._bars){\n\t\t\t\t\tvar b = this._bars[id];\n\t\t\t\t\tthis.canvas.removeChild(b)\n\t\t\t\t}\n\t\t\t}\n\t\t\tdelete this._bars;\n\t\t},\n\n\n\t\t/*********************************************************************\n\t\t * Helper\n\t\t *********************************************************************/\n\n\n\t\tshowSessionReplay (url, i, e){\n\t\t\tthis.stopEvent(e);\n\t\t\tif (this.dialog){\n\t\t\t\tthis.dialog.close();\n\t\t\t}\n\t\t\tlocation.href = url;\n\t\t},\n\n\t\thoverPoint (p){\n\t\t\tif (this._selectedScatterPoint == p){\n\t\t\t\tcss.add(this.cntr, \"MatcDashTaskPerfGramCntrHover\");\n\t\t\t}\n\t\t},\n\n\t\tsetHint (hintNode){\n\t\t\tthis.hintCntr.innerHTML = \"\";\n\t\t\tif(hintNode){\n\t\t\t\tthis.hintCntr.appendChild(hintNode);\n\t\t\t}\n\t\t},\n\n\t\tclearPoint (){\n\t\t\t//this.setMiddle(mean_count, max_count, mean_duration, max_duration);\n\t\t\tcss.remove(this.cntr, \"MatcDashTaskPerfGramCntrHover\");\n\t\t},\n\n\t\tsetMiddle (mean_count, max_count, mean_duration, max_duration){\n\t\t\tthis.setXMiddle(mean_duration, max_duration);\n\t\t\tthis.setYMiddle(mean_count, max_count);\n\t\t\tcss.remove(this.cntr, \"MatcDashTaskPerfGramCntrHover\");\n\t\t},\n\n\t\tsetYMiddle (count, max_count){\n\t\t\tthis.yMiddleLabel.innerHTML = Math.ceil(count);\n\t\t\tthis.yMiddleLabel.style.bottom = ((count / max_count) * 100)+ \"%\";\n\t\t\tthis.yLine.style.bottom = ((count / max_count) * 100)+ \"%\";\n\t\t},\n\n\t\tsetXMiddle (duration, max_duration){\n\t\t\tthis.xMiddleLabel.innerHTML = Math.ceil(duration /1000) + \" s\" ;\n\t\t\tthis.xMiddleLabel.style.left =(((duration / max_duration) * 100))+ \"%\";\n\t\t\tthis.xLine.style.left =(((duration / max_duration) * 100))+ \"%\";\n\t\t},\n\n\t\tanimateScatterPoint (p, s, max_duration, max_interactions){\n\t\t\tp.style.bottom = (((s.interactions / max_interactions) * 100))+ \"%\";\n\t\t\tp.style.left = (((s.duration / max_duration) * 100))+ \"%\";\n\t\t},\n\n\t\tgetNiceEventLabel (event, i, includeScreenForWidgets=true){\n\t\t\tif (this.model){\n\t\t\t\tconst screenName = this.getScreenName(event.screen, true)\n\t\t\t\tconst widgetName = this.getWidgetName(event.widget, true)\n\n\t\t\t\tvar row = [];\n\t\t\t\tif(event.widget){\n\t\t\t\t\tconst screenLabel = includeScreenForWidgets ? ' @ ' + screenName : ''\n\t\t\t\t\tif(event.type ==\"WidgetGesture\" && event.gesture){\n\t\t\t\t\t\tlet gesture = event.gesture;\n\t\t\t\t\t\trow = [this.getGestureLabel(gesture.type),  widgetName];\n\t\t\t\t\t} else if(event.state && (event.type == \"WidgetClick\" || event.type == \"WidgetChange\")  ){\n\n\t\t\t\t\t\treturn this.getEventStateLabel(event.state) + ` -  ` + widgetName +  screenLabel;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this.getEventLabel(event.type) + ` -  ` + widgetName + screenLabel;\n\t\t\t\t\t}\n\t\t\t\t} else if(event.type ==\"ScreenGesture\" && event.gesture){\n\t\t\t\t\tlet gesture = event.gesture;\n\t\t\t\t\trow = [\"Screen \" + this.getGestureLabel(gesture.type), screenName];\n\t\t\t\t}else {\n\t\t\t\t\trow = [this.getEventLabel(event.type), screenName];\n\t\t\t\t}\n\t\t\t\treturn row[0] + \" - \" +row[1]+ \"\";\n\t\t\t}\n\t\t\treturn this.getNLS(\"dash.perf.dropoff.step\") + i;\n\t\t}\n    },\n    mounted () {\n    }\n}\n</script>","import mod from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TaskPerfGram.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TaskPerfGram.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./TaskPerfGram.vue?vue&type=template&id=e06b6f14&\"\nimport script from \"./TaskPerfGram.vue?vue&type=script&lang=js&\"\nexport * from \"./TaskPerfGram.vue?vue&type=script&lang=js&\"\nimport style1 from \"./TaskPerfGram.vue?vue&type=style&index=1&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"MatcTestSettings MatcDashTable\"},[_c('div',{attrs:{\"data-dojo-attach-point\":\"tableCntr\"}},[(_vm.hasTests)?_c('div',[_c('table',{staticClass:\"vommondTable table is-hoverable\"},[_vm._m(0),_c('tbody',_vm._l((_vm.testSettings.tasks),function(task,i){return _c('tr',{key:task.id},[_c('td',[_vm._v(_vm._s(task.name))]),_c('td',[_vm._v(_vm._s(_vm.shorten(task.description)))]),_c('td',[(task.flow && task.flow.length > 0)?[_c('div',{staticClass:\"StepCntr\"},_vm._l((_vm.getTaskSteps(task)),function(step,i){return _c('div',{key:i,class:'Step ' + step.type},[(i > 0)?_c('span',{staticClass:\"mdi mdi-arrow-right\"}):_vm._e(),_c('div',{staticClass:\"StepDetails\"},[_vm._v(_vm._s(_vm.shorten(step.label, 20))+\" \")])])}),0)]:_c('span',{staticClass:\"MatcHint\"},[_vm._v(\"No steps \")])],2),_c('td',{staticClass:\" action\"},[_c('a',{staticClass:\" button \",on:{\"click\":function($event){return _vm.onEditTask(task, i, $event)}}},[_vm._v(\"Edit\")]),_c('a',{staticClass:\" button is-danger\",on:{\"click\":function($event){return _vm.onDelete(task, i, $event)}}},[_c('span',{staticClass:\" mdi mdi-close\"})])])])}),0)]),_c('div',{staticClass:\"form-group mb-32\"},[_c('CheckBox',{attrs:{\"value\":_vm.test.showTaskInTest,\"label\":_vm.getNLS('testSettingsShowTaskInTest')},on:{\"change\":_vm.onShowTaskChange}})],1)]):_c('p',{staticClass:\"mb-32\"},[_vm._v(\" \"+_vm._s(_vm.getNLS(\"testSettingsTaskAddHint\"))+\" \")])]),_c('a',{staticClass:\"button is-primary\",attrs:{\"data-nls\":\"testSettingsAddTask\"},on:{\"click\":_vm.showCreateDialog}},[_vm._v(\"Add task\")])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('thead',[_c('tr',[_c('td',{staticStyle:{\"width\":\"20%\"}},[_vm._v(\"Name\")]),_c('td',{staticStyle:{\"width\":\"30%\"}},[_vm._v(\"Description\")]),_c('td',{staticStyle:{\"width\":\"35%\"}},[_vm._v(\"Steps\")]),_c('td',{staticClass:\"action\",staticStyle:{\"width\":\"15%\"}},[_vm._v(\"Action\")])])])}]\n\nexport { render, staticRenderFns }","\n<template>\n    <div class=\"MatcTestSettings MatcDashTable\">\n\n        <div data-dojo-attach-point=\"tableCntr\" class=\"\">\n          <div v-if=\"hasTests\" >\n          <table class=\"vommondTable table is-hoverable\">\n            <thead>\n                <tr>\n                  <td style=\"width: 20%;\">Name</td>\n                  <td style=\"width: 30%;\">Description</td>\n                  <td style=\"width: 35%;\">Steps</td>\n                  <td style=\"width: 15%;\" class=\"action\">Action</td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr v-for=\"(task, i) in testSettings.tasks\" :key=\"task.id\">\n                  <td >{{task.name}}</td>\n                  <td>{{shorten(task.description)}}</td>\n                  <td>\n                    <template v-if=\"task.flow && task.flow.length > 0\">\n                      <div class=\"StepCntr\">\n                          <div v-for=\"(step, i) in getTaskSteps(task)\" :key=\"i\" :class=\"'Step ' + step.type\">\n                            <span class=\"mdi mdi-arrow-right\" v-if=\"i > 0\"/>\n                            <div class=\"StepDetails\">{{shorten(step.label, 20)}}  </div>\n                         </div>\n                      </div>\n\n\n                    </template>\n                    <span class=\"MatcHint\" v-else>No steps </span>\n                  </td>\n                  <td class=\" action\">\n                    <a class=\" button \" @click=\"onEditTask(task, i, $event)\">Edit</a>\n                    <a class=\" button is-danger\" @click=\"onDelete(task, i, $event)\"><span class=\" mdi mdi-close\"></span></a>\n                  </td>\n                </tr>\n            </tbody>\n          </table>\n          <div class=\"form-group mb-32\">\n            <CheckBox :value=\"test.showTaskInTest\" :label=\"getNLS('testSettingsShowTaskInTest')\" @change=\"onShowTaskChange\"/>\n          </div>\n\n          </div>\n          <p v-else class=\"mb-32\">\n            {{getNLS(\"testSettingsTaskAddHint\")}}\n          </p>\n        </div>\n\n        <a data-nls=\"testSettingsAddTask\" @click=\"showCreateDialog\" class=\"button is-primary\">Add task</a>\n\n\n  </div>\n</template>\n<style lang=\"scss\">\n  @import '../../../style/scss/task_create_dialog.scss';\n</style>\n<script>\nimport DojoWidget from \"dojo/DojoWidget\";\nimport css from \"dojo/css\";\nimport lang from \"dojo/_base/lang\";\nimport on from \"dojo/on\";\nimport touch from \"dojo/touch\";\nimport Logger from \"common/Logger\";\nimport Dialog from \"common/Dialog\";\nimport DomBuilder from \"common/DomBuilder\";\nimport CheckBox from \"common/CheckBox\";\nimport Util from \"core/Util\";\nimport Plan from \"page/Plan\";\nimport Services from \"services/Services\";\nimport TaskRecorder from \"views/apps/analytics/TaskCreateDialog\";\n\n\nexport default {\n  name: \"TestSettings\",\n  props: [\"test\", \"app\", \"annotation\", \"events\", \"hash\"],\n  mixins: [Util, Plan, DojoWidget],\n  data: function() {\n    return {\n      testSettings: null,\n      appID: \"\",\n      userID: \"\"\n    };\n  },\n  components: {\n    'CheckBox': CheckBox\n  },\n  computed: {\n    pub() {\n      return this.$route.meta && this.$route.meta.isPublic;\n    },\n    hasTests () {\n      return this.testSettings && this.testSettings.tasks && this.testSettings.tasks.length > 0\n    }\n  },\n  methods: {\n\n    shorten (s, max = 70) {\n      if (s && s.length > max) {\n        return s.substring(0, max) + '...'\n      }\n      return s\n    },\n\n    getTaskSteps (task) {\n      let result = []\n      if (task.flow.length > 0) {\n        result.push(this.createStep(task.flow[0]))\n      }\n\n      if (task.flow.length > 2) {\n        result.push({\n          type: '',\n          label: '...'\n        })\n      }\n\n      if (task.flow.length > 1) {\n        result.push(this.createStep(task.flow[task.flow.length-1]))\n      }\n\n      return result\n    },\n\n    createStep (event) {\n      return {\n        label: (event.widget ? this.getWidgetName(event.widget) : this.getScreenName(event.screen)),\n        type: event.widget ? 'widget' : 'screen'\n      }\n    },\n\n\n\n    getScreenName (screenID) {\n      if (this.app.screens[screenID] && this.app.screens[screenID].name) {\n        return this.app.screens[screenID].name;\n      }\n      return screenID;\n    },\n\n    getWidgetName (widgetID) {\n      if (this.app.widgets[widgetID] && this.app.widgets[widgetID].name) {\n        return this.app.widgets[widgetID].name;\n      }\n      return widgetID;\n    },\n\n    postCreate() {\n      this.logger = new Logger(\"TestSettings\");\n      this.logger.log(4,\"postCreate\", \"enter > \" + this.appID + \" > \" + this.pub);\n      this.db = new DomBuilder();\n      if (this.test) {\n        this.setValue(this.test);\n      }\n    },\n\n    setValue(data) {\n      this.testSettings = data\n    },\n\n    render(data) {\n      this.cleanUpTempListener();\n      this.renderTaskTable(data);\n    },\n\n    onShowTaskChange (value) {\n      this.test.showTaskInTest = value\n      this.save();\n    },\n\n\n    showCreateDialog () {\n      var d = new Dialog();\n      var dialog = document.createElement(\"div\");\n      css.add(dialog, \"MatchTaskRecorderDialog\");\n      var s = this.$new(TaskRecorder, { model: this.app, hash: this.hash });\n      s.setValue({\n        name: \"Task \" + (this.test.tasks.length + 1),\n        description: '',\n        flow: [],\n        strict: false\n      })\n      s.placeAt(dialog);\n      d.popup(dialog, this.addBTN);\n      d.own(on(d, \"close\", function() { s.destroy(); }));\n      d.own(on(s, \"close\", function() { d.close(); }));\n      d.own(on(s, \"save\", lang.hitch(this, \"createNewTask\", s, d)));\n    },\n\n    async createNewTask(s, dialog) {\n      let newTask = s.getValue()\n      dialog.close()\n      if (!this.test.tasks) {\n        this.test.tasks = [];\n      }\n      this.test.tasks.push({\n        name: newTask.name,\n        description: newTask.description,\n        id: \"t\" + Date.now(),\n        strict: newTask.strict,\n        flow: newTask.flow\n      });\n\n\n      this.save();\n    },\n\n    onEditTask(task, i, e) {\n      var d = new Dialog();\n      var dialog = document.createElement(\"div\");\n      css.add(dialog, \"MatchTaskRecorderDialog\");\n      var s = this.$new(TaskRecorder, { model: this.app, hash: this.hash, ignoreFirstEvent: true});\n      s.setValue(task)\n      s.placeAt(dialog);\n      d.popup(dialog, e.target);\n      d.own(on(d, \"close\", function() { s.destroy(); }));\n      d.own(on(s, \"close\", function() { d.close(); }));\n      d.own(on(s, \"save\", lang.hitch(this, \"updateTask\", s, d)));\n    },\n\n    updateTask(s, dialog) {\n      let updatedTask = s.getValue()\n      let task = this.test.tasks.find(t => t.id === updatedTask.id);\n      if (task) {\n        task.name = updatedTask.name\n        task.strict = updatedTask.strict\n        task.flow = updatedTask.flow\n        task.description = updatedTask.description\n\n        this.save();\n      } else {\n        console.error(\"AnalyticTaskList.saveFlow() > Cannot find task\", updatedTask);\n      }\n      dialog.close();\n    },\n\n\n\n    onDelete (task, i, e) {\n      var name = task.name ? task.name : task.label;\n      var div = this.db.div(\"box MatcDeleteDialog\").build();\n      this.db.h3(\"title is-4\", this.getNLS(\"testSettingTaskDeleteTitle\")).build(div);\n      this.db.p('', this.getNLS(\"testSettingTaskDelete1\") + name + this.getNLS(\"testSettingTaskDelete2\")).build(div)\n      var bar = this.db.div(\"buttons\").build(div);\n      var write = this.db.a(\"button is-danger\", this.getNLS(\"btn.delete\")).build(bar);\n      var cancel = this.db.a(\"button is-text\", this.getNLS(\"btn.cancel\")).build(bar);\n      var d = new Dialog();\n      d.own(on(write, touch.press, lang.hitch(this, \"removeTask\", i, d)));\n      d.own(on(cancel, touch.press, lang.hitch(d, \"close\")));\n      d.popup(div, e.target);\n    },\n\n    removeTask (i, d) {\n      this.test.tasks.splice(i, 1);\n      d.close();\n      this.save();\n    },\n\n    async save() {\n      if (this.pub) {\n        this.showSuccess(this.getNLS(\"testSettingsRegister\"));\n      } else {\n        let res = await Services.getModelService().saveTestSettings(\n          this.app.id,\n          this.test\n        );\n        if (res.status === \"ok\") {\n          this.showSuccess(\"Saved..\");\n          this.$emit(\"change\", this.test);\n        }\n      }\n    },\n\n     _onEditFlow(task, i, node) {\n      var tasks = this.test.tasks;\n      for (let j = 0; j < tasks.length; j++) {\n        var t = tasks[j];\n        if (t.id == task.id) {\n          this.onFlow(node, t, j);\n        }\n      }\n    },\n\n    onFlow(node, task) {\n      this.showTaskFlow(node, task, this.app);\n    },\n\n\n    cleanUp() {\n      this.cleanUpTempListener();\n    }\n  },\n  watch: {\n    test(v) {\n      console.debug(\"TestSetting.watch() > test\", v);\n      this.test = v;\n      this.setValue(v);\n    }\n  },\n  mounted() {}\n};\n</script>","import mod from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TestSettings.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TestSettings.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./TestSettings.vue?vue&type=template&id=7bf941c4&\"\nimport script from \"./TestSettings.vue?vue&type=script&lang=js&\"\nexport * from \"./TestSettings.vue?vue&type=script&lang=js&\"\nimport style0 from \"./TestSettings.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","staticClass","attrs","name","mixins","data","openCSS","iconCSS","labelCSS","selectedCSS","updateLabel","selected","methods","renderOptions","css","li","check","lbl","onSelect","onClick","watch","component","_v","_s","$t","on","onChangeNorm","_e","clusterAlgo","clusterAlgoOptions","onChangeAlgo","ref","clusterOptions","onChangeCluster","events","length","viewMode","yAxis","xAxis","app","pub","clusterVars","clusterNorm","annotation","test","class","mode","onBackgroundClick","hasOutliers","$event","toggleOutlier","style","getOutlierStyle","getNLS","hoverDetails","value","cls","y","x","Math","round","s","duration","interactions","screenUnique","screenLoads","weirdness","_l","t","key","props","components","mounted","tasks","selectedTasks","paddingFactor","dialog","includeDropOff","defaultColor","outlierColor","clusters","colors","bins","ScatterPlotDetails","getTaskStyle","postCreate","init","setValue","PerformanceMonitor","clickTask","selectTask","render_Scatter","render_Scatter_Points","renderScatterPoint","p","setTimeout","animateScatterPoint","unSelectPoint","getPointColor","hoverPoint","leavePoint","selectPoint","showSessionReplayHint","url","a","setHint","clearPoint","setMiddle","setYMiddle","setXMiddle","hasOutlier","hasConfig","isLoaded","scatterMode","viewOptions","label","event","selection","cols","computed","Object","setScatterMode","setViewMode","showSelection","model","type","directives","rawName","task","expression","domProps","target","composing","$set","step","i","removeEvent","strict","setStrict","recordOnlyScreenViews","setRecordOnlyScreenView","abScreens","box","id","selectABLine","onSave","onCancel","hash","ignoreFirstEvent","description","flow","ignoredEvents","steps","screen","widget","getEventLabelWithState","createSimulator","wrapper","isDesktopTest","logData","resizeSimulatorContainer","pos","onEvent","state","getValue","cleanUp","onChangeFunnelDropOff","x_prefix","tab","tabs","smoothLineFunction","curve","d3","d","straightLineFunction","canvasPos","w","h","hasTaskSelector","CheckBox","addTab","setTab","setModel","renderTasks","circle","renderTab","render_funnelInteraction","clean_funnelInteraction","div","callback","render_funnelDurartion","reset_funnel_selection","_render_funnel_lines","svgCntr","append","attr","_render_funnel_session_line","color","left","point","top","build","line","_render_funnel_steps","max","min","mean","std","maxValue","canvasHeight","offset","render_funnel_box_plot","height","width","parent","cntr","bar","centre","getStepData","result","selectFunnelPoint","svg","clean_funnelDurartion","render_details","max_duration","max_count","selectCount","createBoxPlot","animateBoxplot","clean_details","b","removeBoxplots","render_scatter","sessions","mean_duration","mean_count","maxDelay","fadeOutPoint","clean_scatter","removePoints","render_dropoff","animateBar","clean_dropoff","removeBars","showSessionReplay","location","getNiceEventLabel","row","testSettings","shorten","getTaskSteps","onEditTask","onDelete","showTaskInTest","onShowTaskChange","showCreateDialog","staticStyle","appID","userID","hasTests","createStep","getScreenName","getWidgetName","updateTask","console","removeTask","_onEditFlow","onFlow"],"sourceRoot":""}